(registry nil
          (comment nil "\nCopyright (c) 2015-2016 The Khronos Group Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and/or associated documentation files (the\n\"Materials\"), to deal in the Materials without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Materials, and to\npermit persons to whom the Materials are furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Materials.\n\nTHE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nMATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\n\n------------------------------------------------------------------------\n\nThis file, vk.xml, is the Vulkan API Registry. It is a critically important\nand normative part of the Vulkan Specification, including a canonical\nmachine-readable definition of the API, parameter and member validation\nlanguage incorporated into the Specification and reference pages, and other\nmaterial which is registered by Khronos, such as tags used by extension and\nlayer authors. The only authoritative version of vk.xml is the one\nmaintained in the master branch of the Khronos Vulkan Github project.\n    ")
          (comment nil " SECTION: Vulkan vendor IDs for physical devices without PCI vendor IDs ")
          (vendorids nil
                     (vendorid
                      ((name . "KHR")
                       (id . "0x10000")
                       (comment . "This is the next available Khronos vendor ID")))
                     (vendorid
                      ((name . "VIV")
                       (id . "0x10001")
                       (comment . "Vivante vendor ID")))
                     (vendorid
                      ((name . "VSI")
                       (id . "0x10002")
                       (comment . "VeriSilicon vendor ID"))))
          (comment nil " SECTION: Vulkan vendor/author tags for extensions and layers ")
          (tags nil
                (tag
                 ((name . "IMG")
                  (author . "Imagination Technologies")
                  (contact . "Michael Worcester @michaelworcester")))
                (tag
                 ((name . "AMD")
                  (author . "Advanced Micro Devices, Inc.")
                  (contact . "Daniel Rakos @aqnuep")))
                (tag
                 ((name . "ARM")
                  (author . "ARM Limited")
                  (contact . "Jan-Harald Fredriksen @janharald")))
                (tag
                 ((name . "FSL")
                  (author . "Freescale Semiconductor, Inc.")
                  (contact . "Norbert Nopper @FslNopper")))
                (tag
                 ((name . "BRCM")
                  (author . "Broadcom Corporation")
                  (contact . "Graeme Leese @gnl21")))
                (tag
                 ((name . "NXP")
                  (author . "NXP Semiconductors N.V.")
                  (contact . "Norbert Nopper @FslNopper")))
                (tag
                 ((name . "NV")
                  (author . "NVIDIA Corporation")
                  (contact . "Daniel Koch @dgkoch")))
                (tag
                 ((name . "NVX")
                  (author . "NVIDIA Corporation")
                  (contact . "Daniel Koch @dgkoch")))
                (tag
                 ((name . "VIV")
                  (author . "Vivante Corporation")
                  (contact . "Yanjun Zhang @yanjunzhang")))
                (tag
                 ((name . "VSI")
                  (author . "VeriSilicon Holdings Co., Ltd.")
                  (contact . "Yanjun Zhang @yanjunzhang")))
                (tag
                 ((name . "KDAB")
                  (author . "KDAB")
                  (contact . "Sean Harmer @seanharmer")))
                (tag
                 ((name . "ANDROID")
                  (author . "Google, Inc.")
                  (contact . "Jesse Hall @jessehall")))
                (tag
                 ((name . "CHROMIUM")
                  (author . "Google, Inc.")
                  (contact . "Jesse Hall @jessehall")))
                (tag
                 ((name . "GOOGLE")
                  (author . "Google, Inc.")
                  (contact . "Jesse Hall @jessehall")))
                (tag
                 ((name . "QCOM")
                  (author . "Qualcomm Technologies, Inc.")
                  (contact . "Maurice Ribble @mribble")))
                (tag
                 ((name . "LUNARG")
                  (author . "LunarG, Inc.")
                  (contact . "Karen Ghavam @KarenGhavam")))
                (tag
                 ((name . "SAMSUNG")
                  (author . "Samsung Electronics Co., Ltd.")
                  (contact . "Alon Or-bach @alonorbach")))
                (tag
                 ((name . "SEC")
                  (author . "Samsung Electronics Co., Ltd.")
                  (contact . "Alon Or-bach @alonorbach")))
                (tag
                 ((name . "TIZEN")
                  (author . "Samsung Electronics Co., Ltd.")
                  (contact . "Alon Or-bach @alonorbach")))
                (tag
                 ((name . "RENDERDOC")
                  (author . "RenderDoc (renderdoc.org)")
                  (contact . "baldurk@baldurk.org"))))
          (comment nil " SECTION: Vulkan type definitions ")
          (types nil
                 (type
                  ((name . "vk_platform")
                   (category . "include"))
                  "#include \"vk_platform.h\"")
                 (comment nil " WSI extensions ")
                 (type
                  ((category . "include"))
                  "#include \""
                  (name nil "vulkan.h")
                  "\"")
                 (type
                  ((category . "include"))
                  "#include <"
                  (name nil "X11/Xlib.h")
                  ">")
                 (type
                  ((category . "include"))
                  "#include <"
                  (name nil "android/native_window.h")
                  ">")
                 (type
                  ((category . "include"))
                  "#include <"
                  (name nil "mir_toolkit/client_types.h")
                  ">")
                 (type
                  ((category . "include"))
                  "#include <"
                  (name nil "wayland-client.h")
                  ">")
                 (type
                  ((category . "include"))
                  "#include <"
                  (name nil "windows.h")
                  ">")
                 (type
                  ((category . "include"))
                  "#include <"
                  (name nil "xcb/xcb.h")
                  ">")
                 (type
                  ((requires . "X11/Xlib.h")
                   (name . "Display")))
                 (type
                  ((requires . "X11/Xlib.h")
                   (name . "VisualID")))
                 (type
                  ((requires . "X11/Xlib.h")
                   (name . "Window")))
                 (type
                  ((requires . "android/native_window.h")
                   (name . "ANativeWindow")))
                 (type
                  ((requires . "mir_toolkit/client_types.h")
                   (name . "MirConnection")))
                 (type
                  ((requires . "mir_toolkit/client_types.h")
                   (name . "MirSurface")))
                 (type
                  ((requires . "wayland-client.h")
                   (name . "wl_display")))
                 (type
                  ((requires . "wayland-client.h")
                   (name . "wl_surface")))
                 (type
                  ((requires . "windows.h")
                   (name . "HINSTANCE")))
                 (type
                  ((requires . "windows.h")
                   (name . "HWND")))
                 (type
                  ((requires . "xcb/xcb.h")
                   (name . "xcb_connection_t")))
                 (type
                  ((requires . "xcb/xcb.h")
                   (name . "xcb_visualid_t")))
                 (type
                  ((requires . "xcb/xcb.h")
                   (name . "xcb_window_t")))
                 (type
                  ((category . "define"))
                  "#define "
                  (name nil "VK_MAKE_VERSION")
                  "(major, minor, patch) \\\n    (((major) << 22) | ((minor) << 12) | (patch))")
                 (type
                  ((category . "define"))
                  "#define "
                  (name nil "VK_VERSION_MAJOR")
                  "(version) ((uint32_t)(version) >> 22)")
                 (type
                  ((category . "define"))
                  "#define "
                  (name nil "VK_VERSION_MINOR")
                  "(version) (((uint32_t)(version) >> 12) & 0x3ff)")
                 (type
                  ((category . "define"))
                  "#define "
                  (name nil "VK_VERSION_PATCH")
                  "(version) ((uint32_t)(version) & 0xfff)")
                 (type
                  ((category . "define"))
                  "// DEPRECATED: This define has been removed. Specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION macro, should be used instead.\n//#define "
                  (name nil "VK_API_VERSION")
                  " "
                  (type nil "VK_MAKE_VERSION")
                  "(1, 0, 0)")
                 (comment nil " The patch version here should never be set to anything other than 0 ")
                 (type
                  ((category . "define"))
                  "// Vulkan 1.0 version number\n#define "
                  (name nil "VK_API_VERSION_1_0")
                  " "
                  (type nil "VK_MAKE_VERSION")
                  "(1, 0, 0)")
                 (comment nil " The patch version here should never be set to anything other than 0 ")
                 (type
                  ((category . "define"))
                  "// Version of this file\n#define "
                  (name nil "VK_HEADER_VERSION")
                  " 11")
                 (type
                  ((category . "define"))
                  "\n#define "
                  (name nil "VK_DEFINE_HANDLE")
                  "(object) typedef struct object##_T* object;")
                 (type
                  ((category . "define")
                   (name . "VK_DEFINE_NON_DISPATCHABLE_HANDLE"))
                  "\n#if defined(__LP64__) || defined(_WIN64) || defined(__x86_64__) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)\n        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;\n#else\n        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;\n#endif\n        ")
                 (type
                  ((category . "define"))
                  "\n#define "
                  (name nil "VK_NULL_HANDLE")
                  " 0\n        ")
                 (type
                  ((category . "basetype"))
                  "typedef "
                  (type nil "uint32_t")
                  " "
                  (name nil "VkSampleMask")
                  ";")
                 (type
                  ((category . "basetype"))
                  "typedef "
                  (type nil "uint32_t")
                  " "
                  (name nil "VkBool32")
                  ";")
                 (type
                  ((category . "basetype"))
                  "typedef "
                  (type nil "uint32_t")
                  " "
                  (name nil "VkFlags")
                  ";")
                 (type
                  ((category . "basetype"))
                  "typedef "
                  (type nil "uint64_t")
                  " "
                  (name nil "VkDeviceSize")
                  ";")
                 (comment nil " Basic C types, pulled in via vk_platform.h ")
                 (type
                  ((requires . "vk_platform")
                   (name . "void")))
                 (type
                  ((requires . "vk_platform")
                   (name . "char")))
                 (type
                  ((requires . "vk_platform")
                   (name . "float")))
                 (type
                  ((requires . "vk_platform")
                   (name . "uint8_t")))
                 (type
                  ((requires . "vk_platform")
                   (name . "uint32_t")))
                 (type
                  ((requires . "vk_platform")
                   (name . "uint64_t")))
                 (type
                  ((requires . "vk_platform")
                   (name . "int32_t")))
                 (type
                  ((requires . "vk_platform")
                   (name . "size_t")))
                 (comment nil " Bitfield types ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkFramebufferCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkQueryPoolCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkRenderPassCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkSamplerCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineLayoutCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineCacheCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineDepthStencilStateCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineDynamicStateCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineColorBlendStateCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineMultisampleStateCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineRasterizationStateCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineViewportStateCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineTessellationStateCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineInputAssemblyStateCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineVertexInputStateCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineShaderStageCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkDescriptorSetLayoutCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkBufferViewCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkInstanceCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkDeviceCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkDeviceQueueCreateFlags")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((requires . "VkQueueFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkQueueFlags")
                  ";")
                 (comment nil " Queue capabilities ")
                 (type
                  ((requires . "VkMemoryPropertyFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkMemoryPropertyFlags")
                  ";")
                 (comment nil " Memory properties passed into vkAllocateMemory(). ")
                 (type
                  ((requires . "VkMemoryHeapFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkMemoryHeapFlags")
                  ";")
                 (comment nil " Memory heap flags ")
                 (type
                  ((requires . "VkAccessFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkAccessFlags")
                  ";")
                 (comment nil " Memory access flags passed to barrier/dependency operations ")
                 (type
                  ((requires . "VkBufferUsageFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkBufferUsageFlags")
                  ";")
                 (comment nil " Buffer usage flags ")
                 (type
                  ((requires . "VkBufferCreateFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkBufferCreateFlags")
                  ";")
                 (comment nil " Buffer creation flags ")
                 (type
                  ((requires . "VkShaderStageFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkShaderStageFlags")
                  ";")
                 (comment nil " Shader stage flags ")
                 (type
                  ((requires . "VkImageUsageFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkImageUsageFlags")
                  ";")
                 (comment nil " Image usage flags ")
                 (type
                  ((requires . "VkImageCreateFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkImageCreateFlags")
                  ";")
                 (comment nil " Image creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkImageViewCreateFlags")
                  ";")
                 (comment nil " Image view creation flags (no bits yet) ")
                 (type
                  ((requires . "VkPipelineCreateFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineCreateFlags")
                  ";")
                 (comment nil " Pipeline creation flags ")
                 (type
                  ((requires . "VkColorComponentFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkColorComponentFlags")
                  ";")
                 (comment nil " Color component flags ")
                 (type
                  ((requires . "VkFenceCreateFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkFenceCreateFlags")
                  ";")
                 (comment nil " Fence creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkSemaphoreCreateFlags")
                  ";")
                 (comment nil " Semaphore creation flags ")
                 (type
                  ((requires . "VkFormatFeatureFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkFormatFeatureFlags")
                  ";")
                 (comment nil " Format capability flags ")
                 (type
                  ((requires . "VkQueryControlFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkQueryControlFlags")
                  ";")
                 (comment nil " Query control flags ")
                 (type
                  ((requires . "VkQueryResultFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkQueryResultFlags")
                  ";")
                 (comment nil " Query result flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkShaderModuleCreateFlags")
                  ";")
                 (comment nil " Shader module creation flags (no bits yet) ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkEventCreateFlags")
                  ";")
                 (comment nil " Event creation flags  (no bits yet) ")
                 (type
                  ((requires . "VkCommandPoolCreateFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkCommandPoolCreateFlags")
                  ";")
                 (comment nil " Command pool creation flags ")
                 (type
                  ((requires . "VkCommandPoolResetFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkCommandPoolResetFlags")
                  ";")
                 (comment nil " Command pool reset flags ")
                 (type
                  ((requires . "VkCommandBufferResetFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkCommandBufferResetFlags")
                  ";")
                 (comment nil " Command buffer reset flags ")
                 (type
                  ((requires . "VkCommandBufferUsageFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkCommandBufferUsageFlags")
                  ";")
                 (comment nil " Command buffer usage flags ")
                 (type
                  ((requires . "VkQueryPipelineStatisticFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkQueryPipelineStatisticFlags")
                  ";")
                 (comment nil " Pipeline statistics flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkMemoryMapFlags")
                  ";")
                 (comment nil " Memory mapping flags (no bits yet) ")
                 (type
                  ((requires . "VkImageAspectFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkImageAspectFlags")
                  ";")
                 (comment nil " Bitfield of image aspects ")
                 (type
                  ((requires . "VkSparseMemoryBindFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkSparseMemoryBindFlags")
                  ";")
                 (comment nil " Sparse memory bind flags ")
                 (type
                  ((requires . "VkSparseImageFormatFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkSparseImageFormatFlags")
                  ";")
                 (comment nil " Sparse image memory requirements flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkSubpassDescriptionFlags")
                  ";")
                 (comment nil " Subpass description flags ")
                 (type
                  ((requires . "VkPipelineStageFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkPipelineStageFlags")
                  ";")
                 (comment nil " Pipeline stages ")
                 (type
                  ((requires . "VkSampleCountFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkSampleCountFlags")
                  ";")
                 (comment nil " Pipeline stages ")
                 (type
                  ((requires . "VkAttachmentDescriptionFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkAttachmentDescriptionFlags")
                  ";")
                 (comment nil " Render pass attachment description flags ")
                 (type
                  ((requires . "VkStencilFaceFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkStencilFaceFlags")
                  ";")
                 (comment nil " Stencil face flags ")
                 (type
                  ((requires . "VkCullModeFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkCullModeFlags")
                  ";")
                 (comment nil " Cull mode flags ")
                 (type
                  ((requires . "VkDescriptorPoolCreateFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkDescriptorPoolCreateFlags")
                  ";")
                 (comment nil " Descriptor pool creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkDescriptorPoolResetFlags")
                  ";")
                 (comment nil " Descriptor pool reset flags ")
                 (type
                  ((requires . "VkDependencyFlagBits")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkDependencyFlags")
                  ";")
                 (comment nil " Pipeline barrier and subpass dependency flags ")
                 (comment nil " WSI extensions ")
                 (type
                  ((requires . "VkCompositeAlphaFlagBitsKHR")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkCompositeAlphaFlagsKHR")
                  ";")
                 (type
                  ((requires . "VkDisplayPlaneAlphaFlagBitsKHR")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkDisplayPlaneAlphaFlagsKHR")
                  ";")
                 (type
                  ((requires . "VkSurfaceTransformFlagBitsKHR")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkSurfaceTransformFlagsKHR")
                  ";")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkSwapchainCreateFlagsKHR")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkDisplayModeCreateFlagsKHR")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkDisplaySurfaceCreateFlagsKHR")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkAndroidSurfaceCreateFlagsKHR")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkMirSurfaceCreateFlagsKHR")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkWaylandSurfaceCreateFlagsKHR")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkWin32SurfaceCreateFlagsKHR")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkXlibSurfaceCreateFlagsKHR")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkXcbSurfaceCreateFlagsKHR")
                  ";")
                 (comment nil " creation flags ")
                 (type
                  ((requires . "VkDebugReportFlagBitsEXT")
                   (category . "bitmask"))
                  "typedef "
                  (type nil "VkFlags")
                  " "
                  (name nil "VkDebugReportFlagsEXT")
                  ";")
                 (comment nil " Types which can be void pointers or class pointers, selected at compile time ")
                 (type
                  ((category . "handle"))
                  (type nil "VK_DEFINE_HANDLE")
                  "("
                  (name nil "VkInstance")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkInstance"))
                  (type nil "VK_DEFINE_HANDLE")
                  "("
                  (name nil "VkPhysicalDevice")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkPhysicalDevice"))
                  (type nil "VK_DEFINE_HANDLE")
                  "("
                  (name nil "VkDevice")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_HANDLE")
                  "("
                  (name nil "VkQueue")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkCommandPool"))
                  (type nil "VK_DEFINE_HANDLE")
                  "("
                  (name nil "VkCommandBuffer")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkDeviceMemory")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkCommandPool")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkBuffer")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkBufferView")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkImage")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkImageView")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkShaderModule")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkPipeline")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkPipelineLayout")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkSampler")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDescriptorPool"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkDescriptorSet")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkDescriptorSetLayout")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkDescriptorPool")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkFence")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkSemaphore")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkEvent")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkQueryPool")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkFramebuffer")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkRenderPass")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkDevice"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkPipelineCache")
                  ")")
                 (comment nil " WSI extensions ")
                 (type
                  ((category . "handle"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkDisplayKHR")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkPhysicalDevice,VkDisplayKHR"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkDisplayModeKHR")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkInstance"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkSurfaceKHR")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkSurfaceKHR"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkSwapchainKHR")
                  ")")
                 (type
                  ((category . "handle")
                   (parent . "VkInstance"))
                  (type nil "VK_DEFINE_NON_DISPATCHABLE_HANDLE")
                  "("
                  (name nil "VkDebugReportCallbackEXT")
                  ")")
                 (comment nil " Types generated from corresponding <enums> tags below ")
                 (type
                  ((name . "VkAttachmentLoadOp")
                   (category . "enum")))
                 (type
                  ((name . "VkAttachmentStoreOp")
                   (category . "enum")))
                 (type
                  ((name . "VkBlendFactor")
                   (category . "enum")))
                 (type
                  ((name . "VkBlendOp")
                   (category . "enum")))
                 (type
                  ((name . "VkBorderColor")
                   (category . "enum")))
                 (type
                  ((name . "VkFramebufferCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkQueryPoolCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkRenderPassCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkSamplerCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineCacheHeaderVersion")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineLayoutCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineCacheCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineDepthStencilStateCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineDynamicStateCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineColorBlendStateCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineMultisampleStateCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineRasterizationStateCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineViewportStateCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineTessellationStateCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineInputAssemblyStateCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineVertexInputStateCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineShaderStageCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkDescriptorSetLayoutCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkBufferViewCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkInstanceCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkDeviceQueueCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkBufferCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkBufferUsageFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkColorComponentFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkComponentSwizzle")
                   (category . "enum")))
                 (type
                  ((name . "VkCommandPoolCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkCommandPoolResetFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkCommandBufferResetFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkCommandBufferLevel")
                   (category . "enum")))
                 (type
                  ((name . "VkCommandBufferUsageFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkCompareOp")
                   (category . "enum")))
                 (type
                  ((name . "VkCullModeFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkDescriptorType")
                   (category . "enum")))
                 (type
                  ((name . "VkDeviceCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkDynamicState")
                   (category . "enum")))
                 (type
                  ((name . "VkFenceCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPolygonMode")
                   (category . "enum")))
                 (type
                  ((name . "VkFormat")
                   (category . "enum")))
                 (type
                  ((name . "VkFormatFeatureFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkFrontFace")
                   (category . "enum")))
                 (type
                  ((name . "VkImageAspectFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkImageCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkImageLayout")
                   (category . "enum")))
                 (type
                  ((name . "VkImageTiling")
                   (category . "enum")))
                 (type
                  ((name . "VkImageType")
                   (category . "enum")))
                 (type
                  ((name . "VkImageUsageFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkImageViewType")
                   (category . "enum")))
                 (type
                  ((name . "VkSharingMode")
                   (category . "enum")))
                 (type
                  ((name . "VkIndexType")
                   (category . "enum")))
                 (type
                  ((name . "VkLogicOp")
                   (category . "enum")))
                 (type
                  ((name . "VkMemoryHeapFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkAccessFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkMemoryPropertyFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPhysicalDeviceType")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineBindPoint")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkPrimitiveTopology")
                   (category . "enum")))
                 (type
                  ((name . "VkQueryControlFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkQueryPipelineStatisticFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkQueryResultFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkQueryType")
                   (category . "enum")))
                 (type
                  ((name . "VkQueueFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkSubpassContents")
                   (category . "enum")))
                 (type
                  ((name . "VkResult")
                   (category . "enum")))
                 (type
                  ((name . "VkShaderStageFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkSparseMemoryBindFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkStencilFaceFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkStencilOp")
                   (category . "enum")))
                 (type
                  ((name . "VkStructureType")
                   (category . "enum")))
                 (type
                  ((name . "VkSystemAllocationScope")
                   (category . "enum")))
                 (type
                  ((name . "VkInternalAllocationType")
                   (category . "enum")))
                 (type
                  ((name . "VkSamplerAddressMode")
                   (category . "enum")))
                 (type
                  ((name . "VkFilter")
                   (category . "enum")))
                 (type
                  ((name . "VkSamplerMipmapMode")
                   (category . "enum")))
                 (type
                  ((name . "VkVertexInputRate")
                   (category . "enum")))
                 (type
                  ((name . "VkPipelineStageFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkSparseImageFormatFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkSampleCountFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkAttachmentDescriptionFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkDescriptorPoolCreateFlagBits")
                   (category . "enum")))
                 (type
                  ((name . "VkDependencyFlagBits")
                   (category . "enum")))
                 (comment nil " WSI extensions ")
                 (type
                  ((name . "VkColorSpaceKHR")
                   (category . "enum")))
                 (type
                  ((name . "VkCompositeAlphaFlagBitsKHR")
                   (category . "enum")))
                 (type
                  ((name . "VkDisplayPlaneAlphaFlagBitsKHR")
                   (category . "enum")))
                 (type
                  ((name . "VkPresentModeKHR")
                   (category . "enum")))
                 (type
                  ((name . "VkSurfaceTransformFlagBitsKHR")
                   (category . "enum")))
                 (type
                  ((name . "VkDebugReportFlagBitsEXT")
                   (category . "enum")))
                 (type
                  ((name . "VkDebugReportObjectTypeEXT")
                   (category . "enum")))
                 (type
                  ((name . "VkDebugReportErrorEXT")
                   (category . "enum")))
                 (comment nil " The PFN_vk*Function types are used by VkAllocationCallbacks below ")
                 (type
                  ((category . "funcpointer"))
                  "typedef void (VKAPI_PTR *"
                  (name nil "PFN_vkInternalAllocationNotification")
                  ")(\n    "
                  (type nil "void")
                  "*                                       pUserData,\n    "
                  (type nil "size_t")
                  "                                      size,\n    "
                  (type nil "VkInternalAllocationType")
                  "                    allocationType,\n    "
                  (type nil "VkSystemAllocationScope")
                  "                     allocationScope);")
                 (type
                  ((category . "funcpointer"))
                  "typedef void (VKAPI_PTR *"
                  (name nil "PFN_vkInternalFreeNotification")
                  ")(\n    "
                  (type nil "void")
                  "*                                       pUserData,\n    "
                  (type nil "size_t")
                  "                                      size,\n    "
                  (type nil "VkInternalAllocationType")
                  "                    allocationType,\n    "
                  (type nil "VkSystemAllocationScope")
                  "                     allocationScope);")
                 (type
                  ((category . "funcpointer"))
                  "typedef void* (VKAPI_PTR *"
                  (name nil "PFN_vkReallocationFunction")
                  ")(\n    "
                  (type nil "void")
                  "*                                       pUserData,\n    "
                  (type nil "void")
                  "*                                       pOriginal,\n    "
                  (type nil "size_t")
                  "                                      size,\n    "
                  (type nil "size_t")
                  "                                      alignment,\n    "
                  (type nil "VkSystemAllocationScope")
                  "                     allocationScope);")
                 (type
                  ((category . "funcpointer"))
                  "typedef void* (VKAPI_PTR *"
                  (name nil "PFN_vkAllocationFunction")
                  ")(\n    "
                  (type nil "void")
                  "*                                       pUserData,\n    "
                  (type nil "size_t")
                  "                                      size,\n    "
                  (type nil "size_t")
                  "                                      alignment,\n    "
                  (type nil "VkSystemAllocationScope")
                  "                     allocationScope);")
                 (type
                  ((category . "funcpointer"))
                  "typedef void (VKAPI_PTR *"
                  (name nil "PFN_vkFreeFunction")
                  ")(\n    "
                  (type nil "void")
                  "*                                       pUserData,\n    "
                  (type nil "void")
                  "*                                       pMemory);")
                 (comment nil " The PFN_vkVoidFunction type are used by VkGet*ProcAddr below ")
                 (type
                  ((category . "funcpointer"))
                  "typedef void (VKAPI_PTR *"
                  (name nil "PFN_vkVoidFunction")
                  ")(void);")
                 (comment nil " The PFN_vkDebugReportCallbackEXT type are used by the DEBUG_REPORT extension")
                 (type
                  ((category . "funcpointer"))
                  "typedef VkBool32 (VKAPI_PTR *"
                  (name nil "PFN_vkDebugReportCallbackEXT")
                  ")(\n    "
                  (type nil "VkDebugReportFlagsEXT")
                  "                       flags,\n    "
                  (type nil "VkDebugReportObjectTypeEXT")
                  "                  objectType,\n    "
                  (type nil "uint64_t")
                  "                                    object,\n    "
                  (type nil "size_t")
                  "                                      location,\n    "
                  (type nil "int32_t")
                  "                                     messageCode,\n    const "
                  (type nil "char")
                  "*                                 pLayerPrefix,\n    const "
                  (type nil "char")
                  "*                                 pMessage,\n    "
                  (type nil "void")
                  "*                                       pUserData);")
                 (comment nil " Struct types ")
                 (type
                  ((category . "struct")
                   (name . "VkOffset2D"))
                  (member nil
                          (type nil "int32_t")
                          (name nil "x"))
                  (member nil
                          (type nil "int32_t")
                          (name nil "y")))
                 (type
                  ((category . "struct")
                   (name . "VkOffset3D"))
                  (member nil
                          (type nil "int32_t")
                          (name nil "x"))
                  (member nil
                          (type nil "int32_t")
                          (name nil "y"))
                  (member nil
                          (type nil "int32_t")
                          (name nil "z")))
                 (type
                  ((category . "struct")
                   (name . "VkExtent2D"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "width"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "height")))
                 (type
                  ((category . "struct")
                   (name . "VkExtent3D"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "width"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "height"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "depth")))
                 (type
                  ((category . "struct")
                   (name . "VkViewport"))
                  (member nil
                          (type nil "float")
                          (name nil "x"))
                  (member nil
                          (type nil "float")
                          (name nil "y"))
                  (member nil
                          (type nil "float")
                          (name nil "width"))
                  (member nil
                          (type nil "float")
                          (name nil "height"))
                  (member nil
                          (type nil "float")
                          (name nil "minDepth"))
                  (member nil
                          (type nil "float")
                          (name nil "maxDepth"))
                  (validity nil
                            (usage nil "pname:width must: be greater than `0.0` and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxViewportDimensions[0]")
                            (usage nil "pname:height must: be greater than `0.0` and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxViewportDimensions[1]")
                            (usage nil "pname:x and pname:y must: each be between pname:viewportBoundsRange[0] and pname:viewportBoundsRange[1], inclusive")
                            (usage nil "pname:x + pname:width must: be less than or equal to pname:viewportBoundsRange[1]")
                            (usage nil "pname:y + pname:height must: be less than or equal to pname:viewportBoundsRange[1]")
                            (usage nil "pname:minDepth must: be between `0.0` and `1.0`, inclusive")
                            (usage nil "pname:maxDepth must: be between `0.0` and `1.0`, inclusive")))
                 (type
                  ((category . "struct")
                   (name . "VkRect2D"))
                  (member nil
                          (type nil "VkOffset2D")
                          (name nil "offset"))
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "extent")))
                 (type
                  ((category . "struct")
                   (name . "VkRect3D"))
                  (member nil
                          (type nil "VkOffset3D")
                          (name nil "offset"))
                  (member nil
                          (type nil "VkExtent3D")
                          (name nil "extent")))
                 (type
                  ((category . "struct")
                   (name . "VkClearRect"))
                  (member nil
                          (type nil "VkRect2D")
                          (name nil "rect"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "baseArrayLayer"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "layerCount")))
                 (type
                  ((category . "struct")
                   (name . "VkComponentMapping"))
                  (member nil
                          (type nil "VkComponentSwizzle")
                          (name nil "r"))
                  (member nil
                          (type nil "VkComponentSwizzle")
                          (name nil "g"))
                  (member nil
                          (type nil "VkComponentSwizzle")
                          (name nil "b"))
                  (member nil
                          (type nil "VkComponentSwizzle")
                          (name nil "a")))
                 (type
                  ((category . "struct")
                   (name . "VkPhysicalDeviceProperties")
                   (returnedonly . "true"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "apiVersion"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "driverVersion"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "vendorID"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "deviceID"))
                  (member nil
                          (type nil "VkPhysicalDeviceType")
                          (name nil "deviceType"))
                  (member nil
                          (type nil "char")
                          (name nil "deviceName")
                          "["
                          (enum nil "VK_MAX_PHYSICAL_DEVICE_NAME_SIZE")
                          "]")
                  (member nil
                          (type nil "uint8_t")
                          (name nil "pipelineCacheUUID")
                          "["
                          (enum nil "VK_UUID_SIZE")
                          "]")
                  (member nil
                          (type nil "VkPhysicalDeviceLimits")
                          (name nil "limits"))
                  (member nil
                          (type nil "VkPhysicalDeviceSparseProperties")
                          (name nil "sparseProperties")))
                 (type
                  ((category . "struct")
                   (name . "VkExtensionProperties")
                   (returnedonly . "true"))
                  (member nil
                          (type nil "char")
                          (name nil "extensionName")
                          "["
                          (enum nil "VK_MAX_EXTENSION_NAME_SIZE")
                          "]")
                  (comment nil " extension name ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "specVersion"))
                  (comment nil " version of the extension specification implemented "))
                 (type
                  ((category . "struct")
                   (name . "VkLayerProperties")
                   (returnedonly . "true"))
                  (member nil
                          (type nil "char")
                          (name nil "layerName")
                          "["
                          (enum nil "VK_MAX_EXTENSION_NAME_SIZE")
                          "]")
                  (comment nil " layer name ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "specVersion"))
                  (comment nil " version of the layer specification implemented ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "implementationVersion"))
                  (comment nil " build or release version of the layer's library ")
                  (member nil
                          (type nil "char")
                          (name nil "description")
                          "["
                          (enum nil "VK_MAX_DESCRIPTION_SIZE")
                          "]")
                  (comment nil " Free-form description of the layer "))
                 (type
                  ((category . "struct")
                   (name . "VkApplicationInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Type of structure. Should be VK_STRUCTURE_TYPE_APPLICATION_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*     "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true")
                    (len . "null-terminated"))
                   "const "
                   (type nil "char")
                   "*     "
                   (name nil "pApplicationName"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "applicationVersion"))
                  (member
                   ((optional . "true")
                    (len . "null-terminated"))
                   "const "
                   (type nil "char")
                   "*     "
                   (name nil "pEngineName"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "engineVersion"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "apiVersion"))
                  (validity nil
                            (usage nil "pname:apiVersion must: be zero, or otherwise it must: be a version that the implementation supports, or supports an effective substitute for")))
                 (type
                  ((category . "struct")
                   (name . "VkAllocationCallbacks"))
                  (member
                   ((optional . "true"))
                   (type nil "void")
                   "*           "
                   (name nil "pUserData"))
                  (member nil
                          (type nil "PFN_vkAllocationFunction")
                          (name nil "pfnAllocation"))
                  (member nil
                          (type nil "PFN_vkReallocationFunction")
                          (name nil "pfnReallocation"))
                  (member nil
                          (type nil "PFN_vkFreeFunction")
                          (name nil "pfnFree"))
                  (member
                   ((optional . "true"))
                   (type nil "PFN_vkInternalAllocationNotification")
                   (name nil "pfnInternalAllocation"))
                  (member
                   ((optional . "true"))
                   (type nil "PFN_vkInternalFreeNotification")
                   (name nil "pfnInternalFree"))
                  (validity nil
                            (usage nil "pname:pfnAllocation must: be a pointer to a valid user-defined PFN_vkAllocationFunction")
                            (usage nil "pname:pfnReallocation must: be a pointer to a valid user-defined PFN_vkReallocationFunction")
                            (usage nil "pname:pfnFree must: be a pointer to a valid user-defined PFN_vkFreeFunction")
                            (usage nil "If either of pname:pfnInternalAllocation or pname:pfnInternalFree is not `NULL`, both must: be valid callbacks")))
                 (type
                  ((category . "struct")
                   (name . "VkDeviceQueueCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Should be VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*     "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkDeviceQueueCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "queueFamilyIndex"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "queueCount"))
                  (member
                   ((len . "queueCount"))
                   "const "
                   (type nil "float")
                   "*    "
                   (name nil "pQueuePriorities"))
                  (validity nil
                            (usage nil "pname:queueFamilyIndex must: be less than pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties")
                            (usage nil "pname:queueCount must: be less than or equal to the pname:queueCount member of the sname:VkQueueFamilyProperties structure, as returned by fname:vkGetPhysicalDeviceQueueFamilyProperties in the pname:pQueueFamilyProperties[pname:queueFamilyIndex]")
                            (usage nil "Each element of pname:pQueuePriorities must: be between `0.0` and `1.0` inclusive")))
                 (type
                  ((category . "struct")
                   (name . "VkDeviceCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Should be VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*     "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkDeviceCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "queueCreateInfoCount"))
                  (member
                   ((len . "queueCreateInfoCount"))
                   "const "
                   (type nil "VkDeviceQueueCreateInfo")
                   "* "
                   (name nil "pQueueCreateInfos"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "enabledLayerCount"))
                  (member
                   ((len . "enabledLayerCount,null-terminated"))
                   "const "
                   (type nil "char")
                   "* const*      "
                   (name nil "ppEnabledLayerNames"))
                  (comment nil " Ordered list of layer names to be enabled ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "enabledExtensionCount"))
                  (member
                   ((len . "enabledExtensionCount,null-terminated"))
                   "const "
                   (type nil "char")
                   "* const*      "
                   (name nil "ppEnabledExtensionNames"))
                  (member
                   ((optional . "true"))
                   "const "
                   (type nil "VkPhysicalDeviceFeatures")
                   "* "
                   (name nil "pEnabledFeatures"))
                  (validity nil
                            (usage nil "Any given element of pname:ppEnabledLayerNames must: be the name of a layer present on the system, exactly matching a string returned in the sname:VkLayerProperties structure by fname:vkEnumerateDeviceLayerProperties")
                            (usage nil "Any given element of pname:ppEnabledExtensionNames must: be the name of an extension present on the system, exactly matching a string returned in the sname:VkExtensionProperties structure by fname:vkEnumerateDeviceExtensionProperties")
                            (usage nil "If an extension listed in pname:ppEnabledExtensionNames is provided as part of a layer, then both the layer and extension must: be enabled to enable that extension")
                            (usage nil "The pname:queueFamilyIndex member of any given element of pname:pQueueCreateInfos must: be unique within pname:pQueueCreateInfos")))
                 (type
                  ((category . "struct")
                   (name . "VkInstanceCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Should be VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkInstanceCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member
                   ((optional . "true"))
                   "const "
                   (type nil "VkApplicationInfo")
                   "* "
                   (name nil "pApplicationInfo"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "enabledLayerCount"))
                  (member
                   ((len . "enabledLayerCount,null-terminated"))
                   "const "
                   (type nil "char")
                   "* const*      "
                   (name nil "ppEnabledLayerNames"))
                  (comment nil " Ordered list of layer names to be enabled ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "enabledExtensionCount"))
                  (member
                   ((len . "enabledExtensionCount,null-terminated"))
                   "const "
                   (type nil "char")
                   "* const*      "
                   (name nil "ppEnabledExtensionNames"))
                  (comment nil " Extension names to be enabled ")
                  (validity nil
                            (usage nil "Any given element of pname:ppEnabledLayerNames must: be the name of a layer present on the system, exactly matching a string returned in the sname:VkLayerProperties structure by fname:vkEnumerateInstanceLayerProperties")
                            (usage nil "Any given element of pname:ppEnabledExtensionNames must: be the name of an extension present on the system, exactly matching a string returned in the sname:VkExtensionProperties structure by fname:vkEnumerateInstanceExtensionProperties")
                            (usage nil "If an extension listed in pname:ppEnabledExtensionNames is provided as part of a layer, then both the layer and extension must: be enabled to enable that extension")))
                 (type
                  ((category . "struct")
                   (name . "VkQueueFamilyProperties")
                   (returnedonly . "true"))
                  (member
                   ((optional . "true"))
                   (type nil "VkQueueFlags")
                   (name nil "queueFlags"))
                  (comment nil " Queue flags ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "queueCount"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "timestampValidBits"))
                  (member nil
                          (type nil "VkExtent3D")
                          (name nil "minImageTransferGranularity"))
                  (comment nil " Minimum alignment requirement for image transfers "))
                 (type
                  ((category . "struct")
                   (name . "VkPhysicalDeviceMemoryProperties")
                   (returnedonly . "true"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "memoryTypeCount"))
                  (member nil
                          (type nil "VkMemoryType")
                          (name nil "memoryTypes")
                          "["
                          (enum nil "VK_MAX_MEMORY_TYPES")
                          "]")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "memoryHeapCount"))
                  (member nil
                          (type nil "VkMemoryHeap")
                          (name nil "memoryHeaps")
                          "["
                          (enum nil "VK_MAX_MEMORY_HEAPS")
                          "]"))
                 (type
                  ((category . "struct")
                   (name . "VkMemoryAllocateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "allocationSize"))
                  (comment nil " Size of memory allocation ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "memoryTypeIndex"))
                  (comment nil " Index of the of the memory type to allocate from ")
                  (validity nil
                            (usage nil "pname:allocationSize must: be less than or equal to the amount of memory available to the sname:VkMemoryHeap specified by pname:memoryTypeIndex and the calling command's sname:VkDevice")
                            (usage nil "pname:allocationSize must: be greater than `0`")))
                 (type
                  ((category . "struct")
                   (name . "VkMemoryRequirements")
                   (returnedonly . "true"))
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "size"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "alignment"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "memoryTypeBits"))
                  (comment nil " Bitfield of the allowed memory type indices into memoryTypes[] for this object "))
                 (type
                  ((category . "struct")
                   (name . "VkSparseImageFormatProperties")
                   (returnedonly . "true"))
                  (member
                   ((optional . "true"))
                   (type nil "VkImageAspectFlags")
                   (name nil "aspectMask"))
                  (member nil
                          (type nil "VkExtent3D")
                          (name nil "imageGranularity"))
                  (member
                   ((optional . "true"))
                   (type nil "VkSparseImageFormatFlags")
                   (name nil "flags")))
                 (type
                  ((category . "struct")
                   (name . "VkSparseImageMemoryRequirements")
                   (returnedonly . "true"))
                  (member nil
                          (type nil "VkSparseImageFormatProperties")
                          (name nil "formatProperties"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "imageMipTailFirstLod"))
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "imageMipTailSize"))
                  (comment nil " Specified in bytes, must be a multiple of sparse block size in bytes / alignment ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "imageMipTailOffset"))
                  (comment nil " Specified in bytes, must be a multiple of sparse block size in bytes / alignment ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "imageMipTailStride"))
                  (comment nil " Specified in bytes, must be a multiple of sparse block size in bytes / alignment "))
                 (type
                  ((category . "struct")
                   (name . "VkMemoryType")
                   (returnedonly . "true"))
                  (member
                   ((optional . "true"))
                   (type nil "VkMemoryPropertyFlags")
                   (name nil "propertyFlags"))
                  (comment nil " Memory properties of this memory type ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "heapIndex"))
                  (comment nil " Index of the memory heap allocations of this memory type are taken from "))
                 (type
                  ((category . "struct")
                   (name . "VkMemoryHeap")
                   (returnedonly . "true"))
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "size"))
                  (comment nil " Available memory in the heap")
                  (member
                   ((optional . "true"))
                   (type nil "VkMemoryHeapFlags")
                   (name nil "flags"))
                  (comment nil " Flags for the heap"))
                 (type
                  ((category . "struct")
                   (name . "VkMappedMemoryRange"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member nil
                          (type nil "VkDeviceMemory")
                          (name nil "memory"))
                  (comment nil " Mapped memory object ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "offset"))
                  (comment nil " Offset within the memory object where the range starts ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "size"))
                  (comment nil " Size of the range within the memory object ")
                  (validity nil
                            (usage nil "pname:memory must: currently be mapped")
                            (usage nil "If pname:size is not equal to ename:VK_WHOLE_SIZE, pname:offset and pname:size must: specify a range contained within the currently mapped range of pname:memory")
                            (usage nil "If pname:size is equal to ename:VK_WHOLE_SIZE, pname:offset must: be within the currently mapped range of pname:memory")
                            (usage nil "pname:offset must: be a multiple of sname:VkPhysicalDeviceLimits::pname:nonCoherentAtomSize")
                            (usage nil "If pname:size is not equal to ename:VK_WHOLE_SIZE, pname:size must: be a multiple of sname:VkPhysicalDeviceLimits::pname:nonCoherentAtomSize")))
                 (type
                  ((category . "struct")
                   (name . "VkFormatProperties")
                   (returnedonly . "true"))
                  (member
                   ((optional . "true"))
                   (type nil "VkFormatFeatureFlags")
                   (name nil "linearTilingFeatures"))
                  (comment nil " Format features in case of linear tiling ")
                  (member
                   ((optional . "true"))
                   (type nil "VkFormatFeatureFlags")
                   (name nil "optimalTilingFeatures"))
                  (comment nil " Format features in case of optimal tiling ")
                  (member
                   ((optional . "true"))
                   (type nil "VkFormatFeatureFlags")
                   (name nil "bufferFeatures"))
                  (comment nil " Format features supported by buffers "))
                 (type
                  ((category . "struct")
                   (name . "VkImageFormatProperties")
                   (returnedonly . "true"))
                  (member nil
                          (type nil "VkExtent3D")
                          (name nil "maxExtent"))
                  (comment nil " max image dimensions for this resource type ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxMipLevels"))
                  (comment nil " max number of mipmap levels for this resource type ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxArrayLayers"))
                  (comment nil " max array size for this resource type ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSampleCountFlags")
                   (name nil "sampleCounts"))
                  (comment nil " supported sample counts for this resource type ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "maxResourceSize"))
                  (comment nil " max size (in bytes) of this resource type "))
                 (type
                  ((category . "struct")
                   (name . "VkDescriptorBufferInfo"))
                  (member nil
                          (type nil "VkBuffer")
                          (name nil "buffer"))
                  (comment nil " Buffer used for this descriptor slot when the descriptor is UNIFORM_BUFFER[_DYNAMIC] or STORAGE_BUFFER[_DYNAMIC]. VK_NULL_HANDLE otherwise. ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "offset"))
                  (comment nil " Base offset from buffer start in bytes to update in the descriptor set. ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "range"))
                  (comment nil " Size in bytes of the buffer resource for this descriptor update. ")
                  (validity nil
                            (usage nil "pname:offset must: be less than the size of pname:buffer")
                            (usage nil "If pname:range is not equal to ename:VK_WHOLE_SIZE, pname:range must: be greater than `0`")
                            (usage nil "If pname:range is not equal to ename:VK_WHOLE_SIZE, pname:range must: be less than or equal to the size of pname:buffer minus pname:offset")))
                 (type
                  ((category . "struct")
                   (name . "VkDescriptorImageInfo"))
                  (member
                   ((noautovalidity . "true"))
                   (type nil "VkSampler")
                   (name nil "sampler"))
                  (comment nil " Sampler to write to the descriptor in case it's a SAMPLER or COMBINED_IMAGE_SAMPLER descriptor. Ignored otherwise. ")
                  (member
                   ((noautovalidity . "true"))
                   (type nil "VkImageView")
                   (name nil "imageView"))
                  (comment nil " Image view to write to the descriptor in case it's a SAMPLED_IMAGE, STORAGE_IMAGE, COMBINED_IMAGE_SAMPLER, or INPUT_ATTACHMENT descriptor. Ignored otherwise. ")
                  (member
                   ((noautovalidity . "true"))
                   (type nil "VkImageLayout")
                   (name nil "imageLayout"))
                  (comment nil " Layout the image is expected to be in when accessed using this descriptor (only used if imageView is not VK_NULL_HANDLE). "))
                 (type
                  ((category . "struct")
                   (name . "VkWriteDescriptorSet"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member nil
                          (type nil "VkDescriptorSet")
                          (name nil "dstSet"))
                  (comment nil " Destination descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "dstBinding"))
                  (comment nil " Binding within the destination descriptor set to write ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "dstArrayElement"))
                  (comment nil " Array element within the destination binding to write ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "descriptorCount"))
                  (comment nil " Number of descriptors to write (determines the size of the array pointed by pDescriptors) ")
                  (member nil
                          (type nil "VkDescriptorType")
                          (name nil "descriptorType"))
                  (comment nil " Descriptor type to write (determines which members of the array pointed by pDescriptors are going to be used) ")
                  (member
                   ((noautovalidity . "true")
                    (len . "descriptorCount"))
                   "const "
                   (type nil "VkDescriptorImageInfo")
                   "* "
                   (name nil "pImageInfo"))
                  (comment nil " Sampler, image view, and layout for SAMPLER, COMBINED_IMAGE_SAMPLER, {SAMPLED,STORAGE}_IMAGE, and INPUT_ATTACHMENT descriptor types. ")
                  (member
                   ((noautovalidity . "true")
                    (len . "descriptorCount"))
                   "const "
                   (type nil "VkDescriptorBufferInfo")
                   "* "
                   (name nil "pBufferInfo"))
                  (comment nil " Raw buffer, size, and offset for {UNIFORM,STORAGE}_BUFFER[_DYNAMIC] descriptor types. ")
                  (member
                   ((noautovalidity . "true")
                    (len . "descriptorCount"))
                   "const "
                   (type nil "VkBufferView")
                   "*    "
                   (name nil "pTexelBufferView"))
                  (comment nil " Buffer view to write to the descriptor for {UNIFORM,STORAGE}_TEXEL_BUFFER descriptor types. ")
                  (validity nil
                            (usage nil "pname:dstBinding must: be a valid binding point within pname:dstSet")
                            (usage nil "pname:descriptorType must: match the type of pname:dstBinding within pname:dstSet")
                            (usage nil "The sum of pname:dstArrayElement and pname:descriptorCount must: be less than or equal to the number of array elements in the descriptor set binding specified by pname:dstBinding, and all applicable consecutive bindings, as described by <<descriptorsets-updates-consecutive>>")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_SAMPLER, ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, ename:VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, ename:VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or ename:VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, pname:pImageInfo must: be a pointer to an array of pname:descriptorCount valid sname:VkDescriptorImageInfo structures")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER or ename:VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, pname:pTexelBufferView must: be a pointer to an array of pname:descriptorCount valid sname:VkBufferView handles")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC or ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, pname:pBufferInfo must: be a pointer to an array of pname:descriptorCount valid sname:VkDescriptorBufferInfo structures")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_SAMPLER or ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and pname:dstSet was not created with a layout that included immutable samplers for pname:dstBinding with pname:descriptorType, the pname:sampler member of any given element of pname:pImageInfo must: be a valid sname:VkSampler object")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, ename:VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, ename:VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or ename:VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the pname:imageView and pname:imageLayout members of any given element of pname:pImageInfo must: be a valid sname:VkImageView and elink:VkImageLayout, respectively")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the pname:offset member of any given element of pname:pBufferInfo must: be a multiple of sname:VkPhysicalDeviceLimits::pname:minUniformBufferOffsetAlignment")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the pname:offset member of any given element of pname:pBufferInfo must: be a multiple of sname:VkPhysicalDeviceLimits::pname:minStorageBufferOffsetAlignment")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the pname:buffer member of any given element of pname:pBufferInfo must: have been created with ename:VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT set")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the pname:buffer member of any given element of pname:pBufferInfo must: have been created with ename:VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the pname:range member of any given element of pname:pBufferInfo must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxUniformBufferRange")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the pname:range member of any given element of pname:pBufferInfo must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxStorageBufferRange")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, the sname:VkBuffer that any given element of pname:pTexelBufferView was created from must: have been created with ename:VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT set")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, the sname:VkBuffer that any given element of pname:pTexelBufferView was created from must: have been created with ename:VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT set")
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or ename:VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the pname:imageView member of any given element of pname:pImageInfo must: have been created with the identity swizzle")))
                 (type
                  ((category . "struct")
                   (name . "VkCopyDescriptorSet"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member nil
                          (type nil "VkDescriptorSet")
                          (name nil "srcSet"))
                  (comment nil " Source descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "srcBinding"))
                  (comment nil " Binding within the source descriptor set to copy from ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "srcArrayElement"))
                  (comment nil " Array element within the source binding to copy from ")
                  (member nil
                          (type nil "VkDescriptorSet")
                          (name nil "dstSet"))
                  (comment nil " Destination descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "dstBinding"))
                  (comment nil " Binding within the destination descriptor set to copy to ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "dstArrayElement"))
                  (comment nil " Array element within the destination binding to copy to ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "descriptorCount"))
                  (comment nil " Number of descriptors to write (determines the size of the array pointed by pDescriptors) ")
                  (validity nil
                            (usage nil "pname:srcBinding must: be a valid binding within pname:srcSet")
                            (usage nil "The sum of pname:srcArrayElement and pname:descriptorCount must: be less than or equal to the number of array elements in the descriptor set binding specified by pname:srcBinding, and all applicable consecutive bindings, as described by <<descriptorsets-updates-consecutive>>")
                            (usage nil "pname:dstBinding must: be a valid binding within pname:dstSet")
                            (usage nil "The sum of pname:dstArrayElement and pname:descriptorCount must: be less than or equal to the number of array elements in the descriptor set binding specified by pname:dstBinding, and all applicable consecutive bindings, as described by <<descriptorsets-updates-consecutive>>")
                            (usage nil "If pname:srcSet is equal to pname:dstSet, then the source and destination ranges of descriptors mustnot: overlap, where the ranges may: include array elements from consecutive bindings as described by <<descriptorsets-updates-consecutive>>")))
                 (type
                  ((category . "struct")
                   (name . "VkBufferCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure. ")
                  (member
                   ((optional . "true"))
                   (type nil "VkBufferCreateFlags")
                   (name nil "flags"))
                  (comment nil " Buffer creation flags ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "size"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "VkBufferUsageFlags")
                          (name nil "usage"))
                  (comment nil " Buffer usage flags ")
                  (member nil
                          (type nil "VkSharingMode")
                          (name nil "sharingMode"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "queueFamilyIndexCount"))
                  (member
                   ((noautovalidity . "true")
                    (len . "queueFamilyIndexCount"))
                   "const "
                   (type nil "uint32_t")
                   "*        "
                   (name nil "pQueueFamilyIndices"))
                  (validity nil
                            (usage nil "pname:size must: be greater than `0`")
                            (usage nil "If pname:sharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:pQueueFamilyIndices must: be a pointer to an array of pname:queueFamilyIndexCount basetype:uint32_t values")
                            (usage nil "If pname:sharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:queueFamilyIndexCount must: be greater than `1`")
                            (usage nil "If the <<features-features-sparseBinding,sparse bindings>> feature is not enabled, pname:flags mustnot: contain ename:VK_BUFFER_CREATE_SPARSE_BINDING_BIT")
                            (usage nil "If the <<features-features-sparseResidencyBuffer,sparse buffer residency>> feature is not enabled, pname:flags mustnot: contain ename:VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT")
                            (usage nil "If the <<features-features-sparseResidencyAliased,sparse aliased residency>> feature is not enabled, pname:flags mustnot: contain ename:VK_BUFFER_CREATE_SPARSE_ALIASED_BIT")
                            (usage nil "If pname:flags contains ename:VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT or ename:VK_BUFFER_CREATE_SPARSE_ALIASED_BIT, it must: also contain ename:VK_BUFFER_CREATE_SPARSE_BINDING_BIT")))
                 (type
                  ((category . "struct")
                   (name . "VkBufferViewCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure. ")
                  (member
                   ((optional . "true"))
                   (type nil "VkBufferViewCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkBuffer")
                          (name nil "buffer"))
                  (member nil
                          (type nil "VkFormat")
                          (name nil "format"))
                  (comment nil " Optionally specifies format of elements ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "offset"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "range"))
                  (comment nil " View size specified in bytes ")
                  (validity nil
                            (usage nil "pname:offset must: be less than the size of pname:buffer")
                            (usage nil "pname:offset must: be a multiple of sname:VkPhysicalDeviceLimits::pname:minTexelBufferOffsetAlignment")
                            (usage nil "If pname:range is not equal to ename:VK_WHOLE_SIZE:")
                            (usage nil "  pname:range must: be greater than `0`")
                            (usage nil "  pname:range must: be a multiple of the element size of pname:format")
                            (usage nil "  pname:range divided by the size of an element of pname:format, must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxTexelBufferElements")
                            (usage nil "  the sum of pname:offset and pname:range must: be less than or equal to the size of pname:buffer")
                            (usage nil "pname:buffer must: have been created with a pname:usage value containing at least one of ename:VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT or ename:VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT")
                            (usage nil "If pname:buffer was created with pname:usage containing ename:VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT, pname:format must: be supported for uniform texel buffers, as specified by the ename:VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT flag in sname:VkFormatProperties::pname:bufferFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                            (usage nil "If pname:buffer was created with pname:usage containing ename:VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, pname:format must: be supported for storage texel buffers, as specified by the ename:VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT flag in sname:VkFormatProperties::pname:bufferFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")))
                 (type
                  ((category . "struct")
                   (name . "VkImageSubresource"))
                  (member nil
                          (type nil "VkImageAspectFlags")
                          (name nil "aspectMask"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "mipLevel"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "arrayLayer"))
                  (validity nil
                            (usage nil "pname:mipLevel must: be less than the pname:mipLevels specified in slink:VkImageCreateInfo when the image was created")
                            (usage nil "pname:arrayLayer must: be less than the pname:arrayLayers specified in slink:VkImageCreateInfo when the image was created")))
                 (type
                  ((category . "struct")
                   (name . "VkImageSubresourceLayers"))
                  (member nil
                          (type nil "VkImageAspectFlags")
                          (name nil "aspectMask"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "mipLevel"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "baseArrayLayer"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "layerCount"))
                  (validity nil
                            (usage nil "If pname:aspectMask contains ename:VK_IMAGE_ASPECT_COLOR_BIT, it mustnot: contain either of ename:VK_IMAGE_ASPECT_DEPTH_BIT or ename:VK_IMAGE_ASPECT_STENCIL_BIT")
                            (usage nil "pname:aspectMask mustnot: contain ename:VK_IMAGE_ASPECT_METADATA_BIT")
                            (usage nil "pname:mipLevel must: be less than the pname:mipLevels specified in slink:VkImageCreateInfo when the image was created")
                            (usage nil "latexmath:[$(baseArrayLayer + layerCount)$] must: be less than or equal to the pname:arrayLayers specified in slink:VkImageCreateInfo when the image was created")))
                 (type
                  ((category . "struct")
                   (name . "VkImageSubresourceRange"))
                  (member nil
                          (type nil "VkImageAspectFlags")
                          (name nil "aspectMask"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "baseMipLevel"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "levelCount"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "baseArrayLayer"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "layerCount"))
                  (validity nil
                            (usage nil "If pname:levelCount is not ename:VK_REMAINING_MIP_LEVELS, latexmath:[$(baseMipLevel + levelCount)$] must: be less than or equal to the pname:mipLevels specified in slink:VkImageCreateInfo when the image was created")
                            (usage nil "If pname:layerCount is not ename:VK_REMAINING_ARRAY_LAYERS, latexmath:[$(baseArrayLayer + layerCount)$] must: be less than or equal to the pname:arrayLayers specified in slink:VkImageCreateInfo when the image was created")))
                 (type
                  ((category . "struct")
                   (name . "VkMemoryBarrier"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_MEMORY_BARRIER ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure. ")
                  (member
                   ((optional . "true"))
                   (type nil "VkAccessFlags")
                   (name nil "srcAccessMask"))
                  (comment nil " Memory accesses from the source of the dependency to synchronize ")
                  (member
                   ((optional . "true"))
                   (type nil "VkAccessFlags")
                   (name nil "dstAccessMask"))
                  (comment nil " Memory accesses from the destination of the dependency to synchronize "))
                 (type
                  ((category . "struct")
                   (name . "VkBufferMemoryBarrier"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure. ")
                  (member
                   ((optional . "true"))
                   (type nil "VkAccessFlags")
                   (name nil "srcAccessMask"))
                  (comment nil " Memory accesses from the source of the dependency to synchronize ")
                  (member
                   ((optional . "true"))
                   (type nil "VkAccessFlags")
                   (name nil "dstAccessMask"))
                  (comment nil " Memory accesses from the destination of the dependency to synchronize ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "srcQueueFamilyIndex"))
                  (comment nil " Queue family to transition ownership from ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "dstQueueFamilyIndex"))
                  (comment nil " Queue family to transition ownership to ")
                  (member nil
                          (type nil "VkBuffer")
                          (name nil "buffer"))
                  (comment nil " Buffer to sync ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "offset"))
                  (comment nil " Offset within the buffer to sync ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "size"))
                  (comment nil " Amount of bytes to sync ")
                  (validity nil
                            (usage nil "pname:offset must: be less than the size of pname:buffer")
                            (usage nil "If pname:size is not equal to ename:VK_WHOLE_SIZE, pname:size must: be greater than `0`")
                            (usage nil "If pname:size is not equal to ename:VK_WHOLE_SIZE, pname:size must: be less than or equal to than the size of pname:buffer minus pname:offset")
                            (usage nil "If pname:buffer was created with a sharing mode of ename:VK_SHARING_MODE_CONCURRENT, pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex must: both be ename:VK_QUEUE_FAMILY_IGNORED")
                            (usage nil "If pname:buffer was created with a sharing mode of ename:VK_SHARING_MODE_EXCLUSIVE, pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex must: either both be ename:VK_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see <<devsandqueues-queueprops>>)")
                            (usage nil "If pname:buffer was created with a sharing mode of ename:VK_SHARING_MODE_EXCLUSIVE, and pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex are valid queue families, at least one of them must: be the same as the family of the queue that will execute this barrier")))
                 (type
                  ((category . "struct")
                   (name . "VkImageMemoryBarrier"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure. ")
                  (member
                   ((optional . "true"))
                   (type nil "VkAccessFlags")
                   (name nil "srcAccessMask"))
                  (comment nil " Memory accesses from the source of the dependency to synchronize ")
                  (member
                   ((optional . "true"))
                   (type nil "VkAccessFlags")
                   (name nil "dstAccessMask"))
                  (comment nil " Memory accesses from the destination of the dependency to synchronize ")
                  (member nil
                          (type nil "VkImageLayout")
                          (name nil "oldLayout"))
                  (comment nil " Current layout of the image ")
                  (member nil
                          (type nil "VkImageLayout")
                          (name nil "newLayout"))
                  (comment nil " New layout to transition the image to ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "srcQueueFamilyIndex"))
                  (comment nil " Queue family to transition ownership from ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "dstQueueFamilyIndex"))
                  (comment nil " Queue family to transition ownership to ")
                  (member nil
                          (type nil "VkImage")
                          (name nil "image"))
                  (comment nil " Image to sync ")
                  (member nil
                          (type nil "VkImageSubresourceRange")
                          (name nil "subresourceRange"))
                  (comment nil " Subresource range to sync ")
                  (validity nil
                            (usage nil "pname:oldLayout must: be ename:VK_IMAGE_LAYOUT_UNDEFINED, ename:VK_IMAGE_LAYOUT_PREINITIALIZED or the current layout of the image region affected by the barrier")
                            (usage nil "pname:newLayout mustnot: be ename:VK_IMAGE_LAYOUT_UNDEFINED or ename:VK_IMAGE_LAYOUT_PREINITIALIZED")
                            (usage nil "If pname:image was created with a sharing mode of ename:VK_SHARING_MODE_CONCURRENT, pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex must: both be ename:VK_QUEUE_FAMILY_IGNORED")
                            (usage nil "If pname:image was created with a sharing mode of ename:VK_SHARING_MODE_EXCLUSIVE, pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex must: either both be ename:VK_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see <<devsandqueues-queueprops>>)")
                            (usage nil "If pname:image was created with a sharing mode of ename:VK_SHARING_MODE_EXCLUSIVE, and pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex are valid queue families, at least one of them must: be the same as the family of the queue that will execute this barrier")
                            (usage nil "pname:subresourceRange must: be a valid image subresource range for the image (see <<resources-image-views>>)")
                            (usage nil "If pname:image has a depth/stencil format with both depth and stencil components, then pname:aspectMask member of pname:subresourceRange must: include both ename:VK_IMAGE_ASPECT_DEPTH_BIT and ename:VK_IMAGE_ASPECT_STENCIL_BIT")
                            (usage nil "If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set")
                            (usage nil "If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set")
                            (usage nil "If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set")
                            (usage nil "If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_SAMPLED_BIT or ename:VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set")
                            (usage nil "If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_SRC_BIT set")
                            (usage nil "If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT set")))
                 (type
                  ((category . "struct")
                   (name . "VkImageCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure. ")
                  (member
                   ((optional . "true"))
                   (type nil "VkImageCreateFlags")
                   (name nil "flags"))
                  (comment nil " Image creation flags ")
                  (member nil
                          (type nil "VkImageType")
                          (name nil "imageType"))
                  (member nil
                          (type nil "VkFormat")
                          (name nil "format"))
                  (member nil
                          (type nil "VkExtent3D")
                          (name nil "extent"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "mipLevels"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "arrayLayers"))
                  (member nil
                          (type nil "VkSampleCountFlagBits")
                          (name nil "samples"))
                  (member nil
                          (type nil "VkImageTiling")
                          (name nil "tiling"))
                  (member nil
                          (type nil "VkImageUsageFlags")
                          (name nil "usage"))
                  (comment nil " Image usage flags ")
                  (member nil
                          (type nil "VkSharingMode")
                          (name nil "sharingMode"))
                  (comment nil " Cross-queue-family sharing mode ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "queueFamilyIndexCount"))
                  (comment nil " Number of queue families to share across ")
                  (member
                   ((noautovalidity . "true")
                    (len . "queueFamilyIndexCount"))
                   "const "
                   (type nil "uint32_t")
                   "*        "
                   (name nil "pQueueFamilyIndices"))
                  (comment nil " Array of queue family indices to share across ")
                  (member nil
                          (type nil "VkImageLayout")
                          (name nil "initialLayout"))
                  (comment nil " Initial image layout for all subresources ")
                  (validity nil
                            (usage nil "If pname:sharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:pQueueFamilyIndices must: be a pointer to an array of pname:queueFamilyIndexCount basetype:uint32_t values")
                            (usage nil "If pname:sharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:queueFamilyIndexCount must: be greater than `1`")
                            (usage nil "pname:format mustnot: be ename:VK_FORMAT_UNDEFINED")
                            (usage nil "The pname:width, pname:height, and pname:depth members of pname:extent must: all be greater than `0`")
                            (usage nil "pname:mipLevels must: be greater than `0`")
                            (usage nil "pname:arrayLayers must: be greater than `0`")
                            (usage nil "If pname:imageType is ename:VK_IMAGE_TYPE_1D, pname:extent.width must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxImageDimension1D, or sname:VkImageFormatProperties::pname:maxExtent.width (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure) - whichever is higher")
                            (usage nil "If pname:imageType is ename:VK_IMAGE_TYPE_2D and pname:flags does not contain ename:VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, pname:extent.width and pname:extent.height must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxImageDimension2D, or sname:VkImageFormatProperties::pname:maxExtent.width/height (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure) - whichever is higher")
                            (usage nil "If pname:imageType is ename:VK_IMAGE_TYPE_2D and pname:flags contains ename:VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, pname:extent.width and pname:extent.height must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxImageDimensionCube, or sname:VkImageFormatProperties::pname:maxExtent.width/height (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure) - whichever is higher")
                            (usage nil "If pname:imageType is ename:VK_IMAGE_TYPE_2D and pname:flags contains ename:VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, pname:extent.width and pname:extent.height must: be equal")
                            (usage nil "If pname:imageType is ename:VK_IMAGE_TYPE_3D, pname:extent.width, pname:extent.height and pname:extent.depth must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxImageDimension3D, or sname:VkImageFormatProperties::pname:maxExtent.width/height/depth (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure) - whichever is higher")
                            (usage nil "If pname:imageType is ename:VK_IMAGE_TYPE_1D, both pname:extent.height and pname:extent.depth must: be `1`")
                            (usage nil "If pname:imageType is ename:VK_IMAGE_TYPE_2D, pname:extent.depth must: be `1`")
                            (usage nil "pname:mipLevels must: be less than or equal to latexmath:[$\\lfloor\\log_2(\\max(\\mathit{extent.width}, \\mathit{extent.height}, \\mathit{extent.depth}))\\rfloor + 1$]")
                            (usage nil "If any of pname:extent.width, pname:extent.height or pname:extent.depth are greater than the equivalently named members of sname:VkPhysicalDeviceLimits::pname:maxImageDimension3D, pname:mipLevels must: be less than or equal to sname:VkImageFormatProperties::pname:maxMipLevels (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure)")
                            (usage nil "pname:arrayLayers must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxImageArrayLayers, or sname:VkImageFormatProperties::pname:maxArrayLayers (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure) - whichever is higher")
                            (usage nil "pname:samples must: be a bit value that is set in sname:VkPhysicalDeviceLimits::pname:sampleCounts returned by flink:vkGetPhysicalDeviceProperties, or sname:VkImageFormatProperties::pname:sampleCounts returned by fname:vkGetPhysicalDeviceImageFormatProperties with pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure")
                            (usage nil "If pname:usage includes ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, ename:VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT or ename:VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, pname:extent.width must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxFramebufferWidth")
                            (usage nil "If pname:usage includes ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, ename:VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT or ename:VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, pname:extent.height must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxFramebufferHeight")
                            (usage nil "If pname:usage includes ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, pname:samples must: be a bit value that is set in sname:VkPhysicalDeviceLimits::pname:framebufferColorSampleCounts")
                            (usage nil "If pname:usage includes ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, and pname:format includes a depth aspect, pname:samples must: be a bit value that is set in sname:VkPhysicalDeviceLimits::pname:framebufferDepthSampleCounts")
                            (usage nil "If pname:usage includes ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, and pname:format includes a stencil aspect, pname:samples must: be a bit value that is set in sname:VkPhysicalDeviceLimits::pname:framebufferStencilSampleCounts")
                            (usage nil "If pname:usage includes ename:VK_IMAGE_USAGE_SAMPLED_BIT, and pname:format includes a color aspect, pname:samples must: be a bit value that is set in sname:VkPhysicalDeviceLimits::pname:sampledImageColorSampleCounts")
                            (usage nil "If pname:usage includes ename:VK_IMAGE_USAGE_SAMPLED_BIT, and pname:format includes a depth aspect, pname:samples must: be a bit value that is set in sname:VkPhysicalDeviceLimits::pname:sampledImageDepthSampleCounts")
                            (usage nil "If pname:usage includes ename:VK_IMAGE_USAGE_SAMPLED_BIT, and pname:format is an integer format, pname:samples must: be a bit value that is set in sname:VkPhysicalDeviceLimits::pname:sampledImageIntegerSampleCounts")
                            (usage nil "If pname:usage includes ename:VK_IMAGE_USAGE_STORAGE_BIT, pname:samples must: be a bit value that is set in sname:VkPhysicalDeviceLimits::pname:storageImageSampleCounts")
                            (usage nil "If the <<features-features-textureCompressionETC2,ETC2 texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, ename:VK_FORMAT_EAC_R11_UNORM_BLOCK, ename:VK_FORMAT_EAC_R11_SNORM_BLOCK, ename:VK_FORMAT_EAC_R11G11_UNORM_BLOCK, or ename:VK_FORMAT_EAC_R11G11_SNORM_BLOCK")
                            (usage nil "If the <<features-features-textureCompressionASTC_LDR,ASTC LDR texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_ASTC_4x4_UNORM_BLOCK, ename:VK_FORMAT_ASTC_4x4_SRGB_BLOCK, ename:VK_FORMAT_ASTC_5x4_UNORM_BLOCK, ename:VK_FORMAT_ASTC_5x4_SRGB_BLOCK, ename:VK_FORMAT_ASTC_5x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_5x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_6x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_6x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_6x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_6x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x8_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x8_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x8_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x8_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x10_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x10_SRGB_BLOCK, ename:VK_FORMAT_ASTC_12x10_UNORM_BLOCK, ename:VK_FORMAT_ASTC_12x10_SRGB_BLOCK, ename:VK_FORMAT_ASTC_12x12_UNORM_BLOCK, or ename:VK_FORMAT_ASTC_12x12_SRGB_BLOCK")
                            (usage nil "If the <<features-features-textureCompressionBC,BC texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_BC1_RGB_UNORM_BLOCK, ename:VK_FORMAT_BC1_RGB_SRGB_BLOCK, ename:VK_FORMAT_BC1_RGBA_UNORM_BLOCK, ename:VK_FORMAT_BC1_RGBA_SRGB_BLOCK, ename:VK_FORMAT_BC2_UNORM_BLOCK, ename:VK_FORMAT_BC2_SRGB_BLOCK, ename:VK_FORMAT_BC3_UNORM_BLOCK, ename:VK_FORMAT_BC3_SRGB_BLOCK, ename:VK_FORMAT_BC4_UNORM_BLOCK, ename:VK_FORMAT_BC4_SNORM_BLOCK, ename:VK_FORMAT_BC5_UNORM_BLOCK, ename:VK_FORMAT_BC5_SNORM_BLOCK, ename:VK_FORMAT_BC6H_UFLOAT_BLOCK, ename:VK_FORMAT_BC6H_SFLOAT_BLOCK, ename:VK_FORMAT_BC7_UNORM_BLOCK, or ename:VK_FORMAT_BC7_SRGB_BLOCK")
                            (usage nil "If the <<features-features-shaderStorageImageMultisample,multisampled storage images>> feature is not enabled, and pname:usage contains ename:VK_IMAGE_USAGE_STORAGE_BIT, pname:samples must: be ename:VK_SAMPLE_COUNT_1_BIT")
                            (usage nil "If the <<features-features-sparseBinding,sparse bindings>> feature is not enabled, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_BINDING_BIT")
                            (usage nil "If the <<features-features-sparseResidencyImage2D,sparse residency for 2D images>> feature is not enabled, and pname:imageType is ename:VK_IMAGE_TYPE_2D, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT")
                            (usage nil "If the <<features-features-sparseResidencyImage3D,sparse residency for 3D images>> feature is not enabled, and pname:imageType is ename:VK_IMAGE_TYPE_3D, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT")
                            (usage nil "If the <<features-features-sparseResidency2Samples,sparse residency for images with 2 samples>> feature is not enabled, pname:imageType is ename:VK_IMAGE_TYPE_2D, and pname:samples is ename:VK_SAMPLE_COUNT_2_BIT, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT")
                            (usage nil "If the <<features-features-sparseResidency4Samples,sparse residency for images with 4 samples>> feature is not enabled, pname:imageType is ename:VK_IMAGE_TYPE_2D, and pname:samples is ename:VK_SAMPLE_COUNT_4_BIT, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT")
                            (usage nil "If the <<features-features-sparseResidency8Samples,sparse residency for images with 8 samples>> feature is not enabled, pname:imageType is ename:VK_IMAGE_TYPE_2D, and pname:samples is ename:VK_SAMPLE_COUNT_8_BIT, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT")
                            (usage nil "If the <<features-features-sparseResidency16Samples,sparse residency for images with 16 samples>> feature is not enabled, pname:imageType is ename:VK_IMAGE_TYPE_2D, and pname:samples is ename:VK_SAMPLE_COUNT_16_BIT, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT")
                            (usage nil "If pname:tiling is ename:VK_IMAGE_TILING_LINEAR, and sname:VkFormatProperties::pname:linearTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_SAMPLED_BIT")
                            (usage nil "If pname:tiling is ename:VK_IMAGE_TILING_LINEAR, and sname:VkFormatProperties::pname:linearTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_STORAGE_BIT")
                            (usage nil "If pname:tiling is ename:VK_IMAGE_TILING_LINEAR, and sname:VkFormatProperties::pname:linearTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT")
                            (usage nil "If pname:tiling is ename:VK_IMAGE_TILING_LINEAR, and sname:VkFormatProperties::pname:linearTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT")
                            (usage nil "If pname:tiling is ename:VK_IMAGE_TILING_OPTIMAL, and sname:VkFormatProperties::pname:optimalTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_SAMPLED_BIT")
                            (usage nil "If pname:tiling is ename:VK_IMAGE_TILING_OPTIMAL, and sname:VkFormatProperties::pname:optimalTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_STORAGE_BIT")
                            (usage nil "If pname:tiling is ename:VK_IMAGE_TILING_OPTIMAL, and sname:VkFormatProperties::pname:optimalTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT")
                            (usage nil "If pname:tiling is ename:VK_IMAGE_TILING_OPTIMAL, and sname:VkFormatProperties::pname:optimalTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT")
                            (usage nil "If pname:flags contains ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT or ename:VK_IMAGE_CREATE_SPARSE_ALIASED_BIT, it must: also contain ename:VK_IMAGE_CREATE_SPARSE_BINDING_BIT")))
                 (type
                  ((category . "struct")
                   (name . "VkSubresourceLayout")
                   (returnedonly . "true"))
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "offset"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "size"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "rowPitch"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "arrayPitch"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "depthPitch"))
                  (comment nil " Specified in bytes "))
                 (type
                  ((category . "struct")
                   (name . "VkImageViewCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkImageViewCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkImage")
                          (name nil "image"))
                  (member nil
                          (type nil "VkImageViewType")
                          (name nil "viewType"))
                  (member nil
                          (type nil "VkFormat")
                          (name nil "format"))
                  (member nil
                          (type nil "VkComponentMapping")
                          (name nil "components"))
                  (member nil
                          (type nil "VkImageSubresourceRange")
                          (name nil "subresourceRange"))
                  (validity nil
                            (usage nil "If pname:image was not created with ename:VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT then pname:viewType mustnot: be ename:VK_IMAGE_VIEW_TYPE_CUBE or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY")
                            (usage nil "If the <<features-features-imageCubeArray,image cubemap arrays>> feature is not enabled, pname:viewType mustnot: be ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY")
                            (usage nil "If the <<features-features-textureCompressionETC2,ETC2 texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, ename:VK_FORMAT_EAC_R11_UNORM_BLOCK, ename:VK_FORMAT_EAC_R11_SNORM_BLOCK, ename:VK_FORMAT_EAC_R11G11_UNORM_BLOCK, or ename:VK_FORMAT_EAC_R11G11_SNORM_BLOCK")
                            (usage nil "If the <<features-features-textureCompressionASTC_LDR,ASTC LDR texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_ASTC_4x4_UNORM_BLOCK, ename:VK_FORMAT_ASTC_4x4_SRGB_BLOCK, ename:VK_FORMAT_ASTC_5x4_UNORM_BLOCK, ename:VK_FORMAT_ASTC_5x4_SRGB_BLOCK, ename:VK_FORMAT_ASTC_5x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_5x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_6x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_6x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_6x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_6x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x8_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x8_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x8_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x8_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x10_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x10_SRGB_BLOCK, ename:VK_FORMAT_ASTC_12x10_UNORM_BLOCK, ename:VK_FORMAT_ASTC_12x10_SRGB_BLOCK, ename:VK_FORMAT_ASTC_12x12_UNORM_BLOCK, or ename:VK_FORMAT_ASTC_12x12_SRGB_BLOCK")
                            (usage nil "If the <<features-features-textureCompressionBC,BC texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_BC1_RGB_UNORM_BLOCK, ename:VK_FORMAT_BC1_RGB_SRGB_BLOCK, ename:VK_FORMAT_BC1_RGBA_UNORM_BLOCK, ename:VK_FORMAT_BC1_RGBA_SRGB_BLOCK, ename:VK_FORMAT_BC2_UNORM_BLOCK, ename:VK_FORMAT_BC2_SRGB_BLOCK, ename:VK_FORMAT_BC3_UNORM_BLOCK, ename:VK_FORMAT_BC3_SRGB_BLOCK, ename:VK_FORMAT_BC4_UNORM_BLOCK, ename:VK_FORMAT_BC4_SNORM_BLOCK, ename:VK_FORMAT_BC5_UNORM_BLOCK, ename:VK_FORMAT_BC5_SNORM_BLOCK, ename:VK_FORMAT_BC6H_UFLOAT_BLOCK, ename:VK_FORMAT_BC6H_SFLOAT_BLOCK, ename:VK_FORMAT_BC7_UNORM_BLOCK, or ename:VK_FORMAT_BC7_SRGB_BLOCK")
                            (usage nil "If pname:image was created with ename:VK_IMAGE_TILING_LINEAR and pname:usage containing ename:VK_IMAGE_USAGE_SAMPLED_BIT, pname:format must: be supported for sampled images, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                            (usage nil "If pname:image was created with ename:VK_IMAGE_TILING_LINEAR and pname:usage containing ename:VK_IMAGE_USAGE_STORAGE_BIT, pname:format must: be supported for storage images, as specified by the ename:VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                            (usage nil "If pname:image was created with ename:VK_IMAGE_TILING_LINEAR and pname:usage containing ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, pname:format must: be supported for color attachments, as specified by the ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                            (usage nil "If pname:image was created with ename:VK_IMAGE_TILING_LINEAR and pname:usage containing ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, pname:format must: be supported for depth/stencil attachments, as specified by the ename:VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                            (usage nil "If pname:image was created with ename:VK_IMAGE_TILING_OPTIMAL and pname:usage containing ename:VK_IMAGE_USAGE_SAMPLED_BIT, pname:format must: be supported for sampled images, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                            (usage nil "If pname:image was created with ename:VK_IMAGE_TILING_OPTIMAL and pname:usage containing ename:VK_IMAGE_USAGE_STORAGE_BIT, pname:format must: be supported for storage images, as specified by the ename:VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                            (usage nil "If pname:image was created with ename:VK_IMAGE_TILING_OPTIMAL and pname:usage containing ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, pname:format must: be supported for color attachments, as specified by the ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                            (usage nil "If pname:image was created with ename:VK_IMAGE_TILING_OPTIMAL and pname:usage containing ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, pname:format must: be supported for depth/stencil attachments, as specified by the ename:VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                            (usage nil "pname:subresourceRange must: be a valid image subresource range for pname:image (see <<resources-image-views>>)")
                            (usage nil "If pname:image was created with the ename:VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, pname:format must: be compatible with the pname:format used to create pname:image, as defined in <<features-formats-compatibility-classes,Format Compatibility Classes>>")
                            (usage nil "If pname:image was not created with the ename:VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, pname:format must: be identical to the pname:format used to create pname:image")
                            (usage nil "pname:subResourceRange and pname:viewType must: be compatible with the image, as described in the <<resources-image-views-compatibility,table below>>")))
                 (type
                  ((category . "struct")
                   (name . "VkBufferCopy"))
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "srcOffset"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "dstOffset"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "size"))
                  (comment nil " Specified in bytes "))
                 (type
                  ((category . "struct")
                   (name . "VkSparseMemoryBind"))
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "resourceOffset"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "size"))
                  (comment nil " Specified in bytes ")
                  (member
                   ((optional . "true"))
                   (type nil "VkDeviceMemory")
                   (name nil "memory"))
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "memoryOffset"))
                  (comment nil " Specified in bytes ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSparseMemoryBindFlags")
                   (name nil "flags"))
                  (comment nil " Reserved for future ")
                  (validity nil
                            (usage nil "If pname:memory is not sname:VK_NULL_HANDLE, pname:memory and pname:memoryOffset must: match the memory requirements of the resource, as described in section <<resources-association>>")
                            (usage nil "If pname:memory is not sname:VK_NULL_HANDLE, pname:memory mustnot: have been created with a memory type that reports ename:VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT bit set")
                            (usage nil "pname:size must: be greater than `0`")
                            (usage nil "pname:resourceOffset must: be less than the size of the resource")
                            (usage nil "pname:size must: be less than or equal to the size of the resource minus pname:resourceOffset")
                            (usage nil "pname:memoryOffset must: be less than the size of pname:memory")
                            (usage nil "pname:size must: be less than or equal to the size of pname:memory minus pname:memoryOffset")))
                 (type
                  ((category . "struct")
                   (name . "VkSparseImageMemoryBind"))
                  (member nil
                          (type nil "VkImageSubresource")
                          (name nil "subresource"))
                  (member nil
                          (type nil "VkOffset3D")
                          (name nil "offset"))
                  (member nil
                          (type nil "VkExtent3D")
                          (name nil "extent"))
                  (member
                   ((optional . "true"))
                   (type nil "VkDeviceMemory")
                   (name nil "memory"))
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "memoryOffset"))
                  (comment nil " Specified in bytes ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSparseMemoryBindFlags")
                   (name nil "flags"))
                  (comment nil " Reserved for future ")
                  (validity nil
                            (usage nil "If the <<features-features-sparseResidencyAliased,sparse aliased residency>> feature is not enabled, and if any other resources are bound to ranges of pname:memory, the range of pname:memory being bound mustnot: overlap with those bound ranges")
                            (usage nil "pname:memory and pname:memoryOffset must: match the memory requirements of the calling command's pname:image, as described in section <<resources-association>>")
                            (usage nil "pname:subresource must: be a valid image subresource for pname:image (see <<resources-image-views>>)")
                            (usage nil "pname:offset.x must: be a multiple of the sparse image block width (sname:VkSparseImageFormatProperties::pname:imageGranularity.width) of the image")
                            (usage nil "pname:extent.width must: either be a multiple of the sparse image block width of the image, or else pname:extent.width + pname:offset.x must: equal the width of the image subresource")
                            (usage nil "pname:offset.y must: be a multiple of the sparse image block height (sname:VkSparseImageFormatProperties::pname:imageGranularity.height) of the image")
                            (usage nil "pname:extent.height must: either be a multiple of the sparse image block height of the image, or else pname:extent.height + pname:offset.y must: equal the height of the image subresource")
                            (usage nil "pname:offset.z must: be a multiple of the sparse image block depth (sname:VkSparseImageFormatProperties::pname:imageGranularity.depth) of the image")
                            (usage nil "pname:extent.depth must: either be a multiple of the sparse image block depth of the image, or else pname:extent.depth + pname:offset.z must: equal the depth of the image subresource")))
                 (type
                  ((category . "struct")
                   (name . "VkSparseBufferMemoryBindInfo"))
                  (member nil
                          (type nil "VkBuffer")
                          (name nil "buffer"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "bindCount"))
                  (member
                   ((len . "bindCount"))
                   "const "
                   (type nil "VkSparseMemoryBind")
                   "* "
                   (name nil "pBinds")))
                 (type
                  ((category . "struct")
                   (name . "VkSparseImageOpaqueMemoryBindInfo"))
                  (member nil
                          (type nil "VkImage")
                          (name nil "image"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "bindCount"))
                  (member
                   ((len . "bindCount"))
                   "const "
                   (type nil "VkSparseMemoryBind")
                   "* "
                   (name nil "pBinds"))
                  (validity nil
                            (usage nil "For any given element of pname:pBinds, if the pname:flags member of that element contains ename:VK_SPARSE_MEMORY_BIND_METADATA_BIT, the binding range defined must: be within the mip tail region of the metadata aspect of pname:image")))
                 (type
                  ((category . "struct")
                   (name . "VkSparseImageMemoryBindInfo"))
                  (member nil
                          (type nil "VkImage")
                          (name nil "image"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "bindCount"))
                  (member
                   ((len . "bindCount"))
                   "const "
                   (type nil "VkSparseImageMemoryBind")
                   "* "
                   (name nil "pBinds")))
                 (type
                  ((category . "struct")
                   (name . "VkBindSparseInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_BIND_SPARSE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure. ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "waitSemaphoreCount"))
                  (member
                   ((len . "waitSemaphoreCount"))
                   "const "
                   (type nil "VkSemaphore")
                   "*     "
                   (name nil "pWaitSemaphores"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "bufferBindCount"))
                  (member
                   ((len . "bufferBindCount"))
                   "const "
                   (type nil "VkSparseBufferMemoryBindInfo")
                   "* "
                   (name nil "pBufferBinds"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "imageOpaqueBindCount"))
                  (member
                   ((len . "imageOpaqueBindCount"))
                   "const "
                   (type nil "VkSparseImageOpaqueMemoryBindInfo")
                   "* "
                   (name nil "pImageOpaqueBinds"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "imageBindCount"))
                  (member
                   ((len . "imageBindCount"))
                   "const "
                   (type nil "VkSparseImageMemoryBindInfo")
                   "* "
                   (name nil "pImageBinds"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "signalSemaphoreCount"))
                  (member
                   ((len . "signalSemaphoreCount"))
                   "const "
                   (type nil "VkSemaphore")
                   "*     "
                   (name nil "pSignalSemaphores")))
                 (type
                  ((category . "struct")
                   (name . "VkImageCopy"))
                  (member nil
                          (type nil "VkImageSubresourceLayers")
                          (name nil "srcSubresource"))
                  (member nil
                          (type nil "VkOffset3D")
                          (name nil "srcOffset"))
                  (comment nil " Specified in pixels for both compressed and uncompressed images ")
                  (member nil
                          (type nil "VkImageSubresourceLayers")
                          (name nil "dstSubresource"))
                  (member nil
                          (type nil "VkOffset3D")
                          (name nil "dstOffset"))
                  (comment nil " Specified in pixels for both compressed and uncompressed images ")
                  (member nil
                          (type nil "VkExtent3D")
                          (name nil "extent"))
                  (comment nil " Specified in pixels for both compressed and uncompressed images ")
                  (validity nil
                            (usage nil "The pname:aspectMask member of pname:srcSubresource and pname:dstSubresource must: match")
                            (usage nil "The pname:layerCount member of pname:srcSubresource and pname:dstSubresource must: match")
                            (usage nil "If either of the calling command's pname:srcImage or pname:dstImage parameters are of elink:VkImageType ename:VK_IMAGE_TYPE_3D, the pname:baseArrayLayer and pname:layerCount members of both pname:srcSubresource and pname:dstSubresource must: be `0` and `1`, respectively")
                            (usage nil "The pname:aspectMask member of pname:srcSubresource must: specify aspects present in the calling command's pname:srcImage")
                            (usage nil "The pname:aspectMask member of pname:dstSubresource must: specify aspects present in the calling command's pname:dstImage")
                            (usage nil "pname:srcOffset.x and (pname:extent.width + pname:srcOffset.x) must: both be greater than or equal to `0` and less than or equal to the source image subresource width")
                            (usage nil "pname:srcOffset.y and (pname:extent.height + pname:srcOffset.y) must: both be greater than or equal to `0` and less than or equal to the source image subresource height")
                            (usage nil "pname:srcOffset.z and (pname:extent.depth + pname:srcOffset.z) must: both be greater than or equal to `0` and less than or equal to the source image subresource depth")
                            (usage nil "pname:dstOffset.x and (pname:extent.width + pname:dstOffset.x) must: both be greater than or equal to `0` and less than or equal to the destination image subresource width")
                            (usage nil "pname:dstOffset.y and (pname:extent.height + pname:dstOffset.y) must: both be greater than or equal to `0` and less than or equal to the destination image subresource height")
                            (usage nil "pname:dstOffset.z and (pname:extent.depth + pname:dstOffset.z) must: both be greater than or equal to `0` and less than or equal to the destination image subresource depth")
                            (usage nil "If the calling command's pname:srcImage is a compressed format image:")
                            (usage nil "  all members of pname:srcOffset must: be a multiple of the corresponding dimensions of the compressed texel block")
                            (usage nil "  pname:extent.width must: be a multiple of the compressed texel block width or (pname:extent.width + pname:srcOffset.x) must: equal the source image subresource width")
                            (usage nil "  pname:extent.height must: be a multiple of the compressed texel block height or (pname:extent.height + pname:srcOffset.y) must: equal the source image subresource height")
                            (usage nil "  pname:extent.depth must: be a multiple of the compressed texel block depth or (pname:extent.depth + pname:srcOffset.z) must: equal the source image subresource depth")
                            (usage nil "If the calling command's pname:dstImage is a compressed format image:")
                            (usage nil "  all members of pname:dstOffset must: be a multiple of the corresponding dimensions of the compressed texel block")
                            (usage nil "  pname:extent.width must: be a multiple of the compressed texel block width or (pname:extent.width + pname:dstOffset.x) must: equal the destination image subresource width")
                            (usage nil "  pname:extent.height must: be a multiple of the compressed texel block height or (pname:extent.height + pname:dstOffset.y) must: equal the destination image subresource height")
                            (usage nil "  pname:extent.depth must: be a multiple of the compressed texel block depth or (pname:extent.depth + pname:dstOffset.z) must: equal the destination image subresource depth")
                            (usage nil "pname:srcOffset, pname:dstOffset, and pname:extent must: respect the image transfer granularity requirements of the queue family that it will be submitted against, as described in <<devsandqueues-physical-device-enumeration,Physical Device Enumeration>>")))
                 (type
                  ((category . "struct")
                   (name . "VkImageBlit"))
                  (member nil
                          (type nil "VkImageSubresourceLayers")
                          (name nil "srcSubresource"))
                  (member nil
                          (type nil "VkOffset3D")
                          (name nil "srcOffsets[2]"))
                  (comment nil " Specified in pixels for both compressed and uncompressed images ")
                  (member nil
                          (type nil "VkImageSubresourceLayers")
                          (name nil "dstSubresource"))
                  (member nil
                          (type nil "VkOffset3D")
                          (name nil "dstOffsets[2]"))
                  (comment nil " Specified in pixels for both compressed and uncompressed images ")
                  (validity nil
                            (usage nil "The pname:aspectMask member of pname:srcSubresource and pname:dstSubresource must: match")
                            (usage nil "The pname:layerCount member of pname:srcSubresource and pname:dstSubresource must: match")
                            (usage nil "If either of the calling command's pname:srcImage or pname:dstImage parameters are of elink:VkImageType ename:VK_IMAGE_TYPE_3D, the pname:baseArrayLayer and pname:layerCount members of both pname:srcSubresource and pname:dstSubresource must: be `0` and `1`, respectively")
                            (usage nil "The pname:aspectMask member of pname:srcSubresource must: specify aspects present in the calling command's pname:srcImage")
                            (usage nil "The pname:aspectMask member of pname:dstSubresource must: specify aspects present in the calling command's pname:dstImage")
                            (usage nil "pname:srcOffset[0].x and pname:srcOffset[1].x must: both be greater than or equal to `0` and less than or equal to the source image subresource width")
                            (usage nil "pname:srcOffset[0].y and pname:srcOffset[1].y must: both be greater than or equal to `0` and less than or equal to the source image subresource height")
                            (usage nil "pname:srcOffset[0].z and pname:srcOffset[1].z must: both be greater than or equal to `0` and less than or equal to the source image subresource depth")
                            (usage nil "pname:dstOffset[0].x and pname:dstOffset[1].x must: both be greater than or equal to `0` and less than or equal to the destination image subresource width")
                            (usage nil "pname:dstOffset[0].y and pname:dstOffset[1].y must: both be greater than or equal to `0` and less than or equal to the destination image subresource height")
                            (usage nil "pname:dstOffset[0].z and pname:dstOffset[1].z must: both be greater than or equal to `0` and less than or equal to the destination image subresource depth")))
                 (type
                  ((category . "struct")
                   (name . "VkBufferImageCopy"))
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "bufferOffset"))
                  (comment nil " Specified in bytes ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "bufferRowLength"))
                  (comment nil " Specified in texels ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "bufferImageHeight"))
                  (member nil
                          (type nil "VkImageSubresourceLayers")
                          (name nil "imageSubresource"))
                  (member nil
                          (type nil "VkOffset3D")
                          (name nil "imageOffset"))
                  (comment nil " Specified in pixels for both compressed and uncompressed images ")
                  (member nil
                          (type nil "VkExtent3D")
                          (name nil "imageExtent"))
                  (comment nil " Specified in pixels for both compressed and uncompressed images ")
                  (validity nil
                            (usage nil "pname:bufferOffset must: be a multiple of the calling command's sname:VkImage parameter's texel size")
                            (usage nil "pname:bufferOffset must: be a multiple of `4`")
                            (usage nil "pname:bufferRowLength must: be `0`, or greater than or equal to the pname:width member of pname:imageExtent")
                            (usage nil "pname:bufferImageHeight must: be `0`, or greater than or equal to the pname:height member of pname:imageExtent")
                            (usage nil "pname:imageOffset.x and (pname:imageExtent.width + pname:imageOffset.x) must: both be greater than or equal to `0` and less than or equal to the image subresource width")
                            (usage nil "pname:imageOffset.y and (imageExtent.height + pname:imageOffset.y) must: both be greater than or equal to `0` and less than or equal to the image subresource height")
                            (usage nil "pname:imageOffset.z and (imageExtent.depth + pname:imageOffset.z) must: both be greater than or equal to `0` and less than or equal to the image subresource depth")
                            (usage nil "If the calling command's sname:VkImage parameter is a compressed format image:")
                            (usage nil "  pname:bufferRowLength must: be a multiple of the compressed texel block width")
                            (usage nil "  pname:bufferImageHeight must: be a multiple of the compressed texel block height")
                            (usage nil "  all members of pname:imageOffset must: be a multiple of the corresponding dimensions of the compressed texel block")
                            (usage nil "  pname:bufferOffset must: be a multiple of the compressed texel block size in bytes")
                            (usage nil "  pname:imageExtent.width must: be a multiple of the compressed texel block width or (pname:imageExtent.width + pname:imageOffset.x) must: equal the image subresource width")
                            (usage nil "  pname:imageExtent.height must: be a multiple of the compressed texel block height or (pname:imageExtent.height + pname:imageOffset.y) must: equal the image subresource height")
                            (usage nil "  pname:imageExtent.depth must: be a multiple of the compressed texel block depth or (pname:imageExtent.depth + pname:imageOffset.z) must: equal the image subresource depth")
                            (usage nil "pname:bufferOffset, pname:bufferRowLength, pname:bufferImageHeight and all members of pname:imageOffset and pname:imageExtent must: respect the image transfer granularity requirements of the queue family that it will be submitted against, as described in <<devsandqueues-physical-device-enumeration,Physical Device Enumeration>>")
                            (usage nil "The pname:aspectMask member of pname:imageSubresource must: specify aspects present in the calling command's sname:VkImage parameter")
                            (usage nil "The pname:aspectMask member of pname:imageSubresource must: only have a single bit set")
                            (usage nil "If the calling command's sname:VkImage parameter is of elink:VkImageType ename:VK_IMAGE_TYPE_3D, the pname:baseArrayLayer and pname:layerCount members of pname:imageSubresource must: be `0` and `1`, respectively")))
                 (type
                  ((category . "struct")
                   (name . "VkImageResolve"))
                  (member nil
                          (type nil "VkImageSubresourceLayers")
                          (name nil "srcSubresource"))
                  (member nil
                          (type nil "VkOffset3D")
                          (name nil "srcOffset"))
                  (member nil
                          (type nil "VkImageSubresourceLayers")
                          (name nil "dstSubresource"))
                  (member nil
                          (type nil "VkOffset3D")
                          (name nil "dstOffset"))
                  (member nil
                          (type nil "VkExtent3D")
                          (name nil "extent"))
                  (validity nil
                            (usage nil "The pname:aspectMask member of pname:srcSubresource and pname:dstSubresource must: only contain ename:VK_IMAGE_ASPECT_COLOR_BIT")
                            (usage nil "The pname:layerCount member of pname:srcSubresource and pname:dstSubresource must: match")
                            (usage nil "If either of the calling command's pname:srcImage or pname:dstImage parameters are of elink:VkImageType ename:VK_IMAGE_TYPE_3D, the pname:baseArrayLayer and pname:layerCount members of both pname:srcSubresource and pname:dstSubresource must: be `0` and `1`, respectively")))
                 (type
                  ((category . "struct")
                   (name . "VkShaderModuleCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkShaderModuleCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "size_t")
                          (name nil "codeSize"))
                  (comment nil " Specified in bytes ")
                  (member
                   ((len . "latexmath:[$codeSize \\over 4$]"))
                   "const "
                   (type nil "uint32_t")
                   "*            "
                   (name nil "pCode"))
                  (comment nil " Binary code of size codeSize ")
                  (validity nil
                            (usage nil "pname:codeSize must: be greater than 0")
                            (usage nil "pname:codeSize must: be a multiple of 4")
                            (usage nil "pname:pCode must: point to valid SPIR-V code, formatted and packed as described by https://www.khronos.org/registry/spir-v/specs/1.0/SPIRV.html[the SPIR-V Specification v1.0]")
                            (usage nil "pname:pCode must: adhere to the validation rules described by the <<spirvenv-module-validation, Validation Rules within a Module>> section of the <<spirvenv-capabilities,SPIR-V Environment>> appendix")
                            (usage nil "pname:pCode must: declare the code:Shader capability")
                            (usage nil "pname:pCode mustnot: declare any capability that is not supported by the API, as described by the <<spirvenv-module-validation, Capabilities>> section of the <<spirvenv-capabilities,SPIR-V Environment>> appendix")
                            (usage nil "If pname:pCode declares any of the capabilities that are listed as not required by the implementation, the relevant feature must: be enabled, as listed in the <<spirvenv-capabilities-table,SPIR-V Environment>> appendix")))
                 (type
                  ((category . "struct")
                   (name . "VkDescriptorSetLayoutBinding"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "binding"))
                  (comment nil " Binding number for this entry ")
                  (member nil
                          (type nil "VkDescriptorType")
                          (name nil "descriptorType"))
                  (comment nil " Type of the descriptors in this binding ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "descriptorCount"))
                  (comment nil " Number of descriptors in this binding ")
                  (member
                   ((noautovalidity . "true"))
                   (type nil "VkShaderStageFlags")
                   (name nil "stageFlags"))
                  (comment nil " Shader stages this binding is visible to ")
                  (member
                   ((noautovalidity . "true")
                    (optional . "true")
                    (len . "descriptorCount"))
                   "const "
                   (type nil "VkSampler")
                   "*       "
                   (name nil "pImmutableSamplers"))
                  (comment nil " Immutable samplers (used if descriptor type is SAMPLER or COMBINED_IMAGE_SAMPLER, is either NULL or contains count number of elements) ")
                  (validity nil
                            (usage nil "If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_SAMPLER or ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and pname:descriptorCount is not `0` and pname:pImmutableSamplers is not `NULL`, pname:pImmutableSamplers must: be a pointer to an array of pname:descriptorCount valid sname:VkSampler handles")
                            (usage nil "If pname:descriptorCount is not `0`, pname:stageFlags must: be a valid combination of elink:VkShaderStageFlagBits values")))
                 (type
                  ((category . "struct")
                   (name . "VkDescriptorSetLayoutCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkDescriptorSetLayoutCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "bindingCount"))
                  (comment nil " Number of bindings in the descriptor set layout ")
                  (member
                   ((len . "bindingCount"))
                   "const "
                   (type nil "VkDescriptorSetLayoutBinding")
                   "* "
                   (name nil "pBindings"))
                  (comment nil " Array of descriptor set layout bindings "))
                 (type
                  ((category . "struct")
                   (name . "VkDescriptorPoolSize"))
                  (member nil
                          (type nil "VkDescriptorType")
                          (name nil "type"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "descriptorCount"))
                  (validity nil
                            (usage nil "pname:descriptorCount must: be greater than `0`")))
                 (type
                  ((category . "struct")
                   (name . "VkDescriptorPoolCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkDescriptorPoolCreateFlags")
                   (name nil "flags"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxSets"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "poolSizeCount"))
                  (member
                   ((len . "poolSizeCount"))
                   "const "
                   (type nil "VkDescriptorPoolSize")
                   "* "
                   (name nil "pPoolSizes"))
                  (validity nil
                            (usage nil "pname:maxSets must: be greater than `0`")))
                 (type
                  ((category . "struct")
                   (name . "VkDescriptorSetAllocateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member nil
                          (type nil "VkDescriptorPool")
                          (name nil "descriptorPool"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "descriptorSetCount"))
                  (member
                   ((len . "descriptorSetCount"))
                   "const "
                   (type nil "VkDescriptorSetLayout")
                   "* "
                   (name nil "pSetLayouts"))
                  (validity nil
                            (usage nil "pname:descriptorSetCount mustnot: be greater than the number of sets that are currently available for allocation in pname:descriptorPool")
                            (usage nil "pname:descriptorPool must: have enough free descriptor capacity remaining to allocate the descriptor sets of the specified layouts")))
                 (type
                  ((category . "struct")
                   (name . "VkSpecializationMapEntry"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "constantID"))
                  (comment nil " The SpecConstant ID specified in the BIL ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "offset"))
                  (comment nil " Offset of the value in the data block ")
                  (member nil
                          (type nil "size_t")
                          (name nil "size"))
                  (comment nil " Size in bytes of the SpecConstant "))
                 (type
                  ((category . "struct")
                   (name . "VkSpecializationInfo"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "mapEntryCount"))
                  (comment nil " Number of entries in the map ")
                  (member
                   ((len . "mapEntryCount"))
                   "const "
                   (type nil "VkSpecializationMapEntry")
                   "* "
                   (name nil "pMapEntries"))
                  (comment nil " Array of map entries ")
                  (member
                   ((optional . "true"))
                   (type nil "size_t")
                   (name nil "dataSize"))
                  (comment nil " Size in bytes of pData ")
                  (member
                   ((len . "dataSize"))
                   "const "
                   (type nil "void")
                   "*            "
                   (name nil "pData"))
                  (comment nil " Pointer to SpecConstant data ")
                  (validity nil
                            (usage nil "The pname:offset member of any given element of pname:pMapEntries must: be less than pname:dataSize")
                            (usage nil "For any given element of pname:pMapEntries, pname:size must: be less than or equal to pname:dataSize minus pname:offset")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineShaderStageCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineShaderStageCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkShaderStageFlagBits")
                          (name nil "stage"))
                  (comment nil " Shader stage ")
                  (member nil
                          (type nil "VkShaderModule")
                          (name nil "module"))
                  (comment nil " Module containing entry point ")
                  (member
                   ((len . "null-terminated"))
                   "const "
                   (type nil "char")
                   "*            "
                   (name nil "pName"))
                  (comment nil " Null-terminated entry point name ")
                  (member
                   ((optional . "true"))
                   "const "
                   (type nil "VkSpecializationInfo")
                   "* "
                   (name nil "pSpecializationInfo"))
                  (validity nil
                            (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:stage mustnot: be ename:VK_SHADER_STAGE_GEOMETRY_BIT")
                            (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:stage mustnot: be ename:VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or ename:VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT")
                            (usage nil "pname:stage mustnot: be ename:VK_SHADER_STAGE_ALL_GRAPHICS, or ename:VK_SHADER_STAGE_ALL")
                            (usage nil "pname:pName must: be the name of an code:OpEntryPoint in pname:module with an execution model that matches pname:stage")
                            (usage nil "If the identified entry point includes any variable in its interface that is declared with the code:ClipDistance code:BuiltIn decoration, that variable mustnot: have an array size greater than sname:VkPhysicalDeviceLimits::pname:maxClipDistances")
                            (usage nil "If the identified entry point includes any variable in its interface that is declared with the code:CullDistance code:BuiltIn decoration, that variable mustnot: have an array size greater than sname:VkPhysicalDeviceLimits::pname:maxCullDistances")
                            (usage nil "If the identified entry point includes any variables in its interface that are declared with the code:ClipDistance or code:CullDistance code:BuiltIn decoration, those variables mustnot: have array sizes which sum to more than sname:VkPhysicalDeviceLimits::pname:maxCombinedClipAndCullDistances")
                            (usage nil "If the identified entry point includes any variable in its interface that is declared with the code:SampleMask code:BuiltIn decoration, that variable mustnot: have an array size greater than sname:VkPhysicalDeviceLimits::pname:maxSampleMaskWords")
                            (usage nil "If pname:stage is ename:VK_SHADER_STAGE_VERTEX_BIT, the identified entry point mustnot: include any input variable in its interface that is decorated with code:CullDistance")
                            (usage nil "If pname:stage is ename:VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or ename:VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, and the identified entry point has an code:OpExecutionMode instruction that specifies a patch size with code:OutputVertices, the patch size must: be greater than `0` and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxTessellationPatchSize")
                            (usage nil "If pname:stage is ename:VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must: have an code:OpExecutionMode instruction that specifies a maximum output vertex count that is greater than `0` and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxGeometryOutputVertices")
                            (usage nil "If pname:stage is ename:VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must: have an code:OpExecutionMode instruction that specifies an invocation count that is greater than `0` and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxGeometryShaderInvocations")
                            (usage nil "If pname:stage is ename:VK_SHADER_STAGE_GEOMETRY_BIT, and the identified entry point writes to code:Layer for any primitive, it must: write the same value to code:Layer for all vertices of a given primitive")
                            (usage nil "If pname:stage is ename:VK_SHADER_STAGE_GEOMETRY_BIT, and the identified entry point writes to code:ViewportIndex for any primitive, it must: write the same value to code:ViewportIndex for all vertices of a given primitive")
                            (usage nil "If pname:stage is ename:VK_SHADER_STAGE_FRAGMENT_BIT, the identified entry point mustnot: include any output variables in its interface decorated with code:CullDistance")
                            (usage nil "If pname:stage is ename:VK_SHADER_STAGE_FRAGMENT_BIT, and the identified entry point writes to code:FragDepth in any execution path, it must: write to code:FragDepth in all execution paths")))
                 (type
                  ((category . "struct")
                   (name . "VkComputePipelineCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineCreateFlags")
                   (name nil "flags"))
                  (comment nil " Pipeline creation flags ")
                  (member nil
                          (type nil "VkPipelineShaderStageCreateInfo")
                          (name nil "stage"))
                  (member nil
                          (type nil "VkPipelineLayout")
                          (name nil "layout"))
                  (comment nil " Interface layout of the pipeline ")
                  (member
                   ((noautovalidity . "true")
                    (optional . "true"))
                   (type nil "VkPipeline")
                   (name nil "basePipelineHandle"))
                  (comment nil " If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of ")
                  (member nil
                          (type nil "int32_t")
                          (name nil "basePipelineIndex"))
                  (comment nil " If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of ")
                  (validity nil
                            (usage nil "If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineIndex is not `-1`, pname:basePipelineHandle must: be sname:VK_NULL_HANDLE")
                            (usage nil "If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineIndex is not `-1`, it must: be a valid index into the calling command's pname:pCreateInfos parameter")
                            (usage nil "If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, pname:basePipelineIndex must: be `-1`")
                            (usage nil "If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, pname:basePipelineHandle must: be a valid sname:VkPipeline handle")
                            (usage nil "If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, it must: be a valid handle to a compute sname:VkPipeline")
                            (usage nil "The pname:stage member of pname:stage must: be ename:VK_SHADER_STAGE_COMPUTE_BIT")
                            (usage nil "The shader code for the entry point identified by pname:stage and the rest of the state identified by this structure must: adhere to the pipeline linking rules described in the <<interfaces,Shader Interfaces>> chapter")
                            (usage nil "pname:layout must: be <<descriptorsets-pipelinelayout-consistency,consistent>> with all shaders specified in pname:pStages")))
                 (type
                  ((category . "struct")
                   (name . "VkVertexInputBindingDescription"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "binding"))
                  (comment nil " Vertex buffer binding id ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "stride"))
                  (comment nil " Distance between vertices in bytes (0 = no advancement) ")
                  (member nil
                          (type nil "VkVertexInputRate")
                          (name nil "inputRate"))
                  (comment nil " The rate at which the vertex data is consumed ")
                  (validity nil
                            (usage nil "pname:binding must: be less than sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindings")
                            (usage nil "pname:stride must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindingStride")))
                 (type
                  ((category . "struct")
                   (name . "VkVertexInputAttributeDescription"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "location"))
                  (comment nil " location of the shader vertex attrib ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "binding"))
                  (comment nil " Vertex buffer binding id ")
                  (member nil
                          (type nil "VkFormat")
                          (name nil "format"))
                  (comment nil " format of source data ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "offset"))
                  (comment nil " Offset of first element in bytes from base of vertex ")
                  (validity nil
                            (usage nil "pname:location must: be less than sname:VkPhysicalDeviceLimits::pname:maxVertexInputAttributes")
                            (usage nil "pname:binding must: be less than sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindings")
                            (usage nil "pname:offset must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputAttributeOffset")
                            (usage nil "pname:format must: be allowed as a vertex buffer format, as specified by the ename:VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT flag in sname:VkFormatProperties::pname:bufferFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineVertexInputStateCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Should be VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineVertexInputStateCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "vertexBindingDescriptionCount"))
                  (comment nil " number of bindings ")
                  (member
                   ((len . "vertexBindingDescriptionCount"))
                   "const "
                   (type nil "VkVertexInputBindingDescription")
                   "* "
                   (name nil "pVertexBindingDescriptions"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "vertexAttributeDescriptionCount"))
                  (comment nil " number of attributes ")
                  (member
                   ((len . "vertexAttributeDescriptionCount"))
                   "const "
                   (type nil "VkVertexInputAttributeDescription")
                   "* "
                   (name nil "pVertexAttributeDescriptions"))
                  (validity nil
                            (usage nil "pname:vertexBindingDescriptionCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindings")
                            (usage nil "pname:vertexAttributeDescriptionCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputAttributes")
                            (usage nil "For every pname:binding specified by any given element of pname:pVertexAttributeDescriptions, a sname:VkVertexInputBindingDescription must: exist in pname:pVertexBindingDescriptions with the same value of pname:binding")
                            (usage nil "All elements of pname:pVertexBindingDescriptions must: describe distinct binding numbers")
                            (usage nil "All elements of pname:pVertexAttributeDescriptions must: describe distinct attribute locations")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineInputAssemblyStateCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_IINPUT_ASSEMBLY_STATE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineInputAssemblyStateCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkPrimitiveTopology")
                          (name nil "topology"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "primitiveRestartEnable"))
                  (validity nil
                            (usage nil "If pname:topology is ename:VK_PRIMITIVE_TOPOLOGY_POINT_LIST, ename:VK_PRIMITIVE_TOPOLOGY_LINE_LIST, ename:VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, ename:VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, ename:VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY or ename:VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, pname:primitiveRestartEnable must: be ename:VK_FALSE")
                            (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:topology mustnot: be any of ename:VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, ename:VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, ename:VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY or ename:VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY")
                            (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:topology mustnot: be ename:VK_PRIMITIVE_TOPOLOGY_PATCH_LIST")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineTessellationStateCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineTessellationStateCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "patchControlPoints"))
                  (validity nil
                            (usage nil "pname:patchControlPoints must: be greater than zero and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxTessellationPatchSize")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineViewportStateCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineViewportStateCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "viewportCount"))
                  (member
                   ((noautovalidity . "true")
                    (optional . "true")
                    (len . "viewportCount"))
                   "const "
                   (type nil "VkViewport")
                   "*      "
                   (name nil "pViewports"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "scissorCount"))
                  (member
                   ((noautovalidity . "true")
                    (optional . "true")
                    (len . "scissorCount"))
                   "const "
                   (type nil "VkRect2D")
                   "*        "
                   (name nil "pScissors"))
                  (validity nil
                            (usage nil "If the <<features-features-multiViewport,multiple viewports>> feature is not enabled, pname:viewportCount must: be `1`")
                            (usage nil "If the <<features-features-multiViewport,multiple viewports>> feature is not enabled, pname:scissorCount must: be `1`")
                            (usage nil "pname:viewportCount must: be between `1` and sname:VkPhysicalDeviceLimits::pname:maxViewports, inclusive")
                            (usage nil "pname:scissorCount must: be between `1` and sname:VkPhysicalDeviceLimits::pname:maxViewports, inclusive")
                            (usage nil "pname:scissorCount and pname:viewportCount must: be identical")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineRasterizationStateCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineRasterizationStateCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "depthClampEnable"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "rasterizerDiscardEnable"))
                  (member nil
                          (type nil "VkPolygonMode")
                          (name nil "polygonMode"))
                  (comment nil " optional (GL45) ")
                  (member
                   ((optional . "true"))
                   (type nil "VkCullModeFlags")
                   (name nil "cullMode"))
                  (member nil
                          (type nil "VkFrontFace")
                          (name nil "frontFace"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "depthBiasEnable"))
                  (member nil
                          (type nil "float")
                          (name nil "depthBiasConstantFactor"))
                  (member nil
                          (type nil "float")
                          (name nil "depthBiasClamp"))
                  (member nil
                          (type nil "float")
                          (name nil "depthBiasSlopeFactor"))
                  (member nil
                          (type nil "float")
                          (name nil "lineWidth"))
                  (validity nil
                            (usage nil "If the <<features-features-depthClamp,depth clamping>> feature is not enabled, pname:depthClampEnable must: be ename:VK_FALSE")
                            (usage nil "If the <<features-features-fillModeNonSolid,non-solid fill modes>> feature is not enabled, pname:polygonMode must: be ename:VK_POLYGON_MODE_FILL")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineMultisampleStateCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineMultisampleStateCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkSampleCountFlagBits")
                          (name nil "rasterizationSamples"))
                  (comment nil " Number of samples used for rasterization ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sampleShadingEnable"))
                  (comment nil " optional (GL45) ")
                  (member nil
                          (type nil "float")
                          (name nil "minSampleShading"))
                  (comment nil " optional (GL45) ")
                  (member
                   ((optional . "true")
                    (len . "latexmath:[$\\lceil{\\mathit{rasterizationSamples} \\over 32}\\rceil$]"))
                   "const "
                   (type nil "VkSampleMask")
                   "*    "
                   (name nil "pSampleMask"))
                  (comment nil " Array of sampleMask words ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "alphaToCoverageEnable"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "alphaToOneEnable"))
                  (validity nil
                            (usage nil "If the <<features-features-sampleRateShading,sample rate shading>> feature is not enabled, pname:sampleShadingEnable must: be ename:VK_FALSE")
                            (usage nil "If the <<features-features-alphaToOne,alpha to one>> feature is not enabled, pname:alphaToOneEnable must: be ename:VK_FALSE")
                            (usage nil "pname:minSampleShading must: be in the range latexmath:[$[0,1\\]$]")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineColorBlendAttachmentState"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "blendEnable"))
                  (member nil
                          (type nil "VkBlendFactor")
                          (name nil "srcColorBlendFactor"))
                  (member nil
                          (type nil "VkBlendFactor")
                          (name nil "dstColorBlendFactor"))
                  (member nil
                          (type nil "VkBlendOp")
                          (name nil "colorBlendOp"))
                  (member nil
                          (type nil "VkBlendFactor")
                          (name nil "srcAlphaBlendFactor"))
                  (member nil
                          (type nil "VkBlendFactor")
                          (name nil "dstAlphaBlendFactor"))
                  (member nil
                          (type nil "VkBlendOp")
                          (name nil "alphaBlendOp"))
                  (member
                   ((optional . "true"))
                   (type nil "VkColorComponentFlags")
                   (name nil "colorWriteMask"))
                  (validity nil
                            (usage nil "If the <<features-features-dualSrcBlend,dual source blending>> feature is not enabled, pname:srcColorBlendFactor mustnot: be ename:VK_BLEND_FACTOR_SRC1_COLOR, ename:VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, ename:VK_BLEND_FACTOR_SRC1_ALPHA, or ename:VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA")
                            (usage nil "If the <<features-features-dualSrcBlend,dual source blending>> feature is not enabled, pname:dstColorBlendFactor mustnot: be ename:VK_BLEND_FACTOR_SRC1_COLOR, ename:VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, ename:VK_BLEND_FACTOR_SRC1_ALPHA, or ename:VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA")
                            (usage nil "If the <<features-features-dualSrcBlend,dual source blending>> feature is not enabled, pname:srcAlphaBlendFactor mustnot: be ename:VK_BLEND_FACTOR_SRC1_COLOR, ename:VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, ename:VK_BLEND_FACTOR_SRC1_ALPHA, or ename:VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA")
                            (usage nil "If the <<features-features-dualSrcBlend,dual source blending>> feature is not enabled, pname:dstAlphaBlendFactor mustnot: be ename:VK_BLEND_FACTOR_SRC1_COLOR, ename:VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, ename:VK_BLEND_FACTOR_SRC1_ALPHA, or ename:VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineColorBlendStateCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineColorBlendStateCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "logicOpEnable"))
                  (member
                   ((noautovalidity . "true"))
                   (type nil "VkLogicOp")
                   (name nil "logicOp"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "attachmentCount"))
                  (comment nil " # of pAttachments ")
                  (member
                   ((len . "attachmentCount"))
                   "const "
                   (type nil "VkPipelineColorBlendAttachmentState")
                   "* "
                   (name nil "pAttachments"))
                  (member nil
                          (type nil "float")
                          (name nil "blendConstants")
                          "[4]")
                  (validity nil
                            (usage nil "If the <<features-features-independentBlend,independent blending>> feature is not enabled, all elements of pname:pAttachments must: be identical")
                            (usage nil "If the <<features-features-logicOp,logic operations>> feature is not enabled, pname:logicOpEnable must: be ename:VK_FALSE")
                            (usage nil "If pname:logicOpEnable is ename:VK_TRUE, pname:logicOp must: be a valid elink:VkLogicOp value")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineDynamicStateCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineDynamicStateCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "dynamicStateCount"))
                  (member
                   ((len . "dynamicStateCount"))
                   "const "
                   (type nil "VkDynamicState")
                   "*  "
                   (name nil "pDynamicStates")))
                 (type
                  ((category . "struct")
                   (name . "VkStencilOpState"))
                  (member nil
                          (type nil "VkStencilOp")
                          (name nil "failOp"))
                  (member nil
                          (type nil "VkStencilOp")
                          (name nil "passOp"))
                  (member nil
                          (type nil "VkStencilOp")
                          (name nil "depthFailOp"))
                  (member nil
                          (type nil "VkCompareOp")
                          (name nil "compareOp"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "compareMask"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "writeMask"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "reference")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineDepthStencilStateCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineDepthStencilStateCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "depthTestEnable"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "depthWriteEnable"))
                  (member nil
                          (type nil "VkCompareOp")
                          (name nil "depthCompareOp"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "depthBoundsTestEnable"))
                  (comment nil " optional (depth_bounds_test) ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "stencilTestEnable"))
                  (member nil
                          (type nil "VkStencilOpState")
                          (name nil "front"))
                  (member nil
                          (type nil "VkStencilOpState")
                          (name nil "back"))
                  (member nil
                          (type nil "float")
                          (name nil "minDepthBounds"))
                  (member nil
                          (type nil "float")
                          (name nil "maxDepthBounds"))
                  (validity nil
                            (usage nil "If the <<features-features-depthBounds,depth bounds testing>> feature is not enabled, pname:depthBoundsTestEnable must: be ename:VK_FALSE")))
                 (type
                  ((category . "struct")
                   (name . "VkGraphicsPipelineCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineCreateFlags")
                   (name nil "flags"))
                  (comment nil " Pipeline creation flags ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "stageCount"))
                  (member
                   ((len . "stageCount"))
                   "const "
                   (type nil "VkPipelineShaderStageCreateInfo")
                   "* "
                   (name nil "pStages"))
                  (comment nil " One entry for each active shader stage ")
                  (member nil "const "
                          (type nil "VkPipelineVertexInputStateCreateInfo")
                          "* "
                          (name nil "pVertexInputState"))
                  (member nil "const "
                          (type nil "VkPipelineInputAssemblyStateCreateInfo")
                          "* "
                          (name nil "pInputAssemblyState"))
                  (member
                   ((noautovalidity . "true")
                    (optional . "true"))
                   "const "
                   (type nil "VkPipelineTessellationStateCreateInfo")
                   "* "
                   (name nil "pTessellationState"))
                  (member
                   ((noautovalidity . "true")
                    (optional . "true"))
                   "const "
                   (type nil "VkPipelineViewportStateCreateInfo")
                   "* "
                   (name nil "pViewportState"))
                  (member nil "const "
                          (type nil "VkPipelineRasterizationStateCreateInfo")
                          "* "
                          (name nil "pRasterizationState"))
                  (member
                   ((noautovalidity . "true")
                    (optional . "true"))
                   "const "
                   (type nil "VkPipelineMultisampleStateCreateInfo")
                   "* "
                   (name nil "pMultisampleState"))
                  (member
                   ((noautovalidity . "true")
                    (optional . "true"))
                   "const "
                   (type nil "VkPipelineDepthStencilStateCreateInfo")
                   "* "
                   (name nil "pDepthStencilState"))
                  (member
                   ((noautovalidity . "true")
                    (optional . "true"))
                   "const "
                   (type nil "VkPipelineColorBlendStateCreateInfo")
                   "* "
                   (name nil "pColorBlendState"))
                  (member
                   ((optional . "true"))
                   "const "
                   (type nil "VkPipelineDynamicStateCreateInfo")
                   "* "
                   (name nil "pDynamicState"))
                  (member nil
                          (type nil "VkPipelineLayout")
                          (name nil "layout"))
                  (comment nil " Interface layout of the pipeline ")
                  (member nil
                          (type nil "VkRenderPass")
                          (name nil "renderPass"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "subpass"))
                  (member
                   ((noautovalidity . "true")
                    (optional . "true"))
                   (type nil "VkPipeline")
                   (name nil "basePipelineHandle"))
                  (comment nil " If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of ")
                  (member nil
                          (type nil "int32_t")
                          (name nil "basePipelineIndex"))
                  (comment nil " If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of ")
                  (validity nil
                            (usage nil "If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineIndex is not `-1`, pname:basePipelineHandle must: be sname:VK_NULL_HANDLE")
                            (usage nil "If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineIndex is not `-1`, it must: be a valid index into the calling command's pname:pCreateInfos parameter")
                            (usage nil "If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, pname:basePipelineIndex must: be `-1`")
                            (usage nil "If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, pname:basePipelineHandle must: be a valid sname:VkPipeline handle")
                            (usage nil "If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, it must: be a valid handle to a graphics sname:VkPipeline")
                            (usage nil "The pname:stage member of each element of pname:pStages must: be unique")
                            (usage nil "The pname:stage member of one element of pname:pStages must: be ename:VK_SHADER_STAGE_VERTEX_BIT")
                            (usage nil "The pname:stage member of any given element of pname:pStages mustnot: be ename:VK_SHADER_STAGE_COMPUTE_BIT")
                            (usage nil "If pname:pStages includes a tessellation control shader stage, it must: include a tessellation evaluation shader stage")
                            (usage nil "If pname:pStages includes a tessellation evaluation shader stage, it must: include a tessellation control shader stage")
                            (usage nil "If pname:pStages includes a tessellation control shader stage and a tessellation evaluation shader stage, pname:pTessellationState mustnot: be `NULL`")
                            (usage nil "If pname:pStages includes both a tessellation control shader stage and a tessellation evaluation shader stage, the shader code of at least one must: contain an code:OpExecutionMode instruction that specifies the type of subdivision in the pipeline")
                            (usage nil "If pname:pStages includes both a tessellation control shader stage and a tessellation evaluation shader stage, and the shader code of both contain an code:OpExecutionMode instruction that specifies the type of subdivision in the pipeline, they must: both specify the same subdivision mode")
                            (usage nil "If pname:pStages includes both a tessellation control shader stage and a tessellation evaluation shader stage, the shader code of at least one must: contain an code:OpExecutionMode instruction that specifies the output patch size in the pipeline")
                            (usage nil "If pname:pStages includes both a tessellation control shader stage and a tessellation evaluation shader stage, and the shader code of both contain an code:OpExecutionMode instruction that specifies the out patch size in the pipeline, they must: both specify the same patch size")
                            (usage nil "If pname:pStages includes tessellation shader stages, the pname:topology member of pname:pInputAssembly must: be ename:VK_PRIMITIVE_TOPOLOGY_PATCH_LIST")
                            (usage nil "If pname:pStages includes a geometry shader stage, and doesn't include any tessellation shader stages, its shader code must: contain an code:OpExecutionMode instruction that specifies an input primitive type that is <<shaders-geometry-execution, compatible>> with the primitive topology specified in pname:pInputAssembly")
                            (usage nil "If pname:pStages includes a geometry shader stage, and also includes tessellation shader stages, its shader code must: contain an code:OpExecutionMode instruction that specifies an input primitive type that is <<shaders-geometry-execution, compatible>> with the primitive topology that is output by the tessellation stages")
                            (usage nil "If pname:pStages includes a fragment shader stage and a geometry shader stage, and the fragment shader code reads from an input variable that is decorated with code:PrimitiveID, then the geometry shader code must: write to a matching output variable, decorated with code:PrimitiveID, in all execution paths")
                            (usage nil "If pname:pStages includes a fragment shader stage, its shader code mustnot: read from any input attachment that is defined as ename:VK_ATTACHMENT_UNUSED in pname:subpass")
                            (usage nil "The shader code for the entry points identified by pname:pStages, and the rest of the state identified by this structure must: adhere to the pipeline linking rules described in the <<interfaces,Shader Interfaces>> chapter")
                            (usage nil "If pname:subpass uses a depth/stencil attachment in pname:renderpass that has a layout of ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL in the sname:VkAttachmentReference defined by pname:subpass, and pname:pDepthStencilState is not `NULL`, the pname:depthWriteEnable member of pname:pDepthStencilState must: be ename:VK_FALSE")
                            (usage nil "If pname:subpass uses a depth/stencil attachment in pname:renderpass that has a layout of ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL in the sname:VkAttachmentReference defined by pname:subpass, and pname:pDepthStencilState is not `NULL`, the pname:failOp, pname:passOp and pname:depthFailOp members of each of the pname:front and pname:back members of pname:pDepthStencilState must: be ename:VK_STENCIL_OP_KEEP")
                            (usage nil "If pname:pColorBlendState is not `NULL`, the pname:blendEnable member of each element of the pname:pAttachment member of pname:pColorBlendState must: be ename:VK_FALSE if the pname:format of the attachment referred to in pname:subpass of pname:renderPass does not support color blend operations, as specified by the ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures or sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                            (usage nil "If pname:pColorBlendState is not `NULL`, The pname:attachmentCount member of pname:pColorBlendState must: be equal to the pname:colorAttachmentCount used to create pname:subpass")
                            (usage nil "If no element of the pname:pDynamicStates member of pname:pDynamicState is ename:VK_DYNAMIC_STATE_VIEWPORT, the pname:pViewports member of pname:pViewportState must: be a pointer to an array of pname:pViewportState->viewportCount sname:VkViewport structures")
                            (usage nil "If no element of the pname:pDynamicStates member of pname:pDynamicState is ename:VK_DYNAMIC_STATE_SCISSOR, the pname:pScissors member of pname:pViewportState must: be a pointer to an array of pname:pViewportState->scissorCount sname:VkRect2D structures")
                            (usage nil "If the wide lines feature is not enabled, and no element of the pname:pDynamicStates member of pname:pDynamicState is ename:VK_DYNAMIC_STATE_LINE_WIDTH, the pname:lineWidth member of pname:pRasterizationState must: be `1.0`")
                            (usage nil "If the pname:rasterizerDiscardEnable member of pname:pRasterizationState is ename:VK_FALSE, pname:pViewportState must: be a pointer to a valid sname:VkPipelineViewportStateCreateInfo structure")
                            (usage nil "If the pname:rasterizerDiscardEnable member of pname:pRasterizationState is ename:VK_FALSE, pname:pMultisampleState must: be a pointer to a valid sname:VkPipelineMultisampleStateCreateInfo structure")
                            (usage nil "If the pname:rasterizerDiscardEnable member of pname:pRasterizationState is ename:VK_FALSE, and pname:subpass uses a depth/stencil attachment, pname:pDepthStencilState must: be a pointer to a valid sname:VkPipelineDepthStencilStateCreateInfo structure")
                            (usage nil "If the pname:rasterizerDiscardEnable member of pname:pRasterizationState is ename:VK_FALSE, and pname:subpass uses color attachments, pname:pColorBlendState must: be a pointer to a valid sname:VkPipelineColorBlendStateCreateInfo structure")
                            (usage nil "If the depth bias clamping feature is not enabled, no element of the pname:pDynamicStates member of pname:pDynamicState is ename:VK_DYNAMIC_STATE_DEPTH_BIAS, and the pname:depthBiasEnable member of pname:pDepthStencil is ename:VK_TRUE, the pname:depthBiasClamp member of pname:pDepthStencil must: be `0.0`")
                            (usage nil "If no element of the pname:pDynamicStates member of pname:pDynamicState is ename:VK_DYNAMIC_STATE_DEPTH_BOUNDS, and the pname:depthBoundsTestEnable member of pname:pDepthStencil is ename:VK_TRUE, the pname:minDepthBounds and pname:maxDepthBounds members of pname:pDepthStencil must: be between `0.0` and `1.0`, inclusive")
                            (usage nil "pname:layout must: be <<descriptorsets-pipelinelayout-consistency,consistent>> with all shaders specified in pname:pStages")
                            (usage nil "If pname:subpass uses color and/or depth/stencil attachments, then the pname:rasterizationSamples member of pname:pMultisampleState must: be the same as the sample count for those subpass attachments")
                            (usage nil "If pname:subpass does not use any color and/or depth/stencil attachments, then the pname:rasterizationSamples member of pname:pMultisampleState must: follow the rules for a <<renderpass-noattachments, zero-attachment subpass>>")
                            (usage nil "pname:subpass must: be a valid subpass within pname:renderpass")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineCacheCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineCacheCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member
                   ((optional . "true"))
                   (type nil "size_t")
                   (name nil "initialDataSize"))
                  (comment nil " Size of initial data to populate cache, in bytes ")
                  (member
                   ((len . "initialDataSize"))
                   "const "
                   (type nil "void")
                   "*            "
                   (name nil "pInitialData"))
                  (comment nil " Initial data to populate cache ")
                  (validity nil
                            (usage nil "If pname:initialDataSize is not `0`, it must: be equal to the size of pname:pInitialData, as returned by fname:vkGetPipelineCacheData when pname:pInitialData was originally retrieved")
                            (usage nil "If pname:initialDataSize is not `0`, pname:pInitialData must: have been retrieved from a previous call to fname:vkGetPipelineCacheData")))
                 (type
                  ((category . "struct")
                   (name . "VkPushConstantRange"))
                  (member nil
                          (type nil "VkShaderStageFlags")
                          (name nil "stageFlags"))
                  (comment nil " Which stages use the range ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "offset"))
                  (comment nil " Start of the range, in bytes ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "size"))
                  (comment nil " Size of the range, in bytes ")
                  (validity nil
                            (usage nil "pname:offset must: be less than sname:VkPhysicalDeviceLimits::pname:maxPushConstantsSize")
                            (usage nil "pname:size must: be greater than `0`")
                            (usage nil "pname:size must: be a multiple of `4`")
                            (usage nil "pname:size must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxPushConstantsSize minus pname:offset")))
                 (type
                  ((category . "struct")
                   (name . "VkPipelineLayoutCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkPipelineLayoutCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "setLayoutCount"))
                  (comment nil " Number of descriptor sets interfaced by the pipeline ")
                  (member
                   ((len . "setLayoutCount"))
                   "const "
                   (type nil "VkDescriptorSetLayout")
                   "* "
                   (name nil "pSetLayouts"))
                  (comment nil " Array of setCount number of descriptor set layout objects defining the layout of the ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "pushConstantRangeCount"))
                  (comment nil " Number of push-constant ranges used by the pipeline ")
                  (member
                   ((len . "pushConstantRangeCount"))
                   "const "
                   (type nil "VkPushConstantRange")
                   "* "
                   (name nil "pPushConstantRanges"))
                  (comment nil " Array of pushConstantRangeCount number of ranges used by various shader stages ")
                  (validity nil
                            (usage nil "pname:setLayoutCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxBoundDescriptorSets")
                            (usage nil "The total number of descriptors of the type ename:VK_DESCRIPTOR_TYPE_SAMPLER and ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible to any given shader stage across all elements of pname:pSetLayouts must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxPerStageDescriptorSamplers")
                            (usage nil "The total number of descriptors of the type ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER and ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pname:pSetLayouts must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxPerStageDescriptorUniformBuffers")
                            (usage nil "The total number of descriptors of the type ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER and ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pname:pSetLayouts must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxPerStageDescriptorStorageBuffers")
                            (usage nil "The total number of descriptors of the type ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, ename:VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and ename:VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible to any given shader stage across all elements of pname:pSetLayouts must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxPerStageDescriptorSampledImages")
                            (usage nil "The total number of descriptors of the type ename:VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and ename:VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible to any given shader stage across all elements of pname:pSetLayouts must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxPerStageDescriptorStorageImages")))
                 (type
                  ((category . "struct")
                   (name . "VkSamplerCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSamplerCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkFilter")
                          (name nil "magFilter"))
                  (comment nil " Filter mode for magnification ")
                  (member nil
                          (type nil "VkFilter")
                          (name nil "minFilter"))
                  (comment nil " Filter mode for minifiation ")
                  (member nil
                          (type nil "VkSamplerMipmapMode")
                          (name nil "mipmapMode"))
                  (comment nil " Mipmap selection mode ")
                  (member nil
                          (type nil "VkSamplerAddressMode")
                          (name nil "addressModeU"))
                  (member nil
                          (type nil "VkSamplerAddressMode")
                          (name nil "addressModeV"))
                  (member nil
                          (type nil "VkSamplerAddressMode")
                          (name nil "addressModeW"))
                  (member nil
                          (type nil "float")
                          (name nil "mipLodBias"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "anisotropyEnable"))
                  (member nil
                          (type nil "float")
                          (name nil "maxAnisotropy"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "compareEnable"))
                  (member
                   ((noautovalidity . "true"))
                   (type nil "VkCompareOp")
                   (name nil "compareOp"))
                  (member nil
                          (type nil "float")
                          (name nil "minLod"))
                  (member nil
                          (type nil "float")
                          (name nil "maxLod"))
                  (member
                   ((noautovalidity . "true"))
                   (type nil "VkBorderColor")
                   (name nil "borderColor"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "unnormalizedCoordinates"))
                  (validity nil
                            (usage nil "The absolute value of pname:mipLodBias must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxSamplerLodBias")
                            (usage nil "If the <<features-features-samplerAnisotropy,anisotropic sampling>> feature is not enabled, pname:anisotropyEnable must: be ename:VK_FALSE")
                            (usage nil "If pname:anisotropyEnable is ename:VK_TRUE, pname:maxAnisotropy must: be between `1.0` and sname:VkPhysicalDeviceLimits::pname:maxSamplerAnisotropy, inclusive")
                            (usage nil "If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:minFilter and pname:magFilter must: be equal")
                            (usage nil "If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:mipmapMode must: be ename:VK_SAMPLER_MIPMAP_MODE_NEAREST")
                            (usage nil "If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:minLod and pname:maxLod must: be zero")
                            (usage nil "If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:addressModeU and pname:addressModeV must: each be either ename:VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE or ename:VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER")
                            (usage nil "If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:anisotropyEnable must: be ename:VK_FALSE")
                            (usage nil "If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:compareEnable must: be ename:VK_FALSE")
                            (usage nil "If any of pname:addressModeU, pname:addressModeV or pname:addressModeW are ename:VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER, pname:borderColor must: be a valid elink:VkBorderColor value")
                            (usage nil "If the VK_KHR_mirror_clamp_to_edge extension is not enabled, pname:addressModeU, pname:addressModeV and pname:addressModeW mustnot: be ename:VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE")
                            (usage nil "If pname:compareEnable is ename:VK_TRUE, pname:compareOp must: be a valid elink:VkCompareOp value")))
                 (type
                  ((category . "struct")
                   (name . "VkCommandPoolCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkCommandPoolCreateFlags")
                   (name nil "flags"))
                  (comment nil " Command pool creation flags ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "queueFamilyIndex"))
                  (validity nil
                            (usage nil "pname:queueFamilyIndex must: be the index of a queue family available in the calling command's pname:device parameter")))
                 (type
                  ((category . "struct")
                   (name . "VkCommandBufferAllocateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member nil
                          (type nil "VkCommandPool")
                          (name nil "commandPool"))
                  (member nil
                          (type nil "VkCommandBufferLevel")
                          (name nil "level"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "commandBufferCount")))
                 (type
                  ((category . "struct")
                   (name . "VkCommandBufferInheritanceInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true")
                    (noautovalidity . "true"))
                   (type nil "VkRenderPass")
                   (name nil "renderPass"))
                  (comment nil " Render pass for secondary command buffers ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "subpass"))
                  (member
                   ((optional . "true")
                    (noautovalidity . "true"))
                   (type nil "VkFramebuffer")
                   (name nil "framebuffer"))
                  (comment nil " Framebuffer for secondary command buffers ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "occlusionQueryEnable"))
                  (comment nil " Whether this secondary command buffer may be executed during an occlusion query ")
                  (member
                   ((optional . "true")
                    (noautovalidity . "true"))
                   (type nil "VkQueryControlFlags")
                   (name nil "queryFlags"))
                  (comment nil " Query flags used by this secondary command buffer, if executed during an occlusion query ")
                  (member
                   ((optional . "true")
                    (noautovalidity . "true"))
                   (type nil "VkQueryPipelineStatisticFlags")
                   (name nil "pipelineStatistics"))
                  (comment nil " Pipeline statistics that may be counted for this secondary command buffer ")
                  (validity nil
                            (usage nil "If the <<features-features-inheritedQueries,inherited queries>> feature is not enabled, pname:occlusionQueryEnable must: be ename:VK_FALSE")
                            (usage nil "If the <<features-features-inheritedQueries,inherited queries>> feature is enabled, pname:queryFlags must: be a valid combination of elink:VkQueryControlFlagBits values")
                            (usage nil "If the <<features-features-pipelineStatisticsQuery,pipeline statistics queries>> feature is not enabled, pname:pipelineStatistics must: be code:0")))
                 (type
                  ((category . "struct")
                   (name . "VkCommandBufferBeginInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkCommandBufferUsageFlags")
                   (name nil "flags"))
                  (comment nil " Command buffer usage flags ")
                  (member
                   ((optional . "true")
                    (noautovalidity . "true"))
                   "const "
                   (type nil "VkCommandBufferInheritanceInfo")
                   "*       "
                   (name nil "pInheritanceInfo"))
                  (comment nil " Pointer to inheritance info for secondary command buffers ")
                  (validity nil
                            (usage nil "If pname:flags contains ename:VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the pname:renderPass member of pname:pInheritanceInfo must: be a valid sname:VkRenderPass")
                            (usage nil "If pname:flags contains ename:VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the pname:subpass member of pname:pInheritanceInfo must: be a valid subpass index within the pname:renderPass member of pname:pInheritanceInfo")
                            (usage nil "If pname:flags contains ename:VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the pname:framebuffer member of pname:pInheritanceInfo must: be either sname:VK_NULL_HANDLE, or a valid sname:VkFramebuffer that is compatible with the pname:renderPass member of pname:pInheritanceInfo")))
                 (type
                  ((category . "struct")
                   (name . "VkRenderPassBeginInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member nil
                          (type nil "VkRenderPass")
                          (name nil "renderPass"))
                  (member nil
                          (type nil "VkFramebuffer")
                          (name nil "framebuffer"))
                  (member nil
                          (type nil "VkRect2D")
                          (name nil "renderArea"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "clearValueCount"))
                  (member
                   ((len . "clearValueCount"))
                   "const "
                   (type nil "VkClearValue")
                   "*    "
                   (name nil "pClearValues"))
                  (validity nil
                            (usage nil "pname:clearValueCount must: be greater than or equal to the number of attachments in pname:renderPass that specify a pname:loadOp of ename:VK_ATTACHMENT_LOAD_OP_CLEAR")))
                 (type
                  ((category . "union")
                   (name . "VkClearColorValue")
                   (comment . "// Union allowing specification of floating point, integer, or unsigned integer color data. Actual value selected is based on image/attachment being cleared."))
                  (member nil
                          (type nil "float")
                          (name nil "float32")
                          "[4]")
                  (member nil
                          (type nil "int32_t")
                          (name nil "int32")
                          "[4]")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "uint32")
                          "[4]"))
                 (type
                  ((category . "struct")
                   (name . "VkClearDepthStencilValue"))
                  (member nil
                          (type nil "float")
                          (name nil "depth"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "stencil")))
                 (type
                  ((category . "union")
                   (name . "VkClearValue")
                   (comment . "// Union allowing specification of color or depth and stencil values. Actual value selected is based on attachment being cleared."))
                  (member nil
                          (type nil "VkClearColorValue")
                          (name nil "color"))
                  (member nil
                          (type nil "VkClearDepthStencilValue")
                          (name nil "depthStencil")))
                 (type
                  ((category . "struct")
                   (name . "VkClearAttachment"))
                  (member nil
                          (type nil "VkImageAspectFlags")
                          (name nil "aspectMask"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "colorAttachment"))
                  (member nil
                          (type nil "VkClearValue")
                          (name nil "clearValue"))
                  (validity nil
                            (usage nil "If pname:aspectMask includes ename:VK_IMAGE_ASPECT_COLOR_BIT, it mustnot: include ename:VK_IMAGE_ASPECT_DEPTH_BIT or ename:VK_IMAGE_ASPECT_STENCIL_BIT")
                            (usage nil "pname:aspectMask mustnot: include ename:VK_IMAGE_ASPECT_METADATA_BIT")))
                 (type
                  ((category . "struct")
                   (name . "VkAttachmentDescription"))
                  (member
                   ((optional . "true"))
                   (type nil "VkAttachmentDescriptionFlags")
                   (name nil "flags"))
                  (member nil
                          (type nil "VkFormat")
                          (name nil "format"))
                  (member nil
                          (type nil "VkSampleCountFlagBits")
                          (name nil "samples"))
                  (member nil
                          (type nil "VkAttachmentLoadOp")
                          (name nil "loadOp"))
                  (comment nil " Load operation for color or depth data ")
                  (member nil
                          (type nil "VkAttachmentStoreOp")
                          (name nil "storeOp"))
                  (comment nil " Store operation for color or depth data ")
                  (member nil
                          (type nil "VkAttachmentLoadOp")
                          (name nil "stencilLoadOp"))
                  (comment nil " Load operation for stencil data ")
                  (member nil
                          (type nil "VkAttachmentStoreOp")
                          (name nil "stencilStoreOp"))
                  (comment nil " Store operation for stencil data ")
                  (member nil
                          (type nil "VkImageLayout")
                          (name nil "initialLayout"))
                  (member nil
                          (type nil "VkImageLayout")
                          (name nil "finalLayout")))
                 (type
                  ((category . "struct")
                   (name . "VkAttachmentReference"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "attachment"))
                  (member nil
                          (type nil "VkImageLayout")
                          (name nil "layout")))
                 (type
                  ((category . "struct")
                   (name . "VkSubpassDescription"))
                  (member
                   ((optional . "true"))
                   (type nil "VkSubpassDescriptionFlags")
                   (name nil "flags"))
                  (member nil
                          (type nil "VkPipelineBindPoint")
                          (name nil "pipelineBindPoint"))
                  (comment nil " Must be VK_PIPELINE_BIND_POINT_GRAPHICS for now ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "inputAttachmentCount"))
                  (member
                   ((len . "inputAttachmentCount"))
                   "const "
                   (type nil "VkAttachmentReference")
                   "* "
                   (name nil "pInputAttachments"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "colorAttachmentCount"))
                  (member
                   ((len . "colorAttachmentCount"))
                   "const "
                   (type nil "VkAttachmentReference")
                   "* "
                   (name nil "pColorAttachments"))
                  (member
                   ((optional . "true")
                    (len . "colorAttachmentCount"))
                   "const "
                   (type nil "VkAttachmentReference")
                   "* "
                   (name nil "pResolveAttachments"))
                  (member
                   ((optional . "true"))
                   "const "
                   (type nil "VkAttachmentReference")
                   "* "
                   (name nil "pDepthStencilAttachment"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "preserveAttachmentCount"))
                  (member
                   ((len . "preserveAttachmentCount"))
                   "const "
                   (type nil "uint32_t")
                   "* "
                   (name nil "pPreserveAttachments"))
                  (validity nil
                            (usage nil "pname:pipelineBindPoint must: be ename:VK_PIPELINE_BIND_POINT_GRAPHICS")
                            (usage nil "pname:colorCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxColorAttachments")
                            (usage nil "If the first use of an attachment in this render pass is as an input attachment, and the attachment is not also used as a color or depth/stencil attachment in the same subpass, then pname:loadOp mustnot: be ename:VK_ATTACHMENT_LOAD_OP_CLEAR")
                            (usage nil "If pname:pResolveAttachments is not `NULL`, for each resolve attachment that does not have the value ename:VK_ATTACHMENT_UNUSED, the corresponding color attachment mustnot: have the value ename:VK_ATTACHMENT_UNUSED")
                            (usage nil "If pname:pResolveAttachments is not `NULL`, the sample count of each element of pname:pColorAttachments must: be anything other than ename:VK_SAMPLE_COUNT_1_BIT")
                            (usage nil "Any given element of pname:pResolveAttachments must: have a sample count of ename:VK_SAMPLE_COUNT_1_BIT")
                            (usage nil "Any given element of pname:pResolveAttachments must: have the same elink:VkFormat as its corresponding color attachment")
                            (usage nil "All attachments in pname:pColorAttachments and pname:pDepthStencilAttachment that are not ename:VK_ATTACHMENT_UNUSED must: have the same sample count")
                            (usage nil "If any input attachments are ename:VK_ATTACHMENT_UNUSED, then any pipelines bound during the subpass mustnot: accesss those input attachments from the fragment shader")
                            (usage nil "The pname:attachment member of any element of pname:pPreserveAttachments mustnot: be ename:VK_ATTACHMENT_UNUSED")
                            (usage nil "Any given element of pname:pPreserveAttachments mustnot: also be an element of any other member of the subpass description")
                            (usage nil "If any attachment is used as both an input attachment and a color or depth/stencil attachment, then each use must: use the same pname:layout")))
                 (type
                  ((category . "struct")
                   (name . "VkSubpassDependency"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "srcSubpass"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "dstSubpass"))
                  (member nil
                          (type nil "VkPipelineStageFlags")
                          (name nil "srcStageMask"))
                  (member nil
                          (type nil "VkPipelineStageFlags")
                          (name nil "dstStageMask"))
                  (member
                   ((optional . "true"))
                   (type nil "VkAccessFlags")
                   (name nil "srcAccessMask"))
                  (comment nil " Memory accesses from the source of the dependency to synchronize ")
                  (member
                   ((optional . "true"))
                   (type nil "VkAccessFlags")
                   (name nil "dstAccessMask"))
                  (comment nil " Memory accesses from the destination of the dependency to synchronize ")
                  (member
                   ((optional . "true"))
                   (type nil "VkDependencyFlags")
                   (name nil "dependencyFlags"))
                  (validity nil
                            (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT")
                            (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT")
                            (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT")
                            (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT")
                            (usage nil "pname:srcSubpass must: be less than or equal to pname:dstSubpass, unless one of them is ename:VK_SUBPASS_EXTERNAL, to avoid cyclic dependencies and ensure a valid execution order")
                            (usage nil "pname:srcSubpass and pname:dstSubpass mustnot: both be equal to ename:VK_SUBPASS_EXTERNAL")))
                 (type
                  ((category . "struct")
                   (name . "VkRenderPassCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkRenderPassCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "attachmentCount"))
                  (member
                   ((len . "attachmentCount"))
                   "const "
                   (type nil "VkAttachmentDescription")
                   "* "
                   (name nil "pAttachments"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "subpassCount"))
                  (member
                   ((len . "subpassCount"))
                   "const "
                   (type nil "VkSubpassDescription")
                   "* "
                   (name nil "pSubpasses"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "dependencyCount"))
                  (member
                   ((len . "dependencyCount"))
                   "const "
                   (type nil "VkSubpassDependency")
                   "* "
                   (name nil "pDependencies"))
                  (validity nil
                            (usage nil "If any two subpasses operate on attachments with overlapping ranges of the same sname:VkDeviceMemory object, and at least one subpass writes to that area of sname:VkDeviceMemory, a subpass dependency must: be included (either directly or via some intermediate subpasses) between them")
                            (usage nil "If the pname:attachment member of any element of pname:pInputAttachments, pname:pColorAttachments, pname:pResolveAttachments or pname:pDepthStencilAttachment, or the attachment indexed by any element of pname:pPreserveAttachments in any given element of pname:pSubpasses is bound to a range of a sname:VkDeviceMemory object that overlaps with any other attachment in any subpass (including the same subpass), the sname:VkAttachmentDescription structures describing them must: include ename:VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT in pname:flags")
                            (usage nil "If the pname:attachment member of any element of pname:pInputAttachments, pname:pColorAttachments, pname:pResolveAttachments or pname:pDepthStencilAttachment, or any element of pname:pPreserveAttachments in any given element of pname:pSubpasses is not ename:VK_ATTACHMENT_UNUSED, it must: be less than pname:attachmentCount")
                            (usage nil "The value of any element of the pname:pPreserveAttachments member in any given element of pname:pSubpasses mustnot: be ename:VK_ATTACHMENT_UNUSED")))
                 (type
                  ((category . "struct")
                   (name . "VkEventCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_EVENT_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkEventCreateFlags")
                   (name nil "flags"))
                  (comment nil " Event creation flags "))
                 (type
                  ((category . "struct")
                   (name . "VkFenceCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_FENCE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkFenceCreateFlags")
                   (name nil "flags"))
                  (comment nil " Fence creation flags "))
                 (type
                  ((category . "struct")
                   (name . "VkPhysicalDeviceFeatures"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "robustBufferAccess"))
                  (comment nil " out of bounds buffer accesses are well defined ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "fullDrawIndexUint32"))
                  (comment nil " full 32-bit range of indices for indexed draw calls ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "imageCubeArray"))
                  (comment nil " image views which are arrays of cube maps ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "independentBlend"))
                  (comment nil " blending operations are controlled per-attachment ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "geometryShader"))
                  (comment nil " geometry stage ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "tessellationShader"))
                  (comment nil " tessellation control and evaluation stage ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sampleRateShading"))
                  (comment nil " per-sample shading and interpolation ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "dualSrcBlend"))
                  (comment nil " blend operations which take two sources ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "logicOp"))
                  (comment nil " logic operations ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "multiDrawIndirect"))
                  (comment nil " multi draw indirect ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "drawIndirectFirstInstance"))
                  (comment nil " indirect draws can use non-zero firstInstance ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "depthClamp"))
                  (comment nil " depth clamping ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "depthBiasClamp"))
                  (comment nil " depth bias clamping ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "fillModeNonSolid"))
                  (comment nil " point and wireframe fill modes ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "depthBounds"))
                  (comment nil " depth bounds test ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "wideLines"))
                  (comment nil " lines with width greater than 1 ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "largePoints"))
                  (comment nil " points with size greater than 1 ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "alphaToOne"))
                  (comment nil " the fragment alpha component can be forced to maximum representable alpha value ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "multiViewport"))
                  (comment nil " viewport arrays ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "samplerAnisotropy"))
                  (comment nil " anisotropic sampler filtering ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "textureCompressionETC2"))
                  (comment nil " ETC texture compression formats ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "textureCompressionASTC_LDR"))
                  (comment nil " ASTC LDR texture compression formats ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "textureCompressionBC"))
                  (comment nil " BC1-7 texture compressed formats ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "occlusionQueryPrecise"))
                  (comment nil " precise occlusion queries returning actual sample counts ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "pipelineStatisticsQuery"))
                  (comment nil " pipeline statistics query ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "vertexPipelineStoresAndAtomics"))
                  (comment nil " stores and atomic ops on storage buffers and images are supported in vertex, tessellation, and geometry stages ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "fragmentStoresAndAtomics"))
                  (comment nil " stores and atomic ops on storage buffers and images are supported in the fragment stage ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderTessellationAndGeometryPointSize"))
                  (comment nil " tessellation and geometry stages can export point size ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderImageGatherExtended"))
                  (comment nil " image gather with run-time values and independent offsets ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderStorageImageExtendedFormats"))
                  (comment nil " the extended set of formats can be used for storage images ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderStorageImageMultisample"))
                  (comment nil " multisample images can be used for storage images ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderStorageImageReadWithoutFormat"))
                  (comment nil " read from storage image does not require format qualifier ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderStorageImageWriteWithoutFormat"))
                  (comment nil " write to storage image does not require format qualifier ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderUniformBufferArrayDynamicIndexing"))
                  (comment nil " arrays of uniform buffers can be accessed with dynamically uniform indices ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderSampledImageArrayDynamicIndexing"))
                  (comment nil " arrays of sampled images can be accessed with dynamically uniform indices ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderStorageBufferArrayDynamicIndexing"))
                  (comment nil " arrays of storage buffers can be accessed with dynamically uniform indices ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderStorageImageArrayDynamicIndexing"))
                  (comment nil " arrays of storage images can be accessed with dynamically uniform indices ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderClipDistance"))
                  (comment nil " clip distance in shaders ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderCullDistance"))
                  (comment nil " cull distance in shaders ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderFloat64"))
                  (comment nil " 64-bit floats (doubles) in shaders ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderInt64"))
                  (comment nil " 64-bit integers in shaders ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderInt16"))
                  (comment nil " 16-bit integers in shaders ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderResourceResidency"))
                  (comment nil " shader can use texture operations that return resource residency information (requires sparseNonResident support) ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "shaderResourceMinLod"))
                  (comment nil " shader can use texture operations that specify minimum resource level of detail ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sparseBinding"))
                  (comment nil " Sparse resources support: Resource memory can be managed at opaque page level rather than object level ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sparseResidencyBuffer"))
                  (comment nil " Sparse resources support: GPU can access partially resident buffers  ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sparseResidencyImage2D"))
                  (comment nil " Sparse resources support: GPU can access partially resident 2D (non-MSAA non-depth/stencil) images  ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sparseResidencyImage3D"))
                  (comment nil " Sparse resources support: GPU can access partially resident 3D images  ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sparseResidency2Samples"))
                  (comment nil " Sparse resources support: GPU can access partially resident MSAA 2D images with 2 samples ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sparseResidency4Samples"))
                  (comment nil " Sparse resources support: GPU can access partially resident MSAA 2D images with 4 samples ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sparseResidency8Samples"))
                  (comment nil " Sparse resources support: GPU can access partially resident MSAA 2D images with 8 samples ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sparseResidency16Samples"))
                  (comment nil " Sparse resources support: GPU can access partially resident MSAA 2D images with 16 samples ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "sparseResidencyAliased"))
                  (comment nil " Sparse resources support: GPU can correctly access data aliased into multiple locations (opt-in) ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "variableMultisampleRate"))
                  (comment nil " multisample rate must be the same for all pipelines in a subpass ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "inheritedQueries"))
                  (comment nil " Queries may be inherited from primary to secondary command buffers ")
                  (validity nil
                            (usage nil "If any member of this structure is ename:VK_FALSE, as returned by flink:vkGetPhysicalDeviceFeatures, then it must: be ename:VK_FALSE when passed as part of the sname:VkDeviceCreateInfo struct when creating a device")))
                 (type
                  ((category . "struct")
                   (name . "VkPhysicalDeviceSparseProperties")
                   (returnedonly . "true"))
                  (member nil
                          (type nil "VkBool32")
                          (name nil "residencyStandard2DBlockShape"))
                  (comment nil " Sparse resources support: GPU will access all 2D (single sample) sparse resources using the standard sparse image block shapes (based on pixel format) ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "residencyStandard2DMultisampleBlockShape"))
                  (comment nil " Sparse resources support: GPU will access all 2D (multisample) sparse resources using the standard sparse image block shapes (based on pixel format) ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "residencyStandard3DBlockShape"))
                  (comment nil " Sparse resources support: GPU will access all 3D sparse resources using the standard sparse image block shapes (based on pixel format) ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "residencyAlignedMipSize"))
                  (comment nil " Sparse resources support: Images with mip-level dimensions that are NOT a multiple of the sparse image block dimensions will be placed in the mip tail ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "residencyNonResidentStrict"))
                  (comment nil " Sparse resources support: GPU can consistently access non-resident regions of a resource, all reads return as if data is 0, writes are discarded "))
                 (type
                  ((category . "struct")
                   (name . "VkPhysicalDeviceLimits")
                   (returnedonly . "true"))
                  (comment nil " resource maximum sizes ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxImageDimension1D"))
                  (comment nil " max 1D image dimension ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxImageDimension2D"))
                  (comment nil " max 2D image dimension ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxImageDimension3D"))
                  (comment nil " max 3D image dimension ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxImageDimensionCube"))
                  (comment nil " max cubemap image dimension ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxImageArrayLayers"))
                  (comment nil " max layers for image arrays ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTexelBufferElements"))
                  (comment nil " max texel buffer size (fstexels) ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxUniformBufferRange"))
                  (comment nil " max uniform buffer range (bytes) ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxStorageBufferRange"))
                  (comment nil " max storage buffer range (bytes) ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxPushConstantsSize"))
                  (comment nil " max size of the push constants pool (bytes) ")
                  (comment nil " memory limits ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxMemoryAllocationCount"))
                  (comment nil " max number of device memory allocations supported ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxSamplerAllocationCount"))
                  (comment nil " max number of samplers that can be allocated on a device ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "bufferImageGranularity"))
                  (comment nil " Granularity (in bytes) at which buffers and images can be bound to adjacent memory for simultaneous usage ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "sparseAddressSpaceSize"))
                  (comment nil " Total address space available for sparse allocations (bytes) ")
                  (comment nil " descriptor set limits ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxBoundDescriptorSets"))
                  (comment nil " max number of descriptors sets that can be bound to a pipeline ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxPerStageDescriptorSamplers"))
                  (comment nil " max number of samplers allowed per-stage in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxPerStageDescriptorUniformBuffers"))
                  (comment nil " max number of uniform buffers allowed per-stage in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxPerStageDescriptorStorageBuffers"))
                  (comment nil " max number of storage buffers allowed per-stage in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxPerStageDescriptorSampledImages"))
                  (comment nil " max number of sampled images allowed per-stage in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxPerStageDescriptorStorageImages"))
                  (comment nil " max number of storage images allowed per-stage in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxPerStageDescriptorInputAttachments"))
                  (comment nil " max number of input attachments allowed per-stage in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxPerStageResources"))
                  (comment nil " max number of resources allowed by a single stage ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxDescriptorSetSamplers"))
                  (comment nil " max number of samplers allowed in all stages in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxDescriptorSetUniformBuffers"))
                  (comment nil " max number of uniform buffers allowed in all stages in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxDescriptorSetUniformBuffersDynamic"))
                  (comment nil " max number of dynamic uniform buffers allowed in all stages in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxDescriptorSetStorageBuffers"))
                  (comment nil " max number of storage buffers allowed in all stages in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxDescriptorSetStorageBuffersDynamic"))
                  (comment nil " max number of dynamic storage buffers allowed in all stages in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxDescriptorSetSampledImages"))
                  (comment nil " max number of sampled images allowed in all stages in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxDescriptorSetStorageImages"))
                  (comment nil " max number of storage images allowed in all stages in a descriptor set ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxDescriptorSetInputAttachments"))
                  (comment nil " max number of input attachments allowed in all stages in a descriptor set ")
                  (comment nil " vertex stage limits ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxVertexInputAttributes"))
                  (comment nil " max number of vertex input attribute slots ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxVertexInputBindings"))
                  (comment nil " max number of vertex input binding slots ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxVertexInputAttributeOffset"))
                  (comment nil " max vertex input attribute offset added to vertex buffer offset ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxVertexInputBindingStride"))
                  (comment nil " max vertex input binding stride ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxVertexOutputComponents"))
                  (comment nil " max number of output components written by vertex shader ")
                  (comment nil " tessellation control stage limits ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTessellationGenerationLevel"))
                  (comment nil " max level supported by tessellation primitive generator ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTessellationPatchSize"))
                  (comment nil " max patch size (vertices) ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTessellationControlPerVertexInputComponents"))
                  (comment nil " max number of input components per-vertex in TCS ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTessellationControlPerVertexOutputComponents"))
                  (comment nil " max number of output components per-vertex in TCS ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTessellationControlPerPatchOutputComponents"))
                  (comment nil " max number of output components per-patch in TCS ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTessellationControlTotalOutputComponents"))
                  (comment nil " max total number of per-vertex and per-patch output components in TCS ")
                  (comment nil " tessellation evaluation stage limits ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTessellationEvaluationInputComponents"))
                  (comment nil " max number of input components per vertex in TES ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTessellationEvaluationOutputComponents"))
                  (comment nil " max number of output components per vertex in TES ")
                  (comment nil " geometry stage limits ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxGeometryShaderInvocations"))
                  (comment nil " max invocation count supported in geometry shader ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxGeometryInputComponents"))
                  (comment nil " max number of input components read in geometry stage ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxGeometryOutputComponents"))
                  (comment nil " max number of output components written in geometry stage ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxGeometryOutputVertices"))
                  (comment nil " max number of vertices that can be emitted in geometry stage ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxGeometryTotalOutputComponents"))
                  (comment nil " max total number of components (all vertices) written in geometry stage ")
                  (comment nil " fragment stage limits ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxFragmentInputComponents"))
                  (comment nil " max number of input compontents read in fragment stage ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxFragmentOutputAttachments"))
                  (comment nil " max number of output attachments written in fragment stage ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxFragmentDualSrcAttachments"))
                  (comment nil " max number of output attachments written when using dual source blending ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxFragmentCombinedOutputResources"))
                  (comment nil " max total number of storage buffers, storage images and output buffers ")
                  (comment nil " compute stage limits ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxComputeSharedMemorySize"))
                  (comment nil " max total storage size of work group local storage (bytes) ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxComputeWorkGroupCount")
                          "[3]")
                  (comment nil " max num of compute work groups that may be dispatched\n                                                                                                                     by a single command (x,y,z) ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxComputeWorkGroupInvocations"))
                  (comment nil " max total compute invocations in a single local work group ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxComputeWorkGroupSize")
                          "[3]")
                  (comment nil " max local size of a compute work group (x,y,z) ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "subPixelPrecisionBits"))
                  (comment nil " number bits of subpixel precision in screen x and y")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "subTexelPrecisionBits"))
                  (comment nil " number bits of precision for selecting texel weights")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "mipmapPrecisionBits"))
                  (comment nil " number bits of precision for selecting mipmap weights ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxDrawIndexedIndexValue"))
                  (comment nil " max index value for indexed draw calls (for 32-bit indices) ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxDrawIndirectCount"))
                  (comment nil " max draw count for indirect draw calls ")
                  (member nil
                          (type nil "float")
                          (name nil "maxSamplerLodBias"))
                  (comment nil " max absolute sampler level of detail bias ")
                  (member nil
                          (type nil "float")
                          (name nil "maxSamplerAnisotropy"))
                  (comment nil " max degree of sampler anisotropy ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxViewports"))
                  (comment nil " max number of active viewports ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxViewportDimensions")
                          "[2]")
                  (comment nil " max viewport dimensions (x,y) ")
                  (member nil
                          (type nil "float")
                          (name nil "viewportBoundsRange")
                          "[2]")
                  (comment nil " viewport bounds range (min,max) ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "viewportSubPixelBits"))
                  (comment nil " number bits of subpixel precision for viewport ")
                  (member nil
                          (type nil "size_t")
                          (name nil "minMemoryMapAlignment"))
                  (comment nil " min required alignment of pointers returned by MapMemory (bytes) ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "minTexelBufferOffsetAlignment"))
                  (comment nil " min required alignment for texel buffer offsets (bytes)  ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "minUniformBufferOffsetAlignment"))
                  (comment nil " min required alignment for uniform buffer sizes and offsets (bytes) ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "minStorageBufferOffsetAlignment"))
                  (comment nil " min required alignment for storage buffer offsets (bytes) ")
                  (member nil
                          (type nil "int32_t")
                          (name nil "minTexelOffset"))
                  (comment nil " min texel offset for OpTextureSampleOffset ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTexelOffset"))
                  (comment nil " max texel offset for OpTextureSampleOffset ")
                  (member nil
                          (type nil "int32_t")
                          (name nil "minTexelGatherOffset"))
                  (comment nil " min texel offset for OpTextureGatherOffset ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxTexelGatherOffset"))
                  (comment nil " max texel offset for OpTextureGatherOffset ")
                  (member nil
                          (type nil "float")
                          (name nil "minInterpolationOffset"))
                  (comment nil " furthest negative offset for interpolateAtOffset ")
                  (member nil
                          (type nil "float")
                          (name nil "maxInterpolationOffset"))
                  (comment nil " furthest positive offset for interpolateAtOffset ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "subPixelInterpolationOffsetBits"))
                  (comment nil " number of subpixel bits for interpolateAtOffset ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxFramebufferWidth"))
                  (comment nil " max width for a framebuffer ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxFramebufferHeight"))
                  (comment nil " max height for a framebuffer ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxFramebufferLayers"))
                  (comment nil " max layer count for a layered framebuffer ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSampleCountFlags")
                   (name nil "framebufferColorSampleCounts"))
                  (comment nil " supported color sample counts for a framebuffer ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSampleCountFlags")
                   (name nil "framebufferDepthSampleCounts"))
                  (comment nil " supported depth sample counts for a framebuffer ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSampleCountFlags")
                   (name nil "framebufferStencilSampleCounts"))
                  (comment nil " supported stencil sample counts for a framebuffer ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSampleCountFlags")
                   (name nil "framebufferNoAttachmentsSampleCounts"))
                  (comment nil " supported sample counts for a framebuffer with no attachments ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxColorAttachments"))
                  (comment nil " max number of color attachments per subpass ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSampleCountFlags")
                   (name nil "sampledImageColorSampleCounts"))
                  (comment nil " supported color sample counts for a non-integer sampled image ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSampleCountFlags")
                   (name nil "sampledImageIntegerSampleCounts"))
                  (comment nil " supported sample counts for an integer image ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSampleCountFlags")
                   (name nil "sampledImageDepthSampleCounts"))
                  (comment nil " supported depth sample counts for a sampled image ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSampleCountFlags")
                   (name nil "sampledImageStencilSampleCounts"))
                  (comment nil " supported stencil sample counts for a sampled image ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSampleCountFlags")
                   (name nil "storageImageSampleCounts"))
                  (comment nil " supported sample counts for a storage image ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxSampleMaskWords"))
                  (comment nil " max number of sample mask words ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "timestampComputeAndGraphics"))
                  (comment nil " timestamps on graphics and compute queues ")
                  (member nil
                          (type nil "float")
                          (name nil "timestampPeriod"))
                  (comment nil " number of nanoseconds it takes for timestamp query value to increment by 1 ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxClipDistances"))
                  (comment nil " max number of clip distances ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxCullDistances"))
                  (comment nil " max number of cull distances ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxCombinedClipAndCullDistances"))
                  (comment nil " max combined number of user clipping ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "discreteQueuePriorities"))
                  (comment nil " distinct queue priorities available  ")
                  (member nil
                          (type nil "float")
                          (name nil "pointSizeRange")
                          "[2]")
                  (comment nil " range (min,max) of supported point sizes ")
                  (member nil
                          (type nil "float")
                          (name nil "lineWidthRange")
                          "[2]")
                  (comment nil " range (min,max) of supported line widths ")
                  (member nil
                          (type nil "float")
                          (name nil "pointSizeGranularity"))
                  (comment nil " granularity of supported point sizes ")
                  (member nil
                          (type nil "float")
                          (name nil "lineWidthGranularity"))
                  (comment nil " granularity of supported line widths ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "strictLines"))
                  (comment nil " line rasterization follows preferred rules ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "standardSampleLocations"))
                  (comment nil " supports standard sample locations for all supported sample counts ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "optimalBufferCopyOffsetAlignment"))
                  (comment nil " optimal offset of buffer copies ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "optimalBufferCopyRowPitchAlignment"))
                  (comment nil " optimal pitch of buffer copies ")
                  (member nil
                          (type nil "VkDeviceSize")
                          (name nil "nonCoherentAtomSize"))
                  (comment nil " minimum size and alignment for non-coherent host-mapped device memory access "))
                 (type
                  ((category . "struct")
                   (name . "VkSemaphoreCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSemaphoreCreateFlags")
                   (name nil "flags"))
                  (comment nil " Semaphore creation flags "))
                 (type
                  ((category . "struct")
                   (name . "VkQueryPoolCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkQueryPoolCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkQueryType")
                          (name nil "queryType"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "queryCount"))
                  (member
                   ((optional . "true")
                    (noautovalidity . "true"))
                   (type nil "VkQueryPipelineStatisticFlags")
                   (name nil "pipelineStatistics"))
                  (comment nil " Optional ")
                  (validity nil
                            (usage nil "If the <<features-features-pipelineStatisticsQuery,pipeline statistics queries>> feature is not enabled, pname:queryType mustnot: be ename:VK_QUERY_TYPE_PIPELINE_STATISTICS")
                            (usage nil "If pname:queryType is ename:VK_QUERY_TYPE_PIPELINE_STATISTICS, pname:pipelineStatistics must: be a valid combination of elink:VkQueryPipelineStatisticFlagBits values")))
                 (type
                  ((category . "struct")
                   (name . "VkFramebufferCreateInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkFramebufferCreateFlags")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkRenderPass")
                          (name nil "renderPass"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "attachmentCount"))
                  (member
                   ((len . "attachmentCount"))
                   "const "
                   (type nil "VkImageView")
                   "*     "
                   (name nil "pAttachments"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "width"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "height"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "layers"))
                  (validity nil
                            (usage nil "pname:attachmentCount must: be equal to the attachment count specified in pname:renderPass")
                            (usage nil "Any given element of pname:pAttachments that is used as a color attachment or resolve attachment by pname:renderPass must: have been created with a pname:usage value including ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT")
                            (usage nil "Any given element of pname:pAttachments that is used as a depth/stencil attachment by pname:renderPass must: have been created with a pname:usage value including ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT")
                            (usage nil "Any given element of pname:pAttachments that is used as an input attachment by pname:renderPass must: have been created with a pname:usage value including ename:VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT")
                            (usage nil "Any given element of pname:pAttachments must: have been created with an elink:VkFormat value that matches the elink:VkFormat specified by the corresponding sname:VkAttachmentDescription in pname:renderPass")
                            (usage nil "Any given element of pname:pAttachments must: have been created with a pname:samples value that matches the pname:samples value specified by the corresponding sname:VkAttachmentDescription in pname:renderPass")
                            (usage nil "Any given element of pname:pAttachments must: have dimensions at least as large as the corresponding framebuffer dimension")
                            (usage nil "Any given element of pname:pAttachments must: only specify a single mip-level")
                            (usage nil "Any given element of pname:pAttachments must: have been created with the identity swizzle")
                            (usage nil "pname:width must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxFramebufferWidth")
                            (usage nil "pname:height must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxFramebufferHeight")
                            (usage nil "pname:layers must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxFramebufferLayers")))
                 (type
                  ((category . "struct")
                   (name . "VkDrawIndirectCommand"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "vertexCount"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "instanceCount"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "firstVertex"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "firstInstance"))
                  (validity nil
                            (usage nil "For a given vertex buffer binding, any attribute data fetched must: be entirely contained within the corresponding vertex buffer binding, as described in <<fxvertex-input>>")
                            (usage nil "If the <<features-features-drawIndirectFirstInstance,drawIndirectFirstInstance>> feature is not enabled, pname:firstInstance must: be code:0")))
                 (type
                  ((category . "struct")
                   (name . "VkDrawIndexedIndirectCommand"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "indexCount"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "instanceCount"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "firstIndex"))
                  (member nil
                          (type nil "int32_t")
                          (name nil "vertexOffset"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "firstInstance"))
                  (validity nil
                            (usage nil "For a given vertex buffer binding, any attribute data fetched must: be entirely contained within the corresponding vertex buffer binding, as described in <<fxvertex-input>>")
                            (usage nil "(pname:indexSize * (pname:firstIndex + pname:indexCount) + pname:offset) must: be less than or equal to the size of the currently bound index buffer, with pname:indexSize being based on the type specified by pname:indexType, where the index buffer, pname:indexType, and pname:offset are specified via fname:vkCmdBindIndexBuffer")
                            (usage nil "If the <<features-features-drawIndirectFirstInstance,drawIndirectFirstInstance>> feature is not enabled, pname:firstInstance must: be code:0")))
                 (type
                  ((category . "struct")
                   (name . "VkDispatchIndirectCommand"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "x"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "y"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "z"))
                  (validity nil
                            (usage nil "pname:x must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[0]")
                            (usage nil "pname:y must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[1]")
                            (usage nil "pname:z must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[2]")))
                 (type
                  ((category . "struct")
                   (name . "VkSubmitInfo"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Type of structure. Should be VK_STRUCTURE_TYPE_SUBMIT_INFO ")
                  (member nil "const "
                          (type nil "void")
                          "*            "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "waitSemaphoreCount"))
                  (member
                   ((len . "waitSemaphoreCount"))
                   "const "
                   (type nil "VkSemaphore")
                   "*     "
                   (name nil "pWaitSemaphores"))
                  (member
                   ((len . "waitSemaphoreCount"))
                   "const "
                   (type nil "VkPipelineStageFlags")
                   "*           "
                   (name nil "pWaitDstStageMask"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "commandBufferCount"))
                  (member
                   ((len . "commandBufferCount"))
                   "const "
                   (type nil "VkCommandBuffer")
                   "*     "
                   (name nil "pCommandBuffers"))
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "signalSemaphoreCount"))
                  (member
                   ((len . "signalSemaphoreCount"))
                   "const "
                   (type nil "VkSemaphore")
                   "*     "
                   (name nil "pSignalSemaphores"))
                  (validity nil
                            (usage nil "Any given element of pname:pSignalSemaphores must: currently be unsignalled")
                            (usage nil "Any given element of pname:pCommandBuffers must: either have been recorded with the ename:VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, or not currently be executing on the device")
                            (usage nil "Any given element of pname:pCommandBuffers must: be in the executable state")
                            (usage nil "If any given element of pname:pCommandBuffers contains commands that execute secondary command buffers, those secondary command buffers must: have been recorded with the ename:VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, or not currently be executing on the device")
                            (usage nil "If any given element of pname:pCommandBuffers was created with ename:VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT, it mustnot: have been previously submitted without re-recording that command buffer")
                            (usage nil "If any given element of pname:pCommandBuffers contains commands that execute secondary command buffers created with ename:VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT, each such secondary command buffer mustnot: have been previously submitted without re-recording that command buffer")
                            (usage nil "Any given element of pname:pCommandBuffers mustnot: contain commands that execute a secondary command buffer, if that secondary command buffer has been recorded in another primary command buffer after it was recorded into this sname:VkCommandBuffer")
                            (usage nil "Any given element of pname:pCommandBuffers must: have been created on a sname:VkCommandPool that was created for the same queue family that the calling command's pname:queue belongs to")
                            (usage nil "Any given element of pname:pCommandBuffers mustnot: have been created with ename:VK_COMMAND_BUFFER_LEVEL_SECONDARY")
                            (usage nil "Any given element of sname:VkSemaphore in pname:pWaitSemaphores must: refer to a prior signal of that sname:VkSemaphore that won't be consumed by any other wait on that semaphore")
                            (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, any given element of pname:pWaitDstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT")
                            (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, any given element of pname:pWaitDstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT")))
                 (comment nil " WSI extensions ")
                 (type
                  ((category . "struct")
                   (name . "VkDisplayPropertiesKHR"))
                  (member nil
                          (type nil "VkDisplayKHR")
                          (name nil "display"))
                  (comment nil " Handle of the display object ")
                  (member
                   ((len . "null-terminated"))
                   "const "
                   (type nil "char")
                   "*                      "
                   (name nil "displayName"))
                  (comment nil " Name of the display ")
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "physicalDimensions"))
                  (comment nil " In millimeters? ")
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "physicalResolution"))
                  (comment nil " Max resolution for CRT? ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSurfaceTransformFlagsKHR")
                   (name nil "supportedTransforms"))
                  (comment nil " one or more bits from VkSurfaceTransformFlagsKHR ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "planeReorderPossible"))
                  (comment nil " VK_TRUE if the overlay plane's z-order can be changed on this display. ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "persistentContent"))
                  (comment nil " VK_TRUE if this is a \"smart\" display that supports self-refresh/internal buffering. "))
                 (type
                  ((category . "struct")
                   (name . "VkDisplayPlanePropertiesKHR"))
                  (member nil
                          (type nil "VkDisplayKHR")
                          (name nil "currentDisplay"))
                  (comment nil " Display the plane is currently associated with.  Will be VK_NULL_HANDLE if the plane is not in use. ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "currentStackIndex"))
                  (comment nil " Current z-order of the plane. "))
                 (type
                  ((category . "struct")
                   (name . "VkDisplayModeParametersKHR"))
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "visibleRegion"))
                  (comment nil " Visible scannout region. ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "refreshRate"))
                  (comment nil " Number of times per second the display is updated. "))
                 (type
                  ((category . "struct")
                   (name . "VkDisplayModePropertiesKHR"))
                  (member nil
                          (type nil "VkDisplayModeKHR")
                          (name nil "displayMode"))
                  (comment nil " Handle of this display mode. ")
                  (member nil
                          (type nil "VkDisplayModeParametersKHR")
                          (name nil "parameters"))
                  (comment nil " The parameters this mode uses. "))
                 (type
                  ((category . "struct")
                   (name . "VkDisplayModeCreateInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkDisplayModeCreateFlagsKHR")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkDisplayModeParametersKHR")
                          (name nil "parameters"))
                  (comment nil " The parameters this mode uses. ")
                  (validity nil
                            (usage nil "The pname:width and pname:height members of the pname:visibleRegion member of pname:parameters must: be greater than `0`")
                            (usage nil "The pname:refreshRate member of pname:parameters must: be greater than `0`")))
                 (type
                  ((category . "struct")
                   (name . "VkDisplayPlaneCapabilitiesKHR"))
                  (member
                   ((optional . "true"))
                   (type nil "VkDisplayPlaneAlphaFlagsKHR")
                   (name nil "supportedAlpha"))
                  (comment nil " Types of alpha blending supported, if any. ")
                  (member nil
                          (type nil "VkOffset2D")
                          (name nil "minSrcPosition"))
                  (comment nil " Does the plane have any position and extent restrictions? ")
                  (member nil
                          (type nil "VkOffset2D")
                          (name nil "maxSrcPosition"))
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "minSrcExtent"))
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "maxSrcExtent"))
                  (member nil
                          (type nil "VkOffset2D")
                          (name nil "minDstPosition"))
                  (member nil
                          (type nil "VkOffset2D")
                          (name nil "maxDstPosition"))
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "minDstExtent"))
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "maxDstExtent")))
                 (type
                  ((category . "struct")
                   (name . "VkDisplaySurfaceCreateInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkDisplaySurfaceCreateFlagsKHR")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkDisplayModeKHR")
                          (name nil "displayMode"))
                  (comment nil " The mode to use when displaying this surface ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "planeIndex"))
                  (comment nil " The plane on which this surface appears.  Must be between 0 and the value returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR() in pPropertyCount. ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "planeStackIndex"))
                  (comment nil " The z-order of the plane. ")
                  (member nil
                          (type nil "VkSurfaceTransformFlagBitsKHR")
                          (name nil "transform"))
                  (comment nil " Transform to apply to the images as part of the scannout operation ")
                  (member nil
                          (type nil "float")
                          (name nil "globalAlpha"))
                  (comment nil " Global alpha value.  Must be between 0 and 1, inclusive.  Ignored if alphaMode is not VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR ")
                  (member nil
                          (type nil "VkDisplayPlaneAlphaFlagBitsKHR")
                          (name nil "alphaMode"))
                  (comment nil " What type of alpha blending to use.  Must be a bit from vkGetDisplayPlanePropertiesKHR::supportedAlpha. ")
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "imageExtent"))
                  (comment nil " size of the images to use with this surface ")
                  (validity nil
                            (usage nil "pname:planeIndex must: be less than the number of display planes supported by the device as determined by calling fname:vkGetPhysicalDeviceDisplayPlanePropertiesKHR")
                            (usage nil "If the pname:planeReorderPossible member of the sname:VkDisplayPropertiesKHR structure returned by fname:vkGetPhysicalDeviceDisplayPropertiesKHR for the display corresponding to pname:displayMode is ename:VK_TRUE then pname:planeStackIndex must: be less than the number of display planes supported by the device as determined by calling fname:vkGetPhysicalDeviceDisplayPlanePropertiesKHR; otherwise pname:planeStackIndex must: equal the pname:currentStackIndex member of sname:VkDisplayPlanePropertiesKHR returned by fname:vkGetPhysicalDeviceDisplayPlanePropertiesKHR for the display plane corresponding to pname:displayMode")
                            (usage nil "If pname:alphaMode is ename:VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR then pname:globalAlpha must: be between `0` and `1`, inclusive")
                            (usage nil "pname:alphaMode must: be `0` or one of the bits present in the pname:supportedAlpha member of sname:VkDisplayPlaneCapabilitiesKHR returned by fname:vkGetDisplayPlaneCapabilitiesKHR for the display plane corresponding to pname:displayMode")
                            (usage nil "The pname:width and pname:height members of pname:imageExtent must: be less than the pname:maxImageDimensions2D member of sname:VkPhysicalDeviceLimits")))
                 (type
                  ((category . "struct")
                   (name . "VkDisplayPresentInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member nil
                          (type nil "VkRect2D")
                          (name nil "srcRect"))
                  (comment nil " Rectangle within the presentable image to read pixel data from when presenting to the display. ")
                  (member nil
                          (type nil "VkRect2D")
                          (name nil "dstRect"))
                  (comment nil " Rectangle within the current display mode's visible region to display srcRectangle in. ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "persistent"))
                  (comment nil " For smart displays, use buffered mode.  If the display properties member \"persistentMode\" is VK_FALSE, this member must always be VK_FALSE. ")
                  (validity nil
                            (usage nil "pname:srcRect must: specify a rectangular region that is a subset of the image being presented")
                            (usage nil "pname:dstRect must: specify a rectangular region that is a subset of the pname:visibleRegion parameter of the display mode the swapchain being presented uses")
                            (usage nil "If the pname:persistentContent member of the sname:VkDisplayPropertiesKHR structure returned by fname:vkGetPhysicalDeviceDisplayPropertiesKHR for the display the present operation targets then pname:persistent must: be ename:VK_FALSE")))
                 (type
                  ((category . "struct")
                   (name . "VkSurfaceCapabilitiesKHR"))
                  (member nil
                          (type nil "uint32_t")
                          (name nil "minImageCount"))
                  (comment nil " Supported minimum number of images for the surface ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxImageCount"))
                  (comment nil " Supported maximum number of images for the surface, 0 for unlimited ")
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "currentExtent"))
                  (comment nil " Current image width and height for the surface, (0, 0) if undefined ")
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "minImageExtent"))
                  (comment nil " Supported minimum image width and height for the surface ")
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "maxImageExtent"))
                  (comment nil " Supported maximum image width and height for the surface ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "maxImageArrayLayers"))
                  (comment nil " Supported maximum number of image layers for the surface ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSurfaceTransformFlagsKHR")
                   (name nil "supportedTransforms"))
                  (comment nil " 1 or more bits representing the transforms supported ")
                  (member nil
                          (type nil "VkSurfaceTransformFlagBitsKHR")
                          (name nil "currentTransform"))
                  (comment nil " The surface's current transform relative to the device's natural orientation ")
                  (member
                   ((optional . "true"))
                   (type nil "VkCompositeAlphaFlagsKHR")
                   (name nil "supportedCompositeAlpha"))
                  (comment nil " 1 or more bits representing the alpha compositing modes supported ")
                  (member
                   ((optional . "true"))
                   (type nil "VkImageUsageFlags")
                   (name nil "supportedUsageFlags"))
                  (comment nil " Supported image usage flags for the surface "))
                 (type
                  ((category . "struct")
                   (name . "VkAndroidSurfaceCreateInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkAndroidSurfaceCreateFlagsKHR")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "ANativeWindow")
                          "*                   "
                          (name nil "window"))
                  (validity nil
                            (usage nil "pname:window mustnot: be in a connected state")))
                 (type
                  ((category . "struct")
                   (name . "VkMirSurfaceCreateInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkMirSurfaceCreateFlagsKHR")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "MirConnection")
                          "*                   "
                          (name nil "connection"))
                  (member nil
                          (type nil "MirSurface")
                          "*                      "
                          (name nil "mirSurface")))
                 (type
                  ((category . "struct")
                   (name . "VkWaylandSurfaceCreateInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkWaylandSurfaceCreateFlagsKHR")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil "struct "
                          (type nil "wl_display")
                          "*               "
                          (name nil "display"))
                  (member nil "struct "
                          (type nil "wl_surface")
                          "*               "
                          (name nil "surface")))
                 (type
                  ((category . "struct")
                   (name . "VkWin32SurfaceCreateInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkWin32SurfaceCreateFlagsKHR")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "HINSTANCE")
                          (name nil "hinstance"))
                  (member nil
                          (type nil "HWND")
                          (name nil "hwnd")))
                 (type
                  ((category . "struct")
                   (name . "VkXlibSurfaceCreateInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkXlibSurfaceCreateFlagsKHR")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "Display")
                          "*                         "
                          (name nil "dpy"))
                  (member nil
                          (type nil "Window")
                          (name nil "window")))
                 (type
                  ((category . "struct")
                   (name . "VkXcbSurfaceCreateInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkXcbSurfaceCreateFlagsKHR")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "xcb_connection_t")
                          "*                "
                          (name nil "connection"))
                  (member nil
                          (type nil "xcb_window_t")
                          (name nil "window")))
                 (type
                  ((category . "struct")
                   (name . "VkSurfaceFormatKHR"))
                  (member nil
                          (type nil "VkFormat")
                          (name nil "format"))
                  (comment nil " Supported pair of rendering format ")
                  (member nil
                          (type nil "VkColorSpaceKHR")
                          (name nil "colorSpace"))
                  (comment nil " and colorspace for the surface "))
                 (type
                  ((category . "struct")
                   (name . "VkSwapchainCreateInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSwapchainCreateFlagsKHR")
                   (name nil "flags"))
                  (comment nil " Reserved ")
                  (member nil
                          (type nil "VkSurfaceKHR")
                          (name nil "surface"))
                  (comment nil " The swapchain's target surface ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "minImageCount"))
                  (comment nil " Minimum number of presentation images the application needs ")
                  (member nil
                          (type nil "VkFormat")
                          (name nil "imageFormat"))
                  (comment nil " Format of the presentation images ")
                  (member nil
                          (type nil "VkColorSpaceKHR")
                          (name nil "imageColorSpace"))
                  (comment nil " Colorspace of the presentation images ")
                  (member nil
                          (type nil "VkExtent2D")
                          (name nil "imageExtent"))
                  (comment nil " Dimensions of the presentation images ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "imageArrayLayers"))
                  (comment nil " Determines the number of views for multiview/stereo presentation ")
                  (member nil
                          (type nil "VkImageUsageFlags")
                          (name nil "imageUsage"))
                  (comment nil " Bits indicating how the presentation images will be used ")
                  (member nil
                          (type nil "VkSharingMode")
                          (name nil "imageSharingMode"))
                  (comment nil " Sharing mode used for the presentation images ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "queueFamilyIndexCount"))
                  (comment nil " Number of queue families having access to the images in case of concurrent sharing mode ")
                  (member
                   ((noautovalidity . "true")
                    (len . "queueFamilyIndexCount"))
                   "const "
                   (type nil "uint32_t")
                   "*                  "
                   (name nil "pQueueFamilyIndices"))
                  (comment nil " Array of queue family indices having access to the images in case of concurrent sharing mode ")
                  (member nil
                          (type nil "VkSurfaceTransformFlagBitsKHR")
                          (name nil "preTransform"))
                  (comment nil " The transform, relative to the device's natural orientation, applied to the image content prior to presentation ")
                  (member nil
                          (type nil "VkCompositeAlphaFlagBitsKHR")
                          (name nil "compositeAlpha"))
                  (comment nil " The alpha blending mode used when compositing this surface with other surfaces in the window system ")
                  (member nil
                          (type nil "VkPresentModeKHR")
                          (name nil "presentMode"))
                  (comment nil " Which presentation mode to use for presents on this swap chain ")
                  (member nil
                          (type nil "VkBool32")
                          (name nil "clipped"))
                  (comment nil " Specifies whether presentable images may be affected by window clip regions ")
                  (member
                   ((optional . "true"))
                   (type nil "VkSwapchainKHR")
                   (name nil "oldSwapchain"))
                  (comment nil " Existing swap chain to replace, if any ")
                  (validity nil
                            (usage nil "pname:surface must: be a surface that is supported by the device as determined using fname:vkGetPhysicalDeviceSurfaceSupportKHR")
                            (usage nil "The native window referred to by pname:surface mustnot: already be associated with a swapchain other than pname:oldSwapchain, or with a non-{apiname} graphics API surface")
                            (usage nil "pname:minImageCount must: be greater than or equal to the value returned in the pname:minImageCount member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface")
                            (usage nil "pname:minImageCount must: be less than or equal to the value returned in the pname:maxImageCount member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface if the returned pname:maxImageCount is not zero")
                            (usage nil "pname:imageFormat and pname:imageColorspace must: match the pname:format and pname:colorSpace members, respectively, of one of the sname:VkSurfaceFormatKHR structures returned by fname:vkGetPhysicalDeviceSurfaceFormatsKHR for the surface")
                            (usage nil "pname:imageExtent must: be between pname:minImageExtent and pname:maxImageExtent, inclusive, where pname:minImageExtent and pname:maxImageExtent are members of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface")
                            (usage nil "pname:imageArrayLayers must: be greater than `0` and less than or equal to the pname:maxImageArrayLayers member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface")
                            (usage nil "pname:imageUsage must: be a subset of the supported usage flags present in the pname:supportedUsageFlags member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface")
                            (usage nil "If pname:imageSharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:pQueueFamilyIndices must: be a pointer to an array of pname:queueFamilyIndexCount basetype:uint32_t values")
                            (usage nil "If pname:imageSharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:queueFamilyIndexCount must: be greater than `1`")
                            (usage nil "pname:preTransform must: be one of the bits present in the pname:supportedTransforms member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface")
                            (usage nil "pname:compositeAlpha must: be one of the bits present in the pname:supportedCompositeAlpha member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface")
                            (usage nil "pname:presentMode must: be one of the ename:VkPresentModeKHR values returned by fname:vkGetPhysicalDeviceSurfacePresentModesKHR for the surface")))
                 (type
                  ((category . "struct")
                   (name . "VkPresentInfoKHR"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_PRESENT_INFO_KHR ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member
                   ((optional . "true"))
                   (type nil "uint32_t")
                   (name nil "waitSemaphoreCount"))
                  (comment nil " Number of semaphores to wait for before presenting ")
                  (member
                   ((optional . "true")
                    (len . "waitSemaphoreCount"))
                   "const "
                   (type nil "VkSemaphore")
                   "* "
                   (name nil "pWaitSemaphores"))
                  (comment nil " Semaphores to wait for before presenting ")
                  (member nil
                          (type nil "uint32_t")
                          (name nil "swapchainCount"))
                  (comment nil " Number of swap chains to present in this call ")
                  (member
                   ((len . "swapchainCount"))
                   "const "
                   (type nil "VkSwapchainKHR")
                   "* "
                   (name nil "pSwapchains"))
                  (comment nil " Swapchains to present an image from ")
                  (member
                   ((len . "swapchainCount"))
                   "const "
                   (type nil "uint32_t")
                   "* "
                   (name nil "pImageIndices"))
                  (comment nil " Indices of which swapchain images to present ")
                  (member
                   ((optional . "true")
                    (len . "swapchainCount"))
                   (type nil "VkResult")
                   "* "
                   (name nil "pResults"))
                  (comment nil " Optional (i.e. if non-NULL) VkResult for each swapchain ")
                  (validity nil
                            (usage nil "Any given element of pname:pImageIndices must: be the index of a presentable image acquired from the swapchain specified by the corresponding element of the pname:pSwapchains array")
                            (usage nil "Any given element of sname:VkSemaphore in pname:pWaitSemaphores must: refer to a prior signal of that sname:VkSemaphore that won't be consumed by any other wait on that semaphore")))
                 (type
                  ((category . "struct")
                   (name . "VkDebugReportCallbackCreateInfoEXT"))
                  (member nil
                          (type nil "VkStructureType")
                          (name nil "sType"))
                  (comment nil " Must be VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT ")
                  (member nil "const "
                          (type nil "void")
                          "*                      "
                          (name nil "pNext"))
                  (comment nil " Pointer to next structure ")
                  (member nil
                          (type nil "VkDebugReportFlagsEXT")
                          (name nil "flags"))
                  (comment nil " Indicates which events call this callback")
                  (member nil
                          (type nil "PFN_vkDebugReportCallbackEXT")
                          (name nil "pfnCallback"))
                  (comment nil " Function pointer of a callback function")
                  (member
                   ((optional . "true"))
                   (type nil "void")
                   "*            "
                   (name nil "pUserData"))
                  (comment nil " User data provided to callback function ")))
          (comment nil " SECTION: Vulkan enumerant (token) definitions. ")
          (enums
           ((name . "API Constants")
            (comment . "Misc. hardcoded constants - not an enumerated type"))
           (comment nil " This is part of the header boilerplate ")
           (enum
            ((value . "256")
             (name . "VK_MAX_PHYSICAL_DEVICE_NAME_SIZE")))
           (enum
            ((value . "16")
             (name . "VK_UUID_SIZE")))
           (enum
            ((value . "256")
             (name . "VK_MAX_EXTENSION_NAME_SIZE")))
           (enum
            ((value . "256")
             (name . "VK_MAX_DESCRIPTION_SIZE")))
           (enum
            ((value . "32")
             (name . "VK_MAX_MEMORY_TYPES")))
           (enum
            ((value . "16")
             (name . "VK_MAX_MEMORY_HEAPS")))
           (comment nil " The maximum number of unique memory heaps, each of which supporting 1 or more memory types. ")
           (enum
            ((value . "1000.0f")
             (name . "VK_LOD_CLAMP_NONE")))
           (enum
            ((value . "(~0U)")
             (name . "VK_REMAINING_MIP_LEVELS")))
           (enum
            ((value . "(~0U)")
             (name . "VK_REMAINING_ARRAY_LAYERS")))
           (enum
            ((value . "(~0ULL)")
             (name . "VK_WHOLE_SIZE")))
           (enum
            ((value . "(~0U)")
             (name . "VK_ATTACHMENT_UNUSED")))
           (enum
            ((value . "1")
             (name . "VK_TRUE")))
           (enum
            ((value . "0")
             (name . "VK_FALSE")))
           (enum
            ((value . "(~0U)")
             (name . "VK_QUEUE_FAMILY_IGNORED")))
           (enum
            ((value . "(~0U)")
             (name . "VK_SUBPASS_EXTERNAL"))))
          (comment nil " Unlike OpenGL, most tokens in Vulkan are actual typed enumerants in\n         their own numeric namespaces. The \"name\" attribute is the C enum\n         type name, and is pulled in from a <type> definition above\n         (slightly clunky, but retains the type / enum distinction). \"type\"\n         attributes of \"enum\" or \"bitmask\" indicate that these values should\n         be generated inside an appropriate definition. ")
          (enums
           ((name . "VkImageLayout")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_IMAGE_LAYOUT_UNDEFINED")
             (comment . "Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)")))
           (enum
            ((value . "1")
             (name . "VK_IMAGE_LAYOUT_GENERAL")
             (comment . "General layout when image can be used for any kind of access")))
           (enum
            ((value . "2")
             (name . "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL")
             (comment . "Optimal layout when image is only used for color attachment read/write")))
           (enum
            ((value . "3")
             (name . "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL")
             (comment . "Optimal layout when image is only used for depth/stencil attachment read/write")))
           (enum
            ((value . "4")
             (name . "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL")
             (comment . "Optimal layout when image is used for read only depth/stencil attachment and shader access")))
           (enum
            ((value . "5")
             (name . "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL")
             (comment . "Optimal layout when image is used for read only shader access")))
           (enum
            ((value . "6")
             (name . "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL")
             (comment . "Optimal layout when image is used only as source of transfer operations")))
           (enum
            ((value . "7")
             (name . "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL")
             (comment . "Optimal layout when image is used only as destination of transfer operations")))
           (enum
            ((value . "8")
             (name . "VK_IMAGE_LAYOUT_PREINITIALIZED")
             (comment . "Initial layout used when the data is populated by the CPU"))))
          (enums
           ((name . "VkAttachmentLoadOp")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_ATTACHMENT_LOAD_OP_LOAD")))
           (enum
            ((value . "1")
             (name . "VK_ATTACHMENT_LOAD_OP_CLEAR")))
           (enum
            ((value . "2")
             (name . "VK_ATTACHMENT_LOAD_OP_DONT_CARE"))))
          (enums
           ((name . "VkAttachmentStoreOp")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_ATTACHMENT_STORE_OP_STORE")))
           (enum
            ((value . "1")
             (name . "VK_ATTACHMENT_STORE_OP_DONT_CARE"))))
          (enums
           ((name . "VkImageType")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_IMAGE_TYPE_1D")))
           (enum
            ((value . "1")
             (name . "VK_IMAGE_TYPE_2D")))
           (enum
            ((value . "2")
             (name . "VK_IMAGE_TYPE_3D"))))
          (enums
           ((name . "VkImageTiling")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_IMAGE_TILING_OPTIMAL")))
           (enum
            ((value . "1")
             (name . "VK_IMAGE_TILING_LINEAR"))))
          (enums
           ((name . "VkImageViewType")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_IMAGE_VIEW_TYPE_1D")))
           (enum
            ((value . "1")
             (name . "VK_IMAGE_VIEW_TYPE_2D")))
           (enum
            ((value . "2")
             (name . "VK_IMAGE_VIEW_TYPE_3D")))
           (enum
            ((value . "3")
             (name . "VK_IMAGE_VIEW_TYPE_CUBE")))
           (enum
            ((value . "4")
             (name . "VK_IMAGE_VIEW_TYPE_1D_ARRAY")))
           (enum
            ((value . "5")
             (name . "VK_IMAGE_VIEW_TYPE_2D_ARRAY")))
           (enum
            ((value . "6")
             (name . "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"))))
          (enums
           ((name . "VkCommandBufferLevel")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_COMMAND_BUFFER_LEVEL_PRIMARY")))
           (enum
            ((value . "1")
             (name . "VK_COMMAND_BUFFER_LEVEL_SECONDARY"))))
          (enums
           ((name . "VkComponentSwizzle")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_COMPONENT_SWIZZLE_IDENTITY")))
           (enum
            ((value . "1")
             (name . "VK_COMPONENT_SWIZZLE_ZERO")))
           (enum
            ((value . "2")
             (name . "VK_COMPONENT_SWIZZLE_ONE")))
           (enum
            ((value . "3")
             (name . "VK_COMPONENT_SWIZZLE_R")))
           (enum
            ((value . "4")
             (name . "VK_COMPONENT_SWIZZLE_G")))
           (enum
            ((value . "5")
             (name . "VK_COMPONENT_SWIZZLE_B")))
           (enum
            ((value . "6")
             (name . "VK_COMPONENT_SWIZZLE_A"))))
          (enums
           ((name . "VkDescriptorType")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_DESCRIPTOR_TYPE_SAMPLER")))
           (enum
            ((value . "1")
             (name . "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER")))
           (enum
            ((value . "2")
             (name . "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE")))
           (enum
            ((value . "3")
             (name . "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE")))
           (enum
            ((value . "4")
             (name . "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER")))
           (enum
            ((value . "5")
             (name . "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER")))
           (enum
            ((value . "6")
             (name . "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER")))
           (enum
            ((value . "7")
             (name . "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER")))
           (enum
            ((value . "8")
             (name . "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC")))
           (enum
            ((value . "9")
             (name . "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC")))
           (enum
            ((value . "10")
             (name . "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT"))))
          (enums
           ((name . "VkQueryType")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_QUERY_TYPE_OCCLUSION")))
           (enum
            ((value . "1")
             (name . "VK_QUERY_TYPE_PIPELINE_STATISTICS")
             (comment . "Optional")))
           (enum
            ((value . "2")
             (name . "VK_QUERY_TYPE_TIMESTAMP"))))
          (enums
           ((name . "VkBorderColor")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK")))
           (enum
            ((value . "1")
             (name . "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK")))
           (enum
            ((value . "2")
             (name . "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK")))
           (enum
            ((value . "3")
             (name . "VK_BORDER_COLOR_INT_OPAQUE_BLACK")))
           (enum
            ((value . "4")
             (name . "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE")))
           (enum
            ((value . "5")
             (name . "VK_BORDER_COLOR_INT_OPAQUE_WHITE"))))
          (enums
           ((name . "VkPipelineBindPoint")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_PIPELINE_BIND_POINT_GRAPHICS")))
           (enum
            ((value . "1")
             (name . "VK_PIPELINE_BIND_POINT_COMPUTE"))))
          (enums
           ((name . "VkPipelineCacheHeaderVersion")
            (type . "enum"))
           (enum
            ((value . "1")
             (name . "VK_PIPELINE_CACHE_HEADER_VERSION_ONE"))))
          (enums
           ((name . "VkPrimitiveTopology")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_PRIMITIVE_TOPOLOGY_POINT_LIST")))
           (enum
            ((value . "1")
             (name . "VK_PRIMITIVE_TOPOLOGY_LINE_LIST")))
           (enum
            ((value . "2")
             (name . "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP")))
           (enum
            ((value . "3")
             (name . "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST")))
           (enum
            ((value . "4")
             (name . "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP")))
           (enum
            ((value . "5")
             (name . "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN")))
           (enum
            ((value . "6")
             (name . "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY")))
           (enum
            ((value . "7")
             (name . "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY")))
           (enum
            ((value . "8")
             (name . "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY")))
           (enum
            ((value . "9")
             (name . "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY")))
           (enum
            ((value . "10")
             (name . "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"))))
          (enums
           ((name . "VkSharingMode")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_SHARING_MODE_EXCLUSIVE")))
           (enum
            ((value . "1")
             (name . "VK_SHARING_MODE_CONCURRENT"))))
          (enums
           ((name . "VkIndexType")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_INDEX_TYPE_UINT16")))
           (enum
            ((value . "1")
             (name . "VK_INDEX_TYPE_UINT32"))))
          (enums
           ((name . "VkFilter")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_FILTER_NEAREST")))
           (enum
            ((value . "1")
             (name . "VK_FILTER_LINEAR"))))
          (enums
           ((name . "VkSamplerMipmapMode")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_SAMPLER_MIPMAP_MODE_NEAREST")
             (comment . "Choose nearest mip level")))
           (enum
            ((value . "1")
             (name . "VK_SAMPLER_MIPMAP_MODE_LINEAR")
             (comment . "Linear filter between mip levels"))))
          (enums
           ((name . "VkSamplerAddressMode")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_SAMPLER_ADDRESS_MODE_REPEAT")))
           (enum
            ((value . "1")
             (name . "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT")))
           (enum
            ((value . "2")
             (name . "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE")))
           (enum
            ((value . "3")
             (name . "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER")))
           (comment nil " <enum value=\"4\"     name=\"VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE\" comment=\"Reserved for VK_KHR_sampler_mirror_clamp_to_edge, do not alias!\"/> "))
          (enums
           ((name . "VkCompareOp")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_COMPARE_OP_NEVER")))
           (enum
            ((value . "1")
             (name . "VK_COMPARE_OP_LESS")))
           (enum
            ((value . "2")
             (name . "VK_COMPARE_OP_EQUAL")))
           (enum
            ((value . "3")
             (name . "VK_COMPARE_OP_LESS_OR_EQUAL")))
           (enum
            ((value . "4")
             (name . "VK_COMPARE_OP_GREATER")))
           (enum
            ((value . "5")
             (name . "VK_COMPARE_OP_NOT_EQUAL")))
           (enum
            ((value . "6")
             (name . "VK_COMPARE_OP_GREATER_OR_EQUAL")))
           (enum
            ((value . "7")
             (name . "VK_COMPARE_OP_ALWAYS"))))
          (enums
           ((name . "VkPolygonMode")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_POLYGON_MODE_FILL")))
           (enum
            ((value . "1")
             (name . "VK_POLYGON_MODE_LINE")))
           (enum
            ((value . "2")
             (name . "VK_POLYGON_MODE_POINT"))))
          (enums
           ((name . "VkCullModeFlagBits")
            (type . "bitmask"))
           (enum
            ((value . "0")
             (name . "VK_CULL_MODE_NONE")))
           (enum
            ((bitpos . "0")
             (name . "VK_CULL_MODE_FRONT_BIT")))
           (enum
            ((bitpos . "1")
             (name . "VK_CULL_MODE_BACK_BIT")))
           (enum
            ((value . "0x00000003")
             (name . "VK_CULL_MODE_FRONT_AND_BACK"))))
          (enums
           ((name . "VkFrontFace")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_FRONT_FACE_COUNTER_CLOCKWISE")))
           (enum
            ((value . "1")
             (name . "VK_FRONT_FACE_CLOCKWISE"))))
          (enums
           ((name . "VkBlendFactor")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_BLEND_FACTOR_ZERO")))
           (enum
            ((value . "1")
             (name . "VK_BLEND_FACTOR_ONE")))
           (enum
            ((value . "2")
             (name . "VK_BLEND_FACTOR_SRC_COLOR")))
           (enum
            ((value . "3")
             (name . "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR")))
           (enum
            ((value . "4")
             (name . "VK_BLEND_FACTOR_DST_COLOR")))
           (enum
            ((value . "5")
             (name . "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR")))
           (enum
            ((value . "6")
             (name . "VK_BLEND_FACTOR_SRC_ALPHA")))
           (enum
            ((value . "7")
             (name . "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA")))
           (enum
            ((value . "8")
             (name . "VK_BLEND_FACTOR_DST_ALPHA")))
           (enum
            ((value . "9")
             (name . "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA")))
           (enum
            ((value . "10")
             (name . "VK_BLEND_FACTOR_CONSTANT_COLOR")))
           (enum
            ((value . "11")
             (name . "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR")))
           (enum
            ((value . "12")
             (name . "VK_BLEND_FACTOR_CONSTANT_ALPHA")))
           (enum
            ((value . "13")
             (name . "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA")))
           (enum
            ((value . "14")
             (name . "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE")))
           (enum
            ((value . "15")
             (name . "VK_BLEND_FACTOR_SRC1_COLOR")))
           (enum
            ((value . "16")
             (name . "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR")))
           (enum
            ((value . "17")
             (name . "VK_BLEND_FACTOR_SRC1_ALPHA")))
           (enum
            ((value . "18")
             (name . "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"))))
          (enums
           ((name . "VkBlendOp")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_BLEND_OP_ADD")))
           (enum
            ((value . "1")
             (name . "VK_BLEND_OP_SUBTRACT")))
           (enum
            ((value . "2")
             (name . "VK_BLEND_OP_REVERSE_SUBTRACT")))
           (enum
            ((value . "3")
             (name . "VK_BLEND_OP_MIN")))
           (enum
            ((value . "4")
             (name . "VK_BLEND_OP_MAX"))))
          (enums
           ((name . "VkStencilOp")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_STENCIL_OP_KEEP")))
           (enum
            ((value . "1")
             (name . "VK_STENCIL_OP_ZERO")))
           (enum
            ((value . "2")
             (name . "VK_STENCIL_OP_REPLACE")))
           (enum
            ((value . "3")
             (name . "VK_STENCIL_OP_INCREMENT_AND_CLAMP")))
           (enum
            ((value . "4")
             (name . "VK_STENCIL_OP_DECREMENT_AND_CLAMP")))
           (enum
            ((value . "5")
             (name . "VK_STENCIL_OP_INVERT")))
           (enum
            ((value . "6")
             (name . "VK_STENCIL_OP_INCREMENT_AND_WRAP")))
           (enum
            ((value . "7")
             (name . "VK_STENCIL_OP_DECREMENT_AND_WRAP"))))
          (enums
           ((name . "VkLogicOp")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_LOGIC_OP_CLEAR")))
           (enum
            ((value . "1")
             (name . "VK_LOGIC_OP_AND")))
           (enum
            ((value . "2")
             (name . "VK_LOGIC_OP_AND_REVERSE")))
           (enum
            ((value . "3")
             (name . "VK_LOGIC_OP_COPY")))
           (enum
            ((value . "4")
             (name . "VK_LOGIC_OP_AND_INVERTED")))
           (enum
            ((value . "5")
             (name . "VK_LOGIC_OP_NO_OP")))
           (enum
            ((value . "6")
             (name . "VK_LOGIC_OP_XOR")))
           (enum
            ((value . "7")
             (name . "VK_LOGIC_OP_OR")))
           (enum
            ((value . "8")
             (name . "VK_LOGIC_OP_NOR")))
           (enum
            ((value . "9")
             (name . "VK_LOGIC_OP_EQUIVALENT")))
           (enum
            ((value . "10")
             (name . "VK_LOGIC_OP_INVERT")))
           (enum
            ((value . "11")
             (name . "VK_LOGIC_OP_OR_REVERSE")))
           (enum
            ((value . "12")
             (name . "VK_LOGIC_OP_COPY_INVERTED")))
           (enum
            ((value . "13")
             (name . "VK_LOGIC_OP_OR_INVERTED")))
           (enum
            ((value . "14")
             (name . "VK_LOGIC_OP_NAND")))
           (enum
            ((value . "15")
             (name . "VK_LOGIC_OP_SET"))))
          (enums
           ((name . "VkInternalAllocationType")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE"))))
          (enums
           ((name . "VkSystemAllocationScope")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND")))
           (enum
            ((value . "1")
             (name . "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT")))
           (enum
            ((value . "2")
             (name . "VK_SYSTEM_ALLOCATION_SCOPE_CACHE")))
           (enum
            ((value . "3")
             (name . "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE")))
           (enum
            ((value . "4")
             (name . "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE"))))
          (enums
           ((name . "VkPhysicalDeviceType")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_PHYSICAL_DEVICE_TYPE_OTHER")))
           (enum
            ((value . "1")
             (name . "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU")))
           (enum
            ((value . "2")
             (name . "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU")))
           (enum
            ((value . "3")
             (name . "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU")))
           (enum
            ((value . "4")
             (name . "VK_PHYSICAL_DEVICE_TYPE_CPU"))))
          (enums
           ((name . "VkVertexInputRate")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_VERTEX_INPUT_RATE_VERTEX")))
           (enum
            ((value . "1")
             (name . "VK_VERTEX_INPUT_RATE_INSTANCE"))))
          (enums
           ((name . "VkFormat")
            (type . "enum")
            (comment . "Vulkan format definitions"))
           (enum
            ((value . "0")
             (name . "VK_FORMAT_UNDEFINED")))
           (enum
            ((value . "1")
             (name . "VK_FORMAT_R4G4_UNORM_PACK8")))
           (enum
            ((value . "2")
             (name . "VK_FORMAT_R4G4B4A4_UNORM_PACK16")))
           (enum
            ((value . "3")
             (name . "VK_FORMAT_B4G4R4A4_UNORM_PACK16")))
           (enum
            ((value . "4")
             (name . "VK_FORMAT_R5G6B5_UNORM_PACK16")))
           (enum
            ((value . "5")
             (name . "VK_FORMAT_B5G6R5_UNORM_PACK16")))
           (enum
            ((value . "6")
             (name . "VK_FORMAT_R5G5B5A1_UNORM_PACK16")))
           (enum
            ((value . "7")
             (name . "VK_FORMAT_B5G5R5A1_UNORM_PACK16")))
           (enum
            ((value . "8")
             (name . "VK_FORMAT_A1R5G5B5_UNORM_PACK16")))
           (enum
            ((value . "9")
             (name . "VK_FORMAT_R8_UNORM")))
           (enum
            ((value . "10")
             (name . "VK_FORMAT_R8_SNORM")))
           (enum
            ((value . "11")
             (name . "VK_FORMAT_R8_USCALED")))
           (enum
            ((value . "12")
             (name . "VK_FORMAT_R8_SSCALED")))
           (enum
            ((value . "13")
             (name . "VK_FORMAT_R8_UINT")))
           (enum
            ((value . "14")
             (name . "VK_FORMAT_R8_SINT")))
           (enum
            ((value . "15")
             (name . "VK_FORMAT_R8_SRGB")))
           (enum
            ((value . "16")
             (name . "VK_FORMAT_R8G8_UNORM")))
           (enum
            ((value . "17")
             (name . "VK_FORMAT_R8G8_SNORM")))
           (enum
            ((value . "18")
             (name . "VK_FORMAT_R8G8_USCALED")))
           (enum
            ((value . "19")
             (name . "VK_FORMAT_R8G8_SSCALED")))
           (enum
            ((value . "20")
             (name . "VK_FORMAT_R8G8_UINT")))
           (enum
            ((value . "21")
             (name . "VK_FORMAT_R8G8_SINT")))
           (enum
            ((value . "22")
             (name . "VK_FORMAT_R8G8_SRGB")))
           (enum
            ((value . "23")
             (name . "VK_FORMAT_R8G8B8_UNORM")))
           (enum
            ((value . "24")
             (name . "VK_FORMAT_R8G8B8_SNORM")))
           (enum
            ((value . "25")
             (name . "VK_FORMAT_R8G8B8_USCALED")))
           (enum
            ((value . "26")
             (name . "VK_FORMAT_R8G8B8_SSCALED")))
           (enum
            ((value . "27")
             (name . "VK_FORMAT_R8G8B8_UINT")))
           (enum
            ((value . "28")
             (name . "VK_FORMAT_R8G8B8_SINT")))
           (enum
            ((value . "29")
             (name . "VK_FORMAT_R8G8B8_SRGB")))
           (enum
            ((value . "30")
             (name . "VK_FORMAT_B8G8R8_UNORM")))
           (enum
            ((value . "31")
             (name . "VK_FORMAT_B8G8R8_SNORM")))
           (enum
            ((value . "32")
             (name . "VK_FORMAT_B8G8R8_USCALED")))
           (enum
            ((value . "33")
             (name . "VK_FORMAT_B8G8R8_SSCALED")))
           (enum
            ((value . "34")
             (name . "VK_FORMAT_B8G8R8_UINT")))
           (enum
            ((value . "35")
             (name . "VK_FORMAT_B8G8R8_SINT")))
           (enum
            ((value . "36")
             (name . "VK_FORMAT_B8G8R8_SRGB")))
           (enum
            ((value . "37")
             (name . "VK_FORMAT_R8G8B8A8_UNORM")))
           (enum
            ((value . "38")
             (name . "VK_FORMAT_R8G8B8A8_SNORM")))
           (enum
            ((value . "39")
             (name . "VK_FORMAT_R8G8B8A8_USCALED")))
           (enum
            ((value . "40")
             (name . "VK_FORMAT_R8G8B8A8_SSCALED")))
           (enum
            ((value . "41")
             (name . "VK_FORMAT_R8G8B8A8_UINT")))
           (enum
            ((value . "42")
             (name . "VK_FORMAT_R8G8B8A8_SINT")))
           (enum
            ((value . "43")
             (name . "VK_FORMAT_R8G8B8A8_SRGB")))
           (enum
            ((value . "44")
             (name . "VK_FORMAT_B8G8R8A8_UNORM")))
           (enum
            ((value . "45")
             (name . "VK_FORMAT_B8G8R8A8_SNORM")))
           (enum
            ((value . "46")
             (name . "VK_FORMAT_B8G8R8A8_USCALED")))
           (enum
            ((value . "47")
             (name . "VK_FORMAT_B8G8R8A8_SSCALED")))
           (enum
            ((value . "48")
             (name . "VK_FORMAT_B8G8R8A8_UINT")))
           (enum
            ((value . "49")
             (name . "VK_FORMAT_B8G8R8A8_SINT")))
           (enum
            ((value . "50")
             (name . "VK_FORMAT_B8G8R8A8_SRGB")))
           (enum
            ((value . "51")
             (name . "VK_FORMAT_A8B8G8R8_UNORM_PACK32")))
           (enum
            ((value . "52")
             (name . "VK_FORMAT_A8B8G8R8_SNORM_PACK32")))
           (enum
            ((value . "53")
             (name . "VK_FORMAT_A8B8G8R8_USCALED_PACK32")))
           (enum
            ((value . "54")
             (name . "VK_FORMAT_A8B8G8R8_SSCALED_PACK32")))
           (enum
            ((value . "55")
             (name . "VK_FORMAT_A8B8G8R8_UINT_PACK32")))
           (enum
            ((value . "56")
             (name . "VK_FORMAT_A8B8G8R8_SINT_PACK32")))
           (enum
            ((value . "57")
             (name . "VK_FORMAT_A8B8G8R8_SRGB_PACK32")))
           (enum
            ((value . "58")
             (name . "VK_FORMAT_A2R10G10B10_UNORM_PACK32")))
           (enum
            ((value . "59")
             (name . "VK_FORMAT_A2R10G10B10_SNORM_PACK32")))
           (enum
            ((value . "60")
             (name . "VK_FORMAT_A2R10G10B10_USCALED_PACK32")))
           (enum
            ((value . "61")
             (name . "VK_FORMAT_A2R10G10B10_SSCALED_PACK32")))
           (enum
            ((value . "62")
             (name . "VK_FORMAT_A2R10G10B10_UINT_PACK32")))
           (enum
            ((value . "63")
             (name . "VK_FORMAT_A2R10G10B10_SINT_PACK32")))
           (enum
            ((value . "64")
             (name . "VK_FORMAT_A2B10G10R10_UNORM_PACK32")))
           (enum
            ((value . "65")
             (name . "VK_FORMAT_A2B10G10R10_SNORM_PACK32")))
           (enum
            ((value . "66")
             (name . "VK_FORMAT_A2B10G10R10_USCALED_PACK32")))
           (enum
            ((value . "67")
             (name . "VK_FORMAT_A2B10G10R10_SSCALED_PACK32")))
           (enum
            ((value . "68")
             (name . "VK_FORMAT_A2B10G10R10_UINT_PACK32")))
           (enum
            ((value . "69")
             (name . "VK_FORMAT_A2B10G10R10_SINT_PACK32")))
           (enum
            ((value . "70")
             (name . "VK_FORMAT_R16_UNORM")))
           (enum
            ((value . "71")
             (name . "VK_FORMAT_R16_SNORM")))
           (enum
            ((value . "72")
             (name . "VK_FORMAT_R16_USCALED")))
           (enum
            ((value . "73")
             (name . "VK_FORMAT_R16_SSCALED")))
           (enum
            ((value . "74")
             (name . "VK_FORMAT_R16_UINT")))
           (enum
            ((value . "75")
             (name . "VK_FORMAT_R16_SINT")))
           (enum
            ((value . "76")
             (name . "VK_FORMAT_R16_SFLOAT")))
           (enum
            ((value . "77")
             (name . "VK_FORMAT_R16G16_UNORM")))
           (enum
            ((value . "78")
             (name . "VK_FORMAT_R16G16_SNORM")))
           (enum
            ((value . "79")
             (name . "VK_FORMAT_R16G16_USCALED")))
           (enum
            ((value . "80")
             (name . "VK_FORMAT_R16G16_SSCALED")))
           (enum
            ((value . "81")
             (name . "VK_FORMAT_R16G16_UINT")))
           (enum
            ((value . "82")
             (name . "VK_FORMAT_R16G16_SINT")))
           (enum
            ((value . "83")
             (name . "VK_FORMAT_R16G16_SFLOAT")))
           (enum
            ((value . "84")
             (name . "VK_FORMAT_R16G16B16_UNORM")))
           (enum
            ((value . "85")
             (name . "VK_FORMAT_R16G16B16_SNORM")))
           (enum
            ((value . "86")
             (name . "VK_FORMAT_R16G16B16_USCALED")))
           (enum
            ((value . "87")
             (name . "VK_FORMAT_R16G16B16_SSCALED")))
           (enum
            ((value . "88")
             (name . "VK_FORMAT_R16G16B16_UINT")))
           (enum
            ((value . "89")
             (name . "VK_FORMAT_R16G16B16_SINT")))
           (enum
            ((value . "90")
             (name . "VK_FORMAT_R16G16B16_SFLOAT")))
           (enum
            ((value . "91")
             (name . "VK_FORMAT_R16G16B16A16_UNORM")))
           (enum
            ((value . "92")
             (name . "VK_FORMAT_R16G16B16A16_SNORM")))
           (enum
            ((value . "93")
             (name . "VK_FORMAT_R16G16B16A16_USCALED")))
           (enum
            ((value . "94")
             (name . "VK_FORMAT_R16G16B16A16_SSCALED")))
           (enum
            ((value . "95")
             (name . "VK_FORMAT_R16G16B16A16_UINT")))
           (enum
            ((value . "96")
             (name . "VK_FORMAT_R16G16B16A16_SINT")))
           (enum
            ((value . "97")
             (name . "VK_FORMAT_R16G16B16A16_SFLOAT")))
           (enum
            ((value . "98")
             (name . "VK_FORMAT_R32_UINT")))
           (enum
            ((value . "99")
             (name . "VK_FORMAT_R32_SINT")))
           (enum
            ((value . "100")
             (name . "VK_FORMAT_R32_SFLOAT")))
           (enum
            ((value . "101")
             (name . "VK_FORMAT_R32G32_UINT")))
           (enum
            ((value . "102")
             (name . "VK_FORMAT_R32G32_SINT")))
           (enum
            ((value . "103")
             (name . "VK_FORMAT_R32G32_SFLOAT")))
           (enum
            ((value . "104")
             (name . "VK_FORMAT_R32G32B32_UINT")))
           (enum
            ((value . "105")
             (name . "VK_FORMAT_R32G32B32_SINT")))
           (enum
            ((value . "106")
             (name . "VK_FORMAT_R32G32B32_SFLOAT")))
           (enum
            ((value . "107")
             (name . "VK_FORMAT_R32G32B32A32_UINT")))
           (enum
            ((value . "108")
             (name . "VK_FORMAT_R32G32B32A32_SINT")))
           (enum
            ((value . "109")
             (name . "VK_FORMAT_R32G32B32A32_SFLOAT")))
           (enum
            ((value . "110")
             (name . "VK_FORMAT_R64_UINT")))
           (enum
            ((value . "111")
             (name . "VK_FORMAT_R64_SINT")))
           (enum
            ((value . "112")
             (name . "VK_FORMAT_R64_SFLOAT")))
           (enum
            ((value . "113")
             (name . "VK_FORMAT_R64G64_UINT")))
           (enum
            ((value . "114")
             (name . "VK_FORMAT_R64G64_SINT")))
           (enum
            ((value . "115")
             (name . "VK_FORMAT_R64G64_SFLOAT")))
           (enum
            ((value . "116")
             (name . "VK_FORMAT_R64G64B64_UINT")))
           (enum
            ((value . "117")
             (name . "VK_FORMAT_R64G64B64_SINT")))
           (enum
            ((value . "118")
             (name . "VK_FORMAT_R64G64B64_SFLOAT")))
           (enum
            ((value . "119")
             (name . "VK_FORMAT_R64G64B64A64_UINT")))
           (enum
            ((value . "120")
             (name . "VK_FORMAT_R64G64B64A64_SINT")))
           (enum
            ((value . "121")
             (name . "VK_FORMAT_R64G64B64A64_SFLOAT")))
           (enum
            ((value . "122")
             (name . "VK_FORMAT_B10G11R11_UFLOAT_PACK32")))
           (enum
            ((value . "123")
             (name . "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32")))
           (enum
            ((value . "124")
             (name . "VK_FORMAT_D16_UNORM")))
           (enum
            ((value . "125")
             (name . "VK_FORMAT_X8_D24_UNORM_PACK32")))
           (enum
            ((value . "126")
             (name . "VK_FORMAT_D32_SFLOAT")))
           (enum
            ((value . "127")
             (name . "VK_FORMAT_S8_UINT")))
           (enum
            ((value . "128")
             (name . "VK_FORMAT_D16_UNORM_S8_UINT")))
           (enum
            ((value . "129")
             (name . "VK_FORMAT_D24_UNORM_S8_UINT")))
           (enum
            ((value . "130")
             (name . "VK_FORMAT_D32_SFLOAT_S8_UINT")))
           (enum
            ((value . "131")
             (name . "VK_FORMAT_BC1_RGB_UNORM_BLOCK")))
           (enum
            ((value . "132")
             (name . "VK_FORMAT_BC1_RGB_SRGB_BLOCK")))
           (enum
            ((value . "133")
             (name . "VK_FORMAT_BC1_RGBA_UNORM_BLOCK")))
           (enum
            ((value . "134")
             (name . "VK_FORMAT_BC1_RGBA_SRGB_BLOCK")))
           (enum
            ((value . "135")
             (name . "VK_FORMAT_BC2_UNORM_BLOCK")))
           (enum
            ((value . "136")
             (name . "VK_FORMAT_BC2_SRGB_BLOCK")))
           (enum
            ((value . "137")
             (name . "VK_FORMAT_BC3_UNORM_BLOCK")))
           (enum
            ((value . "138")
             (name . "VK_FORMAT_BC3_SRGB_BLOCK")))
           (enum
            ((value . "139")
             (name . "VK_FORMAT_BC4_UNORM_BLOCK")))
           (enum
            ((value . "140")
             (name . "VK_FORMAT_BC4_SNORM_BLOCK")))
           (enum
            ((value . "141")
             (name . "VK_FORMAT_BC5_UNORM_BLOCK")))
           (enum
            ((value . "142")
             (name . "VK_FORMAT_BC5_SNORM_BLOCK")))
           (enum
            ((value . "143")
             (name . "VK_FORMAT_BC6H_UFLOAT_BLOCK")))
           (enum
            ((value . "144")
             (name . "VK_FORMAT_BC6H_SFLOAT_BLOCK")))
           (enum
            ((value . "145")
             (name . "VK_FORMAT_BC7_UNORM_BLOCK")))
           (enum
            ((value . "146")
             (name . "VK_FORMAT_BC7_SRGB_BLOCK")))
           (enum
            ((value . "147")
             (name . "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK")))
           (enum
            ((value . "148")
             (name . "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK")))
           (enum
            ((value . "149")
             (name . "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK")))
           (enum
            ((value . "150")
             (name . "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK")))
           (enum
            ((value . "151")
             (name . "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK")))
           (enum
            ((value . "152")
             (name . "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK")))
           (enum
            ((value . "153")
             (name . "VK_FORMAT_EAC_R11_UNORM_BLOCK")))
           (enum
            ((value . "154")
             (name . "VK_FORMAT_EAC_R11_SNORM_BLOCK")))
           (enum
            ((value . "155")
             (name . "VK_FORMAT_EAC_R11G11_UNORM_BLOCK")))
           (enum
            ((value . "156")
             (name . "VK_FORMAT_EAC_R11G11_SNORM_BLOCK")))
           (enum
            ((value . "157")
             (name . "VK_FORMAT_ASTC_4x4_UNORM_BLOCK")))
           (enum
            ((value . "158")
             (name . "VK_FORMAT_ASTC_4x4_SRGB_BLOCK")))
           (enum
            ((value . "159")
             (name . "VK_FORMAT_ASTC_5x4_UNORM_BLOCK")))
           (enum
            ((value . "160")
             (name . "VK_FORMAT_ASTC_5x4_SRGB_BLOCK")))
           (enum
            ((value . "161")
             (name . "VK_FORMAT_ASTC_5x5_UNORM_BLOCK")))
           (enum
            ((value . "162")
             (name . "VK_FORMAT_ASTC_5x5_SRGB_BLOCK")))
           (enum
            ((value . "163")
             (name . "VK_FORMAT_ASTC_6x5_UNORM_BLOCK")))
           (enum
            ((value . "164")
             (name . "VK_FORMAT_ASTC_6x5_SRGB_BLOCK")))
           (enum
            ((value . "165")
             (name . "VK_FORMAT_ASTC_6x6_UNORM_BLOCK")))
           (enum
            ((value . "166")
             (name . "VK_FORMAT_ASTC_6x6_SRGB_BLOCK")))
           (enum
            ((value . "167")
             (name . "VK_FORMAT_ASTC_8x5_UNORM_BLOCK")))
           (enum
            ((value . "168")
             (name . "VK_FORMAT_ASTC_8x5_SRGB_BLOCK")))
           (enum
            ((value . "169")
             (name . "VK_FORMAT_ASTC_8x6_UNORM_BLOCK")))
           (enum
            ((value . "170")
             (name . "VK_FORMAT_ASTC_8x6_SRGB_BLOCK")))
           (enum
            ((value . "171")
             (name . "VK_FORMAT_ASTC_8x8_UNORM_BLOCK")))
           (enum
            ((value . "172")
             (name . "VK_FORMAT_ASTC_8x8_SRGB_BLOCK")))
           (enum
            ((value . "173")
             (name . "VK_FORMAT_ASTC_10x5_UNORM_BLOCK")))
           (enum
            ((value . "174")
             (name . "VK_FORMAT_ASTC_10x5_SRGB_BLOCK")))
           (enum
            ((value . "175")
             (name . "VK_FORMAT_ASTC_10x6_UNORM_BLOCK")))
           (enum
            ((value . "176")
             (name . "VK_FORMAT_ASTC_10x6_SRGB_BLOCK")))
           (enum
            ((value . "177")
             (name . "VK_FORMAT_ASTC_10x8_UNORM_BLOCK")))
           (enum
            ((value . "178")
             (name . "VK_FORMAT_ASTC_10x8_SRGB_BLOCK")))
           (enum
            ((value . "179")
             (name . "VK_FORMAT_ASTC_10x10_UNORM_BLOCK")))
           (enum
            ((value . "180")
             (name . "VK_FORMAT_ASTC_10x10_SRGB_BLOCK")))
           (enum
            ((value . "181")
             (name . "VK_FORMAT_ASTC_12x10_UNORM_BLOCK")))
           (enum
            ((value . "182")
             (name . "VK_FORMAT_ASTC_12x10_SRGB_BLOCK")))
           (enum
            ((value . "183")
             (name . "VK_FORMAT_ASTC_12x12_UNORM_BLOCK")))
           (enum
            ((value . "184")
             (name . "VK_FORMAT_ASTC_12x12_SRGB_BLOCK"))))
          (enums
           ((name . "VkStructureType")
            (type . "enum")
            (comment . "Structure type enumerant"))
           (enum
            ((value . "0")
             (name . "VK_STRUCTURE_TYPE_APPLICATION_INFO")))
           (enum
            ((value . "1")
             (name . "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO")))
           (enum
            ((value . "2")
             (name . "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO")))
           (enum
            ((value . "3")
             (name . "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO")))
           (enum
            ((value . "4")
             (name . "VK_STRUCTURE_TYPE_SUBMIT_INFO")))
           (enum
            ((value . "5")
             (name . "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO")))
           (enum
            ((value . "6")
             (name . "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE")))
           (enum
            ((value . "7")
             (name . "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO")))
           (enum
            ((value . "8")
             (name . "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO")))
           (enum
            ((value . "9")
             (name . "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO")))
           (enum
            ((value . "10")
             (name . "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO")))
           (enum
            ((value . "11")
             (name . "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO")))
           (enum
            ((value . "12")
             (name . "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO")))
           (enum
            ((value . "13")
             (name . "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO")))
           (enum
            ((value . "14")
             (name . "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO")))
           (enum
            ((value . "15")
             (name . "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO")))
           (enum
            ((value . "16")
             (name . "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO")))
           (enum
            ((value . "17")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO")))
           (enum
            ((value . "18")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO")))
           (enum
            ((value . "19")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO")))
           (enum
            ((value . "20")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO")))
           (enum
            ((value . "21")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO")))
           (enum
            ((value . "22")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO")))
           (enum
            ((value . "23")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO")))
           (enum
            ((value . "24")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO")))
           (enum
            ((value . "25")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO")))
           (enum
            ((value . "26")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO")))
           (enum
            ((value . "27")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO")))
           (enum
            ((value . "28")
             (name . "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO")))
           (enum
            ((value . "29")
             (name . "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO")))
           (enum
            ((value . "30")
             (name . "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO")))
           (enum
            ((value . "31")
             (name . "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO")))
           (enum
            ((value . "32")
             (name . "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO")))
           (enum
            ((value . "33")
             (name . "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO")))
           (enum
            ((value . "34")
             (name . "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO")))
           (enum
            ((value . "35")
             (name . "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET")))
           (enum
            ((value . "36")
             (name . "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET")))
           (enum
            ((value . "37")
             (name . "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO")))
           (enum
            ((value . "38")
             (name . "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO")))
           (enum
            ((value . "39")
             (name . "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO")))
           (enum
            ((value . "40")
             (name . "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO")))
           (enum
            ((value . "41")
             (name . "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO")))
           (enum
            ((value . "42")
             (name . "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO")))
           (enum
            ((value . "43")
             (name . "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO")))
           (enum
            ((value . "44")
             (name . "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER")))
           (enum
            ((value . "45")
             (name . "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER")))
           (enum
            ((value . "46")
             (name . "VK_STRUCTURE_TYPE_MEMORY_BARRIER")))
           (enum
            ((value . "47")
             (name . "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO")))
           (comment nil " Reserved for internal use by the loader, layers, and ICDs ")
           (enum
            ((value . "48")
             (name . "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO")))
           (comment nil " Reserved for internal use by the loader, layers, and ICDs "))
          (enums
           ((name . "VkSubpassContents")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_SUBPASS_CONTENTS_INLINE")))
           (enum
            ((value . "1")
             (name . "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS"))))
          (enums
           ((name . "VkResult")
            (type . "enum")
            (comment . "Error and return codes"))
           (comment nil " Return codes for successful operation execution (positive values) ")
           (enum
            ((value . "0")
             (name . "VK_SUCCESS")
             (comment . "Command completed successfully")))
           (enum
            ((value . "1")
             (name . "VK_NOT_READY")
             (comment . "A fence or query has not yet completed")))
           (enum
            ((value . "2")
             (name . "VK_TIMEOUT")
             (comment . "A wait operation has not completed in the specified time")))
           (enum
            ((value . "3")
             (name . "VK_EVENT_SET")
             (comment . "An event is signaled")))
           (enum
            ((value . "4")
             (name . "VK_EVENT_RESET")
             (comment . "An event is unsignalled")))
           (enum
            ((value . "5")
             (name . "VK_INCOMPLETE")
             (comment . "A return array was too small for the resul")))
           (comment nil " Error codes (negative values) ")
           (enum
            ((value . "-1")
             (name . "VK_ERROR_OUT_OF_HOST_MEMORY")
             (comment . "A host memory allocation has failed")))
           (enum
            ((value . "-2")
             (name . "VK_ERROR_OUT_OF_DEVICE_MEMORY")
             (comment . "A device memory allocation has failed")))
           (enum
            ((value . "-3")
             (name . "VK_ERROR_INITIALIZATION_FAILED")
             (comment . "The logical device has been lost. See <<devsandqueues-lost-device>>")))
           (enum
            ((value . "-4")
             (name . "VK_ERROR_DEVICE_LOST")
             (comment . "Initialization of a object has failed")))
           (enum
            ((value . "-5")
             (name . "VK_ERROR_MEMORY_MAP_FAILED")
             (comment . "Mapping of a memory object has failed")))
           (enum
            ((value . "-6")
             (name . "VK_ERROR_LAYER_NOT_PRESENT")
             (comment . "Layer specified does not exist")))
           (enum
            ((value . "-7")
             (name . "VK_ERROR_EXTENSION_NOT_PRESENT")
             (comment . "Extension specified does not exist")))
           (enum
            ((value . "-8")
             (name . "VK_ERROR_FEATURE_NOT_PRESENT")
             (comment . "Requested feature is not available on this device")))
           (enum
            ((value . "-9")
             (name . "VK_ERROR_INCOMPATIBLE_DRIVER")
             (comment . "Unable to find a Vulkan driver")))
           (enum
            ((value . "-10")
             (name . "VK_ERROR_TOO_MANY_OBJECTS")
             (comment . "Too many objects of the type have already been created")))
           (enum
            ((value . "-11")
             (name . "VK_ERROR_FORMAT_NOT_SUPPORTED")
             (comment . "Requested format is not supported on this device")))
           (unused
            ((start . "-12"))))
          (enums
           ((name . "VkDynamicState")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_DYNAMIC_STATE_VIEWPORT")))
           (enum
            ((value . "1")
             (name . "VK_DYNAMIC_STATE_SCISSOR")))
           (enum
            ((value . "2")
             (name . "VK_DYNAMIC_STATE_LINE_WIDTH")))
           (enum
            ((value . "3")
             (name . "VK_DYNAMIC_STATE_DEPTH_BIAS")))
           (enum
            ((value . "4")
             (name . "VK_DYNAMIC_STATE_BLEND_CONSTANTS")))
           (enum
            ((value . "5")
             (name . "VK_DYNAMIC_STATE_DEPTH_BOUNDS")))
           (enum
            ((value . "6")
             (name . "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK")))
           (enum
            ((value . "7")
             (name . "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK")))
           (enum
            ((value . "8")
             (name . "VK_DYNAMIC_STATE_STENCIL_REFERENCE"))))
          (comment nil " Flags ")
          (enums
           ((name . "VkQueueFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_QUEUE_GRAPHICS_BIT")
             (comment . "Queue supports graphics operations")))
           (enum
            ((bitpos . "1")
             (name . "VK_QUEUE_COMPUTE_BIT")
             (comment . "Queue supports compute operations")))
           (enum
            ((bitpos . "2")
             (name . "VK_QUEUE_TRANSFER_BIT")
             (comment . "Queue supports transfer operations")))
           (enum
            ((bitpos . "3")
             (name . "VK_QUEUE_SPARSE_BINDING_BIT")
             (comment . "Queue supports sparse resource memory management operations"))))
          (enums
           ((name . "VkMemoryPropertyFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT")
             (comment . "If otherwise stated, then allocate memory on device")))
           (enum
            ((bitpos . "1")
             (name . "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT")
             (comment . "Memory is mappable by host")))
           (enum
            ((bitpos . "2")
             (name . "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT")
             (comment . "Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache")))
           (enum
            ((bitpos . "3")
             (name . "VK_MEMORY_PROPERTY_HOST_CACHED_BIT")
             (comment . "Memory will be cached by the host")))
           (enum
            ((bitpos . "4")
             (name . "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT")
             (comment . "Memory may be allocated by the driver when it is required"))))
          (enums
           ((name . "VkMemoryHeapFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT")
             (comment . "If set, heap represents device memory"))))
          (enums
           ((name . "VkAccessFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_ACCESS_INDIRECT_COMMAND_READ_BIT")
             (comment . "Controls coherency of indirect command reads")))
           (enum
            ((bitpos . "1")
             (name . "VK_ACCESS_INDEX_READ_BIT")
             (comment . "Controls coherency of index reads")))
           (enum
            ((bitpos . "2")
             (name . "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT")
             (comment . "Controls coherency of vertex attribute reads")))
           (enum
            ((bitpos . "3")
             (name . "VK_ACCESS_UNIFORM_READ_BIT")
             (comment . "Controls coherency of uniform buffer reads")))
           (enum
            ((bitpos . "4")
             (name . "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT")
             (comment . "Controls coherency of input attachment reads")))
           (enum
            ((bitpos . "5")
             (name . "VK_ACCESS_SHADER_READ_BIT")
             (comment . "Controls coherency of shader reads")))
           (enum
            ((bitpos . "6")
             (name . "VK_ACCESS_SHADER_WRITE_BIT")
             (comment . "Controls coherency of shader writes")))
           (enum
            ((bitpos . "7")
             (name . "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT")
             (comment . "Controls coherency of color attachment reads")))
           (enum
            ((bitpos . "8")
             (name . "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT")
             (comment . "Controls coherency of color attachment writes")))
           (enum
            ((bitpos . "9")
             (name . "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT")
             (comment . "Controls coherency of depth/stencil attachment reads")))
           (enum
            ((bitpos . "10")
             (name . "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT")
             (comment . "Controls coherency of depth/stencil attachment writes")))
           (enum
            ((bitpos . "11")
             (name . "VK_ACCESS_TRANSFER_READ_BIT")
             (comment . "Controls coherency of transfer reads")))
           (enum
            ((bitpos . "12")
             (name . "VK_ACCESS_TRANSFER_WRITE_BIT")
             (comment . "Controls coherency of transfer writes")))
           (enum
            ((bitpos . "13")
             (name . "VK_ACCESS_HOST_READ_BIT")
             (comment . "Controls coherency of host reads")))
           (enum
            ((bitpos . "14")
             (name . "VK_ACCESS_HOST_WRITE_BIT")
             (comment . "Controls coherency of host writes")))
           (enum
            ((bitpos . "15")
             (name . "VK_ACCESS_MEMORY_READ_BIT")
             (comment . "Controls coherency of memory reads")))
           (enum
            ((bitpos . "16")
             (name . "VK_ACCESS_MEMORY_WRITE_BIT")
             (comment . "Controls coherency of memory writes"))))
          (enums
           ((name . "VkBufferUsageFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_BUFFER_USAGE_TRANSFER_SRC_BIT")
             (comment . "Can be used as a source of transfer operations")))
           (enum
            ((bitpos . "1")
             (name . "VK_BUFFER_USAGE_TRANSFER_DST_BIT")
             (comment . "Can be used as a destination of transfer operations")))
           (enum
            ((bitpos . "2")
             (name . "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT")
             (comment . "Can be used as TBO")))
           (enum
            ((bitpos . "3")
             (name . "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT")
             (comment . "Can be used as IBO")))
           (enum
            ((bitpos . "4")
             (name . "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT")
             (comment . "Can be used as UBO")))
           (enum
            ((bitpos . "5")
             (name . "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT")
             (comment . "Can be used as SSBO")))
           (enum
            ((bitpos . "6")
             (name . "VK_BUFFER_USAGE_INDEX_BUFFER_BIT")
             (comment . "Can be used as source of fixed-function index fetch (index buffer)")))
           (enum
            ((bitpos . "7")
             (name . "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT")
             (comment . "Can be used as source of fixed-function vertex fetch (VBO)")))
           (enum
            ((bitpos . "8")
             (name . "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT")
             (comment . "Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)"))))
          (enums
           ((name . "VkBufferCreateFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_BUFFER_CREATE_SPARSE_BINDING_BIT")
             (comment . "Buffer should support sparse backing")))
           (enum
            ((bitpos . "1")
             (name . "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT")
             (comment . "Buffer should support sparse backing with partial residency")))
           (enum
            ((bitpos . "2")
             (name . "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT")
             (comment . "Buffer should support constent data access to physical memory ranges mapped into multiple locations of sparse buffers"))))
          (enums
           ((name . "VkShaderStageFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_SHADER_STAGE_VERTEX_BIT")))
           (enum
            ((bitpos . "1")
             (name . "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT")))
           (enum
            ((bitpos . "2")
             (name . "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT")))
           (enum
            ((bitpos . "3")
             (name . "VK_SHADER_STAGE_GEOMETRY_BIT")))
           (enum
            ((bitpos . "4")
             (name . "VK_SHADER_STAGE_FRAGMENT_BIT")))
           (enum
            ((bitpos . "5")
             (name . "VK_SHADER_STAGE_COMPUTE_BIT")))
           (enum
            ((value . "0x0000001F")
             (name . "VK_SHADER_STAGE_ALL_GRAPHICS")))
           (enum
            ((value . "0x7FFFFFFF")
             (name . "VK_SHADER_STAGE_ALL"))))
          (enums
           ((name . "VkImageUsageFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_IMAGE_USAGE_TRANSFER_SRC_BIT")
             (comment . "Can be used as a source of transfer operations")))
           (enum
            ((bitpos . "1")
             (name . "VK_IMAGE_USAGE_TRANSFER_DST_BIT")
             (comment . "Can be used as a destination of transfer operations")))
           (enum
            ((bitpos . "2")
             (name . "VK_IMAGE_USAGE_SAMPLED_BIT")
             (comment . "Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)")))
           (enum
            ((bitpos . "3")
             (name . "VK_IMAGE_USAGE_STORAGE_BIT")
             (comment . "Can be used as storage image (STORAGE_IMAGE descriptor type)")))
           (enum
            ((bitpos . "4")
             (name . "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT")
             (comment . "Can be used as framebuffer color attachment")))
           (enum
            ((bitpos . "5")
             (name . "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT")
             (comment . "Can be used as framebuffer depth/stencil attachment")))
           (enum
            ((bitpos . "6")
             (name . "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT")
             (comment . "Image data not needed outside of rendering")))
           (enum
            ((bitpos . "7")
             (name . "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT")
             (comment . "Can be used as framebuffer input attachment"))))
          (enums
           ((name . "VkImageCreateFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_IMAGE_CREATE_SPARSE_BINDING_BIT")
             (comment . "Image should support sparse backing")))
           (enum
            ((bitpos . "1")
             (name . "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT")
             (comment . "Image should support sparse backing with partial residency")))
           (enum
            ((bitpos . "2")
             (name . "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT")
             (comment . "Image should support constent data access to physical memory ranges mapped into multiple locations of sparse images")))
           (enum
            ((bitpos . "3")
             (name . "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT")
             (comment . "Allows image views to have different format than the base image")))
           (enum
            ((bitpos . "4")
             (name . "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT")
             (comment . "Allows creating image views with cube type from the created image"))))
          (enums
           ((name . "VkPipelineCreateFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT")))
           (enum
            ((bitpos . "1")
             (name . "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT")))
           (enum
            ((bitpos . "2")
             (name . "VK_PIPELINE_CREATE_DERIVATIVE_BIT"))))
          (enums
           ((name . "VkColorComponentFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_COLOR_COMPONENT_R_BIT")))
           (enum
            ((bitpos . "1")
             (name . "VK_COLOR_COMPONENT_G_BIT")))
           (enum
            ((bitpos . "2")
             (name . "VK_COLOR_COMPONENT_B_BIT")))
           (enum
            ((bitpos . "3")
             (name . "VK_COLOR_COMPONENT_A_BIT"))))
          (enums
           ((name . "VkFenceCreateFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_FENCE_CREATE_SIGNALED_BIT"))))
          (enums
           ((name . "VkFormatFeatureFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT")
             (comment . "Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)")))
           (enum
            ((bitpos . "1")
             (name . "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT")
             (comment . "Format can be used for storage images (STORAGE_IMAGE descriptor type)")))
           (enum
            ((bitpos . "2")
             (name . "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT")
             (comment . "Format supports atomic operations in case it's used for storage images")))
           (enum
            ((bitpos . "3")
             (name . "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT")
             (comment . "Format can be used for uniform texel buffers (TBOs)")))
           (enum
            ((bitpos . "4")
             (name . "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT")
             (comment . "Format can be used for storage texel buffers (IBOs)")))
           (enum
            ((bitpos . "5")
             (name . "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT")
             (comment . "Format supports atomic operations in case it's used for storage texel buffers")))
           (enum
            ((bitpos . "6")
             (name . "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT")
             (comment . "Format can be used for vertex buffers (VBOs)")))
           (enum
            ((bitpos . "7")
             (name . "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT")
             (comment . "Format can be used for color attachment images")))
           (enum
            ((bitpos . "8")
             (name . "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT")
             (comment . "Format supports blending in case it's used for color attachment images")))
           (enum
            ((bitpos . "9")
             (name . "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT")
             (comment . "Format can be used for depth/stencil attachment images")))
           (enum
            ((bitpos . "10")
             (name . "VK_FORMAT_FEATURE_BLIT_SRC_BIT")
             (comment . "Format can be used as the source image of blits with vkCmdBlitImage")))
           (enum
            ((bitpos . "11")
             (name . "VK_FORMAT_FEATURE_BLIT_DST_BIT")
             (comment . "Format can be used as the destination image of blits with vkCmdBlitImage")))
           (enum
            ((bitpos . "12")
             (name . "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT")
             (comment . "Format can be filtered with VK_FILTER_LINEAR when being sampled"))))
          (enums
           ((name . "VkQueryControlFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_QUERY_CONTROL_PRECISE_BIT")
             (comment . "Require precise results to be collected by the query"))))
          (enums
           ((name . "VkQueryResultFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_QUERY_RESULT_64_BIT")
             (comment . "Results of the queries are written to the destination buffer as 64-bit values")))
           (enum
            ((bitpos . "1")
             (name . "VK_QUERY_RESULT_WAIT_BIT")
             (comment . "Results of the queries are waited on before proceeding with the result copy")))
           (enum
            ((bitpos . "2")
             (name . "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT")
             (comment . "Besides the results of the query, the availability of the results is also written")))
           (enum
            ((bitpos . "3")
             (name . "VK_QUERY_RESULT_PARTIAL_BIT")
             (comment . "Copy the partial results of the query even if the final results aren't available"))))
          (enums
           ((name . "VkCommandBufferUsageFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT")))
           (enum
            ((bitpos . "1")
             (name . "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT")))
           (enum
            ((bitpos . "2")
             (name . "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT")
             (comment . "Command buffer may be submitted/executed more than once simultaneously"))))
          (enums
           ((name . "VkQueryPipelineStatisticFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT")
             (comment . "Optional")))
           (enum
            ((bitpos . "1")
             (name . "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT")
             (comment . "Optional")))
           (enum
            ((bitpos . "2")
             (name . "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT")
             (comment . "Optional")))
           (enum
            ((bitpos . "3")
             (name . "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT")
             (comment . "Optional")))
           (enum
            ((bitpos . "4")
             (name . "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT")
             (comment . "Optional")))
           (enum
            ((bitpos . "5")
             (name . "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT")
             (comment . "Optional")))
           (enum
            ((bitpos . "6")
             (name . "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT")
             (comment . "Optional")))
           (enum
            ((bitpos . "7")
             (name . "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT")
             (comment . "Optional")))
           (enum
            ((bitpos . "8")
             (name . "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT")
             (comment . "Optional")))
           (enum
            ((bitpos . "9")
             (name . "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT")
             (comment . "Optional")))
           (enum
            ((bitpos . "10")
             (name . "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT")
             (comment . "Optional"))))
          (enums
           ((name . "VkImageAspectFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_IMAGE_ASPECT_COLOR_BIT")))
           (enum
            ((bitpos . "1")
             (name . "VK_IMAGE_ASPECT_DEPTH_BIT")))
           (enum
            ((bitpos . "2")
             (name . "VK_IMAGE_ASPECT_STENCIL_BIT")))
           (enum
            ((bitpos . "3")
             (name . "VK_IMAGE_ASPECT_METADATA_BIT"))))
          (enums
           ((name . "VkSparseImageFormatFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT")
             (comment . "Image uses a single miptail region for all array layers")))
           (enum
            ((bitpos . "1")
             (name . "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT")
             (comment . "Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-miptail levels.")))
           (enum
            ((bitpos . "2")
             (name . "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT")
             (comment . "Image uses a non-standard sparse image block dimensions"))))
          (enums
           ((name . "VkSparseMemoryBindFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_SPARSE_MEMORY_BIND_METADATA_BIT")
             (comment . "Operation binds resource metadata to memory"))))
          (enums
           ((name . "VkPipelineStageFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT")
             (comment . "Before subsequent commands are processed")))
           (enum
            ((bitpos . "1")
             (name . "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT")
             (comment . "Draw/DispatchIndirect command fetch")))
           (enum
            ((bitpos . "2")
             (name . "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT")
             (comment . "Vertex/index fetch")))
           (enum
            ((bitpos . "3")
             (name . "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT")
             (comment . "Vertex shading")))
           (enum
            ((bitpos . "4")
             (name . "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT")
             (comment . "Tessellation control shading")))
           (enum
            ((bitpos . "5")
             (name . "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT")
             (comment . "Tessellation evaluation shading")))
           (enum
            ((bitpos . "6")
             (name . "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT")
             (comment . "Geometry shading")))
           (enum
            ((bitpos . "7")
             (name . "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT")
             (comment . "Fragment shading")))
           (enum
            ((bitpos . "8")
             (name . "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT")
             (comment . "Early fragment (depth and stencil) tests")))
           (enum
            ((bitpos . "9")
             (name . "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT")
             (comment . "Late fragment (depth and stencil) tests")))
           (enum
            ((bitpos . "10")
             (name . "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT")
             (comment . "Color attachment writes")))
           (enum
            ((bitpos . "11")
             (name . "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT")
             (comment . "Compute shading")))
           (enum
            ((bitpos . "12")
             (name . "VK_PIPELINE_STAGE_TRANSFER_BIT")
             (comment . "Transfer/copy operations")))
           (enum
            ((bitpos . "13")
             (name . "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT")
             (comment . "After previous commands have completed")))
           (enum
            ((bitpos . "14")
             (name . "VK_PIPELINE_STAGE_HOST_BIT")
             (comment . "Indicates host (CPU) is a source/sink of the dependency")))
           (enum
            ((bitpos . "15")
             (name . "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT")
             (comment . "All stages of the graphics pipeline")))
           (enum
            ((bitpos . "16")
             (name . "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT")
             (comment . "All stages supported on the queue"))))
          (enums
           ((name . "VkCommandPoolCreateFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT")
             (comment . "Command buffers have a short lifetime")))
           (enum
            ((bitpos . "1")
             (name . "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT")
             (comment . "Command buffers may release their memory individually"))))
          (enums
           ((name . "VkCommandPoolResetFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT")
             (comment . "Release resources owned by the pool"))))
          (enums
           ((name . "VkCommandBufferResetFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT")
             (comment . "Release resources owned by the buffer"))))
          (enums
           ((name . "VkSampleCountFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_SAMPLE_COUNT_1_BIT")
             (comment . "Sample count 1 supported")))
           (enum
            ((bitpos . "1")
             (name . "VK_SAMPLE_COUNT_2_BIT")
             (comment . "Sample count 2 supported")))
           (enum
            ((bitpos . "2")
             (name . "VK_SAMPLE_COUNT_4_BIT")
             (comment . "Sample count 4 supported")))
           (enum
            ((bitpos . "3")
             (name . "VK_SAMPLE_COUNT_8_BIT")
             (comment . "Sample count 8 supported")))
           (enum
            ((bitpos . "4")
             (name . "VK_SAMPLE_COUNT_16_BIT")
             (comment . "Sample count 16 supported")))
           (enum
            ((bitpos . "5")
             (name . "VK_SAMPLE_COUNT_32_BIT")
             (comment . "Sample count 32 supported")))
           (enum
            ((bitpos . "6")
             (name . "VK_SAMPLE_COUNT_64_BIT")
             (comment . "Sample count 64 supported"))))
          (enums
           ((name . "VkAttachmentDescriptionFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT")
             (comment . "The attachment may alias physical memory of another attachment in the same render pass"))))
          (enums
           ((name . "VkStencilFaceFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_STENCIL_FACE_FRONT_BIT")
             (comment . "Front face")))
           (enum
            ((bitpos . "1")
             (name . "VK_STENCIL_FACE_BACK_BIT")
             (comment . "Back face")))
           (enum
            ((value . "0x00000003")
             (name . "VK_STENCIL_FRONT_AND_BACK")
             (comment . "Front and back faces"))))
          (enums
           ((name . "VkDescriptorPoolCreateFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT")
             (comment . "Descriptor sets may be freed individually"))))
          (enums
           ((name . "VkDependencyFlagBits")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_DEPENDENCY_BY_REGION_BIT")
             (comment . "Dependency is per pixel region "))))
          (comment nil " WSI extensions ")
          (enums
           ((name . "VkPresentModeKHR")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_PRESENT_MODE_IMMEDIATE_KHR")))
           (enum
            ((value . "1")
             (name . "VK_PRESENT_MODE_MAILBOX_KHR")))
           (enum
            ((value . "2")
             (name . "VK_PRESENT_MODE_FIFO_KHR")))
           (enum
            ((value . "3")
             (name . "VK_PRESENT_MODE_FIFO_RELAXED_KHR"))))
          (enums
           ((name . "VkColorSpaceKHR")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_COLORSPACE_SRGB_NONLINEAR_KHR"))))
          (enums
           ((name . "VkDisplayPlaneAlphaFlagBitsKHR")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR")))
           (enum
            ((bitpos . "1")
             (name . "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR")))
           (enum
            ((bitpos . "2")
             (name . "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR")))
           (enum
            ((bitpos . "3")
             (name . "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR"))))
          (enums
           ((name . "VkCompositeAlphaFlagBitsKHR")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR")))
           (enum
            ((bitpos . "1")
             (name . "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR")))
           (enum
            ((bitpos . "2")
             (name . "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR")))
           (enum
            ((bitpos . "3")
             (name . "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR"))))
          (enums
           ((name . "VkSurfaceTransformFlagBitsKHR")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR")))
           (enum
            ((bitpos . "1")
             (name . "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR")))
           (enum
            ((bitpos . "2")
             (name . "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR")))
           (enum
            ((bitpos . "3")
             (name . "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR")))
           (enum
            ((bitpos . "4")
             (name . "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR")))
           (enum
            ((bitpos . "5")
             (name . "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR")))
           (enum
            ((bitpos . "6")
             (name . "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR")))
           (enum
            ((bitpos . "7")
             (name . "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR")))
           (enum
            ((bitpos . "8")
             (name . "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR"))))
          (enums
           ((name . "VkDebugReportFlagBitsEXT")
            (type . "bitmask"))
           (enum
            ((bitpos . "0")
             (name . "VK_DEBUG_REPORT_INFORMATION_BIT_EXT")))
           (enum
            ((bitpos . "1")
             (name . "VK_DEBUG_REPORT_WARNING_BIT_EXT")))
           (enum
            ((bitpos . "2")
             (name . "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT")))
           (enum
            ((bitpos . "3")
             (name . "VK_DEBUG_REPORT_ERROR_BIT_EXT")))
           (enum
            ((bitpos . "4")
             (name . "VK_DEBUG_REPORT_DEBUG_BIT_EXT"))))
          (enums
           ((name . "VkDebugReportObjectTypeEXT")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT")))
           (enum
            ((value . "1")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT")))
           (enum
            ((value . "2")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT")))
           (enum
            ((value . "3")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT")))
           (enum
            ((value . "4")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT")))
           (enum
            ((value . "5")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT")))
           (enum
            ((value . "6")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT")))
           (enum
            ((value . "7")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT")))
           (enum
            ((value . "8")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT")))
           (enum
            ((value . "9")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT")))
           (enum
            ((value . "10")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT")))
           (enum
            ((value . "11")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT")))
           (enum
            ((value . "12")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT")))
           (enum
            ((value . "13")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT")))
           (enum
            ((value . "14")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT")))
           (enum
            ((value . "15")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT")))
           (enum
            ((value . "16")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT")))
           (enum
            ((value . "17")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT")))
           (enum
            ((value . "18")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT")))
           (enum
            ((value . "19")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT")))
           (enum
            ((value . "20")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT")))
           (enum
            ((value . "21")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT")))
           (enum
            ((value . "22")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT")))
           (enum
            ((value . "23")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT")))
           (enum
            ((value . "24")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT")))
           (enum
            ((value . "25")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT")))
           (enum
            ((value . "26")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT")))
           (enum
            ((value . "27")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT")))
           (enum
            ((value . "28")
             (name . "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT"))))
          (enums
           ((name . "VkDebugReportErrorEXT")
            (type . "enum"))
           (enum
            ((value . "0")
             (name . "VK_DEBUG_REPORT_ERROR_NONE_EXT")))
           (comment nil " Used for INFO & other non-error messages ")
           (enum
            ((value . "1")
             (name . "VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT")))
           (comment nil " Callbacks were not destroyed prior to calling DestroyInstance "))
          (comment nil " SECTION: Vulkan command definitions ")
          (commands nil
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_LAYER_NOT_PRESENT,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_INCOMPATIBLE_DRIVER"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateInstance"))
                     (param nil "const "
                            (type nil "VkInstanceCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkInstance")
                            "* "
                            (name nil "pInstance")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyInstance"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkInstance")
                              (name nil "instance"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All child objects created using pname:instance must: have been destroyed prior to destroying pname:instance")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:instance was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:instance was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkEnumeratePhysicalDevices"))
                     (param nil
                            (type nil "VkInstance")
                            (name nil "instance"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pPhysicalDeviceCount"))
                     (param
                      ((optional . "true")
                       (len . "pPhysicalDeviceCount"))
                      (type nil "VkPhysicalDevice")
                      "* "
                      (name nil "pPhysicalDevices")))
                    (command nil
                             (proto nil
                                    (type nil "PFN_vkVoidFunction")
                                    (name nil "vkGetDeviceProcAddr"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((len . "null-terminated"))
                              "const "
                              (type nil "char")
                              "* "
                              (name nil "pName"))
                             (validity nil
                                       (usage nil "pname:pName must: be the name of a supported command that has a first parameter of type sname:VkDevice, sname:VkQueue or sname:VkCommandBuffer, either in the core API or an enabled extension")))
                    (command nil
                             (proto nil
                                    (type nil "PFN_vkVoidFunction")
                                    (name nil "vkGetInstanceProcAddr"))
                             (param
                              ((optional . "true"))
                              (type nil "VkInstance")
                              (name nil "instance"))
                             (param
                              ((len . "null-terminated"))
                              "const "
                              (type nil "char")
                              "* "
                              (name nil "pName"))
                             (validity nil
                                       (usage nil "If pname:instance is `NULL`, pname:pName must: be one of: fname:vkEnumerateInstanceExtensionProperties, fname:vkEnumerateInstanceLayerProperties or fname:vkCreateInstance")
                                       (usage nil "If pname:instance is not `NULL`, pname:pName must: be the name of a core command or a command from an enabled extension, other than: fname:vkEnumerateInstanceExtensionProperties, fname:vkEnumerateInstanceLayerProperties or fname:vkCreateInstance")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetPhysicalDeviceProperties"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param nil
                                    (type nil "VkPhysicalDeviceProperties")
                                    "* "
                                    (name nil "pProperties")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetPhysicalDeviceQueueFamilyProperties"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param
                              ((optional . "false,true"))
                              (type nil "uint32_t")
                              "* "
                              (name nil "pQueueFamilyPropertyCount"))
                             (param
                              ((optional . "true")
                               (len . "pQueueFamilyPropertyCount"))
                              (type nil "VkQueueFamilyProperties")
                              "* "
                              (name nil "pQueueFamilyProperties")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetPhysicalDeviceMemoryProperties"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param nil
                                    (type nil "VkPhysicalDeviceMemoryProperties")
                                    "* "
                                    (name nil "pMemoryProperties")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetPhysicalDeviceFeatures"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param nil
                                    (type nil "VkPhysicalDeviceFeatures")
                                    "* "
                                    (name nil "pFeatures")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetPhysicalDeviceFormatProperties"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param nil
                                    (type nil "VkFormat")
                                    (name nil "format"))
                             (param nil
                                    (type nil "VkFormatProperties")
                                    "* "
                                    (name nil "pFormatProperties")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetPhysicalDeviceImageFormatProperties"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param nil
                            (type nil "VkFormat")
                            (name nil "format"))
                     (param nil
                            (type nil "VkImageType")
                            (name nil "type"))
                     (param nil
                            (type nil "VkImageTiling")
                            (name nil "tiling"))
                     (param nil
                            (type nil "VkImageUsageFlags")
                            (name nil "usage"))
                     (param
                      ((optional . "true"))
                      (type nil "VkImageCreateFlags")
                      (name nil "flags"))
                     (param nil
                            (type nil "VkImageFormatProperties")
                            "* "
                            (name nil "pImageFormatProperties")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_LAYER_NOT_PRESENT,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_DEVICE_LOST"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateDevice"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param nil "const "
                            (type nil "VkDeviceCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkDevice")
                            "* "
                            (name nil "pDevice")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyDevice"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkDevice")
                              (name nil "device"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All child objects created on pname:device must: have been destroyed prior to destroying pname:device")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:device was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:device was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkEnumerateInstanceLayerProperties"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pPropertyCount"))
                     (param
                      ((optional . "true")
                       (len . "pPropertyCount"))
                      (type nil "VkLayerProperties")
                      "* "
                      (name nil "pProperties")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkEnumerateInstanceExtensionProperties"))
                     (param
                      ((optional . "true")
                       (len . "null-terminated"))
                      "const "
                      (type nil "char")
                      "* "
                      (name nil "pLayerName"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pPropertyCount"))
                     (param
                      ((optional . "true")
                       (len . "pPropertyCount"))
                      (type nil "VkExtensionProperties")
                      "* "
                      (name nil "pProperties"))
                     (validity nil
                               (usage nil "If pname:pLayerName is not `NULL`, it must: be the name of an instance layer returned by flink:vkEnumerateInstanceLayerProperties")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkEnumerateDeviceLayerProperties"))
                     (param
                      ((optional . "false,true"))
                      (type nil "VkPhysicalDevice")
                      (name nil "physicalDevice"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pPropertyCount"))
                     (param
                      ((optional . "true")
                       (len . "pPropertyCount"))
                      (type nil "VkLayerProperties")
                      "* "
                      (name nil "pProperties")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkEnumerateDeviceExtensionProperties"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param
                      ((optional . "true")
                       (len . "null-terminated"))
                      "const "
                      (type nil "char")
                      "* "
                      (name nil "pLayerName"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pPropertyCount"))
                     (param
                      ((optional . "true")
                       (len . "pPropertyCount"))
                      (type nil "VkExtensionProperties")
                      "* "
                      (name nil "pProperties"))
                     (validity nil
                               (usage nil "If pname:pLayerName is not `NULL`, it must: be the name of a device layer returned by flink:vkEnumerateDeviceLayerProperties")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetDeviceQueue"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param nil
                                    (type nil "uint32_t")
                                    (name nil "queueFamilyIndex"))
                             (param nil
                                    (type nil "uint32_t")
                                    (name nil "queueIndex"))
                             (param nil
                                    (type nil "VkQueue")
                                    "* "
                                    (name nil "pQueue"))
                             (validity nil
                                       (usage nil "pname:queueFamilyIndex must: be one of the queue family indices specified when pname:device was created, via the sname:VkDeviceQueueCreateInfo structure")
                                       (usage nil "pname:queueIndex must: be less than the number of queues created for the specified queue family index when pname:device was created, via the pname:queueCount member of the sname:VkDeviceQueueCreateInfo structure")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkQueueSubmit"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkQueue")
                      (name nil "queue"))
                     (param
                      ((optional . "true"))
                      (type nil "uint32_t")
                      (name nil "submitCount"))
                     (param
                      ((len . "submitCount")
                       (externsync . "pSubmits[].pWaitSemaphores[],pSubmits[].pSignalSemaphores[]"))
                      "const "
                      (type nil "VkSubmitInfo")
                      "* "
                      (name nil "pSubmits"))
                     (param
                      ((optional . "true")
                       (externsync . "true"))
                      (type nil "VkFence")
                      (name nil "fence"))
                     (validity nil
                               (usage nil "pname:fence must: be unsignalled")
                               (usage nil "pname:fence mustnot: be associated with any other queue command that has not yet completed execution on that queue")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkQueueWaitIdle"))
                     (param nil
                            (type nil "VkQueue")
                            (name nil "queue")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkDeviceWaitIdle"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (implicitexternsyncparams nil
                                               (param nil "all sname:VkQueue objects created from pname:device")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_TOO_MANY_OBJECTS"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkAllocateMemory"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkMemoryAllocateInfo")
                            "* "
                            (name nil "pAllocateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkDeviceMemory")
                            "* "
                            (name nil "pMemory"))
                     (validity nil
                               (usage nil "The number of currently valid memory objects, allocated from pname:device, must: be less than sname:VkPhysicalDeviceLimits::pname:maxMemoryAllocationCount")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkFreeMemory"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkDeviceMemory")
                              (name nil "memory"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:memory (via images or buffers) must: have completed execution")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkMapMemory"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkDeviceMemory")
                      (name nil "memory"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "offset"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "size"))
                     (param
                      ((optional . "true"))
                      (type nil "VkMemoryMapFlags")
                      (name nil "flags"))
                     (param nil
                            (type nil "void")
                            "** "
                            (name nil "ppData"))
                     (validity nil
                               (usage nil "pname:memory mustnot: currently be mapped")
                               (usage nil "pname:offset must: be less than the size of pname:memory")
                               (usage nil "If pname:size is not equal to ename:VK_WHOLE_SIZE, pname:size must: be greater than `0`")
                               (usage nil "If pname:size is not equal to ename:VK_WHOLE_SIZE, pname:size must: be less than or equal to the size of the pname:memory minus pname:offset")
                               (usage nil "pname:memory must: have been created with a memory type that reports ename:VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkUnmapMemory"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((externsync . "true"))
                              (type nil "VkDeviceMemory")
                              (name nil "memory"))
                             (validity nil
                                       (usage nil "pname:memory must: currently be mapped")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkFlushMappedMemoryRanges"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "memoryRangeCount"))
                     (param
                      ((len . "memoryRangeCount"))
                      "const "
                      (type nil "VkMappedMemoryRange")
                      "* "
                      (name nil "pMemoryRanges")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkInvalidateMappedMemoryRanges"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "memoryRangeCount"))
                     (param
                      ((len . "memoryRangeCount"))
                      "const "
                      (type nil "VkMappedMemoryRange")
                      "* "
                      (name nil "pMemoryRanges")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetDeviceMemoryCommitment"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param nil
                                    (type nil "VkDeviceMemory")
                                    (name nil "memory"))
                             (param nil
                                    (type nil "VkDeviceSize")
                                    "* "
                                    (name nil "pCommittedMemoryInBytes"))
                             (validity nil
                                       (usage nil "pname:memory must: have been created with a memory type that reports ename:VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetBufferMemoryRequirements"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param nil
                                    (type nil "VkBuffer")
                                    (name nil "buffer"))
                             (param nil
                                    (type nil "VkMemoryRequirements")
                                    "* "
                                    (name nil "pMemoryRequirements")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkBindBufferMemory"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkBuffer")
                      (name nil "buffer"))
                     (param nil
                            (type nil "VkDeviceMemory")
                            (name nil "memory"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "memoryOffset"))
                     (validity nil
                               (usage nil "pname:buffer mustnot: already be backed by a memory object")
                               (usage nil "pname:buffer mustnot: have been created with any sparse memory binding flags")
                               (usage nil "pname:memoryOffset must: be less than the size of pname:memory")
                               (usage nil "If pname:buffer was created with the ename:VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT or ename:VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, pname:memoryOffset must: be a multiple of sname:VkPhysicalDeviceLimits::pname:minTexelBufferOffsetAlignment")
                               (usage nil "If pname:buffer was created with the ename:VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, pname:memoryOffset must: be a multiple of sname:VkPhysicalDeviceLimits::pname:minUniformBufferOffsetAlignment")
                               (usage nil "If pname:buffer was created with the ename:VK_BUFFER_USAGE_STORAGE_BUFFER_BIT, pname:memoryOffset must: be a multiple of sname:VkPhysicalDeviceLimits::pname:minStorageBufferOffsetAlignment")
                               (usage nil "pname:memory must: have been allocated using one of the memory types allowed in the pname:memoryTypeBits member of the sname:VkMemoryRequirements structure returned from a call to fname:vkGetBufferMemoryRequirements with pname:buffer")
                               (usage nil "The size of pname:buffer must: be less than or equal to the size of pname:memory minus pname:memoryOffset")
                               (usage nil "pname:memoryOffset must: be an integer multiple of the pname:alignment member of the sname:VkMemoryRequirements structure returned from a call to fname:vkGetBufferMemoryRequirements with pname:buffer")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetImageMemoryRequirements"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param nil
                                    (type nil "VkImage")
                                    (name nil "image"))
                             (param nil
                                    (type nil "VkMemoryRequirements")
                                    "* "
                                    (name nil "pMemoryRequirements")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkBindImageMemory"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkImage")
                      (name nil "image"))
                     (param nil
                            (type nil "VkDeviceMemory")
                            (name nil "memory"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "memoryOffset"))
                     (validity nil
                               (usage nil "pname:image mustnot: already be backed by a memory object")
                               (usage nil "pname:image mustnot: have been created with any sparse memory binding flags")
                               (usage nil "pname:memoryOffset must: be less than the size of pname:memory")
                               (usage nil "pname:memory must: have been allocated using one of the memory types allowed in the pname:memoryTypeBits member of the sname:VkMemoryRequirements structure returned from a call to fname:vkGetImageMemoryRequirements with pname:image")
                               (usage nil "pname:memoryOffset must: be an integer multiple of the pname:alignment member of the sname:VkMemoryRequirements structure returned from a call to fname:vkGetImageMemoryRequirements with pname:image")
                               (usage nil "The pname:size member of the sname:VkMemoryRequirements structure returned from a call to fname:vkGetImageMemoryRequirements with pname:image must: be less than or equal to the size of pname:memory minus pname:memoryOffset")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetImageSparseMemoryRequirements"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param nil
                                    (type nil "VkImage")
                                    (name nil "image"))
                             (param
                              ((optional . "false,true"))
                              (type nil "uint32_t")
                              "* "
                              (name nil "pSparseMemoryRequirementCount"))
                             (param
                              ((optional . "true")
                               (len . "pSparseMemoryRequirementCount"))
                              (type nil "VkSparseImageMemoryRequirements")
                              "* "
                              (name nil "pSparseMemoryRequirements")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetPhysicalDeviceSparseImageFormatProperties"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param nil
                                    (type nil "VkFormat")
                                    (name nil "format"))
                             (param nil
                                    (type nil "VkImageType")
                                    (name nil "type"))
                             (param nil
                                    (type nil "VkSampleCountFlagBits")
                                    (name nil "samples"))
                             (param nil
                                    (type nil "VkImageUsageFlags")
                                    (name nil "usage"))
                             (param nil
                                    (type nil "VkImageTiling")
                                    (name nil "tiling"))
                             (param
                              ((optional . "false,true"))
                              (type nil "uint32_t")
                              "* "
                              (name nil "pPropertyCount"))
                             (param
                              ((optional . "true")
                               (len . "pPropertyCount"))
                              (type nil "VkSparseImageFormatProperties")
                              "* "
                              (name nil "pProperties"))
                             (validity nil
                                       (usage nil "If pname:format is an integer format, samples must: be one of the bit flags specified in sname:VkPhysicalDeviceLimits::pname:sampledImageIntegerSampleCounts")
                                       (usage nil "If pname:format is a non-integer color format, samples must: be one of the bit flags specified in sname:VkPhysicalDeviceLimits::pname:sampledImageColorSampleCounts")
                                       (usage nil "If pname:format is a depth format, samples must: be one of the bit flags specified in sname:VkPhysicalDeviceLimits::pname:sampledImageDepthSampleCounts")
                                       (usage nil "If pname:format is a stencil format, samples must: be one of the bit flags specified in sname:VkPhysicalDeviceLimits::pname:sampledImageStencilSampleCounts")
                                       (usage nil "If pname:usage includes ename:VK_IMAGE_USAGE_STORAGE_BIT, samples must: be one of the bit flags specified in sname:VkPhysicalDeviceLimits::pname:storageImageSampleCounts")))
                    (command
                     ((queues . "sparse_binding")
                      (successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkQueueBindSparse"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkQueue")
                      (name nil "queue"))
                     (param
                      ((optional . "true"))
                      (type nil "uint32_t")
                      (name nil "bindInfoCount"))
                     (param
                      ((len . "bindInfoCount")
                       (externsync . "pBindInfo[].pWaitSemaphores[],pBindInfo[].pSignalSemaphores[],pBindInfo[].pBufferBinds[].buffer,pBindInfo[].pImageOpaqueBinds[].image,pBindInfo[].pImageBinds[].image"))
                      "const "
                      (type nil "VkBindSparseInfo")
                      "* "
                      (name nil "pBindInfo"))
                     (param
                      ((optional . "true")
                       (externsync . "true"))
                      (type nil "VkFence")
                      (name nil "fence"))
                     (validity nil
                               (usage nil "pname:fence must: be unsignalled")
                               (usage nil "pname:fence mustnot: be associated with any other queue command that has not yet completed execution on that queue")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateFence"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkFenceCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkFence")
                            "* "
                            (name nil "pFence")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyFence"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkFence")
                              (name nil "fence"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "pname:fence mustnot: be associated with any queue command that has not yet completed execution on that queue")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:fence was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:fence was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkResetFences"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "fenceCount"))
                     (param
                      ((len . "fenceCount")
                       (externsync . "true"))
                      "const "
                      (type nil "VkFence")
                      "* "
                      (name nil "pFences"))
                     (validity nil
                               (usage nil "Any given element of pname:pFences mustnot: currently be associated with any queue command that has not yet completed execution on that queue")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_NOT_READY")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetFenceStatus"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil
                            (type nil "VkFence")
                            (name nil "fence")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_TIMEOUT")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkWaitForFences"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "fenceCount"))
                     (param
                      ((len . "fenceCount"))
                      "const "
                      (type nil "VkFence")
                      "* "
                      (name nil "pFences"))
                     (param nil
                            (type nil "VkBool32")
                            (name nil "waitAll"))
                     (param nil
                            (type nil "uint64_t")
                            (name nil "timeout")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateSemaphore"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkSemaphoreCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkSemaphore")
                            "* "
                            (name nil "pSemaphore")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroySemaphore"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkSemaphore")
                              (name nil "semaphore"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "pname:semaphore mustnot: be associated with any queue command that has not yet completed execution on that queue")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:semaphore was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:semaphore was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateEvent"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkEventCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkEvent")
                            "* "
                            (name nil "pEvent")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyEvent"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkEvent")
                              (name nil "event"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:event must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:event was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:event was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_EVENT_SET,VK_EVENT_RESET")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetEventStatus"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil
                            (type nil "VkEvent")
                            (name nil "event")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkSetEvent"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkEvent")
                      (name nil "event")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkResetEvent"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkEvent")
                      (name nil "event")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateQueryPool"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkQueryPoolCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkQueryPool")
                            "* "
                            (name nil "pQueryPool")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyQueryPool"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkQueryPool")
                              (name nil "queryPool"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:queryPool must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:queryPool was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:queryPool was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_NOT_READY")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetQueryPoolResults"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil
                            (type nil "VkQueryPool")
                            (name nil "queryPool"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstQuery"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "queryCount"))
                     (param nil
                            (type nil "size_t")
                            (name nil "dataSize"))
                     (param
                      ((len . "dataSize"))
                      (type nil "void")
                      "* "
                      (name nil "pData"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "stride"))
                     (param
                      ((optional . "true"))
                      (type nil "VkQueryResultFlags")
                      (name nil "flags"))
                     (validity nil
                               (usage nil "pname:firstQuery must: be less than the number of queries in pname:queryPool")
                               (usage nil "If ename:VK_QUERY_RESULT_64_BIT is not set in pname:flags then pname:pData and pname:stride must: be multiples of `4`")
                               (usage nil "If ename:VK_QUERY_RESULT_64_BIT is set in pname:flags then pname:pData and pname:stride must: be multiples of `8`")
                               (usage nil "The sum of pname:firstQuery and pname:queryCount must: be less than or equal to the number of queries in pname:queryPool")
                               (usage nil "pname:dataSize must: be large enough to contain the result of each query, as described <<queries-operation-memorylayout,here>>")
                               (usage nil "If the pname:queryType used to create pname:queryPool was ename:VK_QUERY_TYPE_TIMESTAMP, pname:flags mustnot: contain ename:VK_QUERY_RESULT_PARTIAL_BIT")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateBuffer"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkBufferCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkBuffer")
                            "* "
                            (name nil "pBuffer"))
                     (validity nil
                               (usage nil "If the pname:flags member of pname:pCreateInfo includes ename:VK_BUFFER_CREATE_SPARSE_BINDING_BIT, creating this sname:VkBuffer mustnot: cause the total required sparse memory for all currently valid sparse resources on the device to exceed sname:VkPhysicalDeviceLimits::pname:sparseAddressSpaceSize")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyBuffer"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkBuffer")
                              (name nil "buffer"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:buffer, either directly or via a sname:VkBufferView, must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:buffer was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:buffer was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateBufferView"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkBufferViewCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkBufferView")
                            "* "
                            (name nil "pView")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyBufferView"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkBufferView")
                              (name nil "bufferView"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:bufferView must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:bufferView was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:bufferView was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateImage"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkImageCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkImage")
                            "* "
                            (name nil "pImage"))
                     (validity nil
                               (usage nil "If the pname:flags member of pname:pCreateInfo includes ename:VK_IMAGE_CREATE_SPARSE_BINDING_BIT, creating this sname:VkImage mustnot: cause the total required sparse memory for all currently valid sparse resources on the device to exceed sname:VkPhysicalDeviceLimits::pname:sparseAddressSpaceSize")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyImage"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkImage")
                              (name nil "image"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:image, either directly or via a sname:VkImageView, must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:image was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:image was created, pname:pAllocator must: be `NULL`")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetImageSubresourceLayout"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param nil
                                    (type nil "VkImage")
                                    (name nil "image"))
                             (param nil "const "
                                    (type nil "VkImageSubresource")
                                    "* "
                                    (name nil "pSubresource"))
                             (param nil
                                    (type nil "VkSubresourceLayout")
                                    "* "
                                    (name nil "pLayout"))
                             (validity nil
                                       (usage nil "pname:image must: have been created with pname:tiling equal to ename:VK_IMAGE_TILING_LINEAR")
                                       (usage nil "The pname:aspectMask member of pname:pSubresource must: only have a single bit set")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateImageView"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkImageViewCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkImageView")
                            "* "
                            (name nil "pView")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyImageView"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkImageView")
                              (name nil "imageView"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:imageView must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:imageView was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:imageView was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateShaderModule"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkShaderModuleCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkShaderModule")
                            "* "
                            (name nil "pShaderModule")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyShaderModule"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkShaderModule")
                              (name nil "shaderModule"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:shaderModule was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:shaderModule was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreatePipelineCache"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkPipelineCacheCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkPipelineCache")
                            "* "
                            (name nil "pPipelineCache")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyPipelineCache"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkPipelineCache")
                              (name nil "pipelineCache"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:pipelineCache was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:pipelineCache was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetPipelineCacheData"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil
                            (type nil "VkPipelineCache")
                            (name nil "pipelineCache"))
                     (param
                      ((optional . "false,true"))
                      (type nil "size_t")
                      "* "
                      (name nil "pDataSize"))
                     (param
                      ((optional . "true")
                       (len . "pDataSize"))
                      (type nil "void")
                      "* "
                      (name nil "pData")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkMergePipelineCaches"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkPipelineCache")
                      (name nil "dstCache"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "srcCacheCount"))
                     (param
                      ((len . "srcCacheCount"))
                      "const "
                      (type nil "VkPipelineCache")
                      "* "
                      (name nil "pSrcCaches"))
                     (validity nil
                               (usage nil "pname:dstCache mustnot: appear in the list of source caches")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateGraphicsPipelines"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((optional . "true"))
                      (type nil "VkPipelineCache")
                      (name nil "pipelineCache"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "createInfoCount"))
                     (param
                      ((len . "createInfoCount"))
                      "const "
                      (type nil "VkGraphicsPipelineCreateInfo")
                      "* "
                      (name nil "pCreateInfos"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param
                      ((len . "createInfoCount"))
                      (type nil "VkPipeline")
                      "* "
                      (name nil "pPipelines"))
                     (validity nil
                               (usage nil "If the pname:flags member of any given element of pname:pCreateInfos contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and the pname:basePipelineIndex member of that same element is not `-1`, pname:basePipelineIndex must: be less than the index into pname:pCreateInfos that corresponds to that element")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateComputePipelines"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((optional . "true"))
                      (type nil "VkPipelineCache")
                      (name nil "pipelineCache"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "createInfoCount"))
                     (param
                      ((len . "createInfoCount"))
                      "const "
                      (type nil "VkComputePipelineCreateInfo")
                      "* "
                      (name nil "pCreateInfos"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param
                      ((len . "createInfoCount"))
                      (type nil "VkPipeline")
                      "* "
                      (name nil "pPipelines"))
                     (validity nil
                               (usage nil "If the pname:flags member of any given element of pname:pCreateInfos contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and the pname:basePipelineIndex member of that same element is not `-1`, pname:basePipelineIndex must: be less than the index into pname:pCreateInfos that corresponds to that element")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyPipeline"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkPipeline")
                              (name nil "pipeline"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:pipeline must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:pipeline was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:pipeline was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreatePipelineLayout"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkPipelineLayoutCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkPipelineLayout")
                            "* "
                            (name nil "pPipelineLayout")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyPipelineLayout"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkPipelineLayout")
                              (name nil "pipelineLayout"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:pipelineLayout was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:pipelineLayout was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_TOO_MANY_OBJECTS"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateSampler"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkSamplerCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkSampler")
                            "* "
                            (name nil "pSampler")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroySampler"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkSampler")
                              (name nil "sampler"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:sampler must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:sampler was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:sampler was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateDescriptorSetLayout"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkDescriptorSetLayoutCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkDescriptorSetLayout")
                            "* "
                            (name nil "pSetLayout")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyDescriptorSetLayout"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkDescriptorSetLayout")
                              (name nil "descriptorSetLayout"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:descriptorSetLayout was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:descriptorSetLayout was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateDescriptorPool"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkDescriptorPoolCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkDescriptorPool")
                            "* "
                            (name nil "pDescriptorPool")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyDescriptorPool"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkDescriptorPool")
                              (name nil "descriptorPool"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:descriptorPool (via any allocated descriptor sets) must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:descriptorPool was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:descriptorPool was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkResetDescriptorPool"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkDescriptorPool")
                      (name nil "descriptorPool"))
                     (param
                      ((optional . "true"))
                      (type nil "VkDescriptorPoolResetFlags")
                      (name nil "flags"))
                     (implicitexternsyncparams nil
                                               (param nil "any sname:VkDescriptorSet objects allocated from pname:descriptorPool"))
                     (validity nil
                               (usage nil "All uses of pname:descriptorPool (via any allocated descriptor sets) must: have completed execution")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkAllocateDescriptorSets"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "pAllocateInfo->descriptorPool"))
                      "const "
                      (type nil "VkDescriptorSetAllocateInfo")
                      "* "
                      (name nil "pAllocateInfo"))
                     (param
                      ((len . "pAllocateInfo->descriptorSetCount"))
                      (type nil "VkDescriptorSet")
                      "* "
                      (name nil "pDescriptorSets")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkFreeDescriptorSets"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkDescriptorPool")
                      (name nil "descriptorPool"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "descriptorSetCount"))
                     (param
                      ((noautovalidity . "true")
                       (externsync . "true")
                       (len . "descriptorSetCount"))
                      "const "
                      (type nil "VkDescriptorSet")
                      "* "
                      (name nil "pDescriptorSets"))
                     (validity nil
                               (usage nil "All submitted commands that refer to any element of pname:pDescriptorSets must: have completed execution")
                               (usage nil "pname:pDescriptorSets must: be a pointer to an array of pname:descriptorSetCount sname:VkDescriptorSet handles, each element of which must: either be a valid handle or sname:VK_NULL_HANDLE")
                               (usage nil "pname:descriptorPool must: have been created with the ename:VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT flag")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkUpdateDescriptorSets"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true"))
                              (type nil "uint32_t")
                              (name nil "descriptorWriteCount"))
                             (param
                              ((len . "descriptorWriteCount")
                               (externsync . "pDescriptorWrites[].dstSet"))
                              "const "
                              (type nil "VkWriteDescriptorSet")
                              "* "
                              (name nil "pDescriptorWrites"))
                             (param
                              ((optional . "true"))
                              (type nil "uint32_t")
                              (name nil "descriptorCopyCount"))
                             (param
                              ((len . "descriptorCopyCount")
                               (externsync . "pDescriptorCopies[].dstSet"))
                              "const "
                              (type nil "VkCopyDescriptorSet")
                              "* "
                              (name nil "pDescriptorCopies")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateFramebuffer"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkFramebufferCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkFramebuffer")
                            "* "
                            (name nil "pFramebuffer")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyFramebuffer"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkFramebuffer")
                              (name nil "framebuffer"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:framebuffer must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:framebuffer was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:framebuffer was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateRenderPass"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkRenderPassCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkRenderPass")
                            "* "
                            (name nil "pRenderPass")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyRenderPass"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkRenderPass")
                              (name nil "renderPass"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All submitted commands that refer to pname:renderPass must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:renderPass was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:renderPass was created, pname:pAllocator must: be `NULL`")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkGetRenderAreaGranularity"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param nil
                                    (type nil "VkRenderPass")
                                    (name nil "renderPass"))
                             (param nil
                                    (type nil "VkExtent2D")
                                    "* "
                                    (name nil "pGranularity")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateCommandPool"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil "const "
                            (type nil "VkCommandPoolCreateInfo")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkCommandPool")
                            "* "
                            (name nil "pCommandPool")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyCommandPool"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkCommandPool")
                              (name nil "commandPool"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All sname:VkCommandBuffer objects allocated from pname:commandPool mustnot: be pending execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:commandPool was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:commandPool was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkResetCommandPool"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandPool")
                      (name nil "commandPool"))
                     (param
                      ((optional . "true"))
                      (type nil "VkCommandPoolResetFlags")
                      (name nil "flags"))
                     (validity nil
                               (usage nil "All sname:VkCommandBuffer objects allocated from pname:commandPool mustnot: currently be pending execution")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkAllocateCommandBuffers"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "pAllocateInfo->commandPool"))
                      "const "
                      (type nil "VkCommandBufferAllocateInfo")
                      "* "
                      (name nil "pAllocateInfo"))
                     (param
                      ((len . "pAllocateInfo->commandBufferCount"))
                      (type nil "VkCommandBuffer")
                      "* "
                      (name nil "pCommandBuffers")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkFreeCommandBuffers"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((externsync . "true"))
                              (type nil "VkCommandPool")
                              (name nil "commandPool"))
                             (param nil
                                    (type nil "uint32_t")
                                    (name nil "commandBufferCount"))
                             (param
                              ((noautovalidity . "true")
                               (externsync . "true")
                               (len . "commandBufferCount"))
                              "const "
                              (type nil "VkCommandBuffer")
                              "* "
                              (name nil "pCommandBuffers"))
                             (validity nil
                                       (usage nil "All elements of pname:pCommandBuffers mustnot: be pending execution")
                                       (usage nil "pname:pCommandBuffers must: be a pointer to an array of pname:commandBufferCount sname:VkCommandBuffer handles, each element of which must: either be a valid handle or sname:VK_NULL_HANDLE")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkBeginCommandBuffer"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil "const "
                            (type nil "VkCommandBufferBeginInfo")
                            "* "
                            (name nil "pBeginInfo"))
                     (validity nil
                               (usage nil "pname:commandBuffer mustnot: be in the recording state")
                               (usage nil "pname:commandBuffer mustnot: currently be pending execution")
                               (usage nil "If pname:commandBuffer was allocated from a sname:VkCommandPool which did not have the ename:VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, pname:commandBuffer must: be in the initial state.")
                               (usage nil "If pname:commandBuffer is a secondary command buffer, the pname:pInheritanceInfo member of pname:pBeginInfo must: be a valid sname:VkCommandBufferInheritanceInfo structure")
                               (usage nil "If pname:commandBuffer is a secondary command buffer and either the pname:occlusionQueryEnable member of the pname:pInheritanceInfo member of pname:pBeginInfo is ename:VK_FALSE, or the precise occlusion queries feature is not enabled, the pname:queryFlags member of the pname:pInheritanceInfo member pname:pBeginInfo mustnot: contain ename:VK_QUERY_CONTROL_PRECISE_BIT")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkEndCommandBuffer"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (validity nil
                               (usage nil "pname:commandBuffer must: be in the recording state")
                               (usage nil "fname:vkEndCommandBuffer mustnot: be called inside a render pass instance")
                               (usage nil "All queries made <<queries-operation-active,active>> during the recording of pname:commandBuffer must: have been made inactive")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkResetCommandBuffer"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param
                      ((optional . "true"))
                      (type nil "VkCommandBufferResetFlags")
                      (name nil "flags"))
                     (validity nil
                               (usage nil "pname:commandBuffer mustnot: currently be pending execution")
                               (usage nil "pname:commandBuffer must: have been allocated from a pool that was created with the ename:VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdBindPipeline"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkPipelineBindPoint")
                            (name nil "pipelineBindPoint"))
                     (param nil
                            (type nil "VkPipeline")
                            (name nil "pipeline"))
                     (validity nil
                               (usage nil "If pname:pipelineBindPoint is ename:VK_PIPELINE_BIND_POINT_COMPUTE, the sname:VkCommandPool that pname:commandBuffer was allocated from must: support compute operations")
                               (usage nil "If pname:pipelineBindPoint is ename:VK_PIPELINE_BIND_POINT_GRAPHICS, the sname:VkCommandPool that pname:commandBuffer was allocated from must: support graphics operations")
                               (usage nil "If pname:pipelineBindPoint is ename:VK_PIPELINE_BIND_POINT_COMPUTE, pname:pipeline must: be a compute pipeline")
                               (usage nil "If pname:pipelineBindPoint is ename:VK_PIPELINE_BIND_POINT_GRAPHICS, pname:pipeline must: be a graphics pipeline")
                               (usage nil "If the <<features-features-variableMultisampleRate,variable multisample rate>> feature is not supported, pname:pipeline is a graphics pipeline, the current subpass has no attachments, and this is not the first call to this function with a graphics pipeline after transitioning to the current subpass, then the sample count specified by this pipeline must: match that set in the previous pipeline")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdSetViewport"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstViewport"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "viewportCount"))
                     (param
                      ((len . "viewportCount"))
                      "const "
                      (type nil "VkViewport")
                      "* "
                      (name nil "pViewports"))
                     (validity nil
                               (usage nil "pname:firstViewport must: be less than sname:VkPhysicalDeviceLimits::pname:maxViewports")
                               (usage nil "The sum of pname:firstViewport and pname:viewportCount must: be between `1` and sname:VkPhysicalDeviceLimits::pname:maxViewports, inclusive")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdSetScissor"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstScissor"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "scissorCount"))
                     (param
                      ((len . "scissorCount"))
                      "const "
                      (type nil "VkRect2D")
                      "* "
                      (name nil "pScissors"))
                     (validity nil
                               (usage nil "pname:firstScissor must: be less than sname:VkPhysicalDeviceLimits::pname:maxViewports")
                               (usage nil "The sum of pname:firstScissor and pname:scissorCount must: be between `1` and sname:VkPhysicalDeviceLimits::pname:maxViewports, inclusive")
                               (usage nil "The pname:x and pname:y members of pname:offset must: be greater than or equal to `0`")
                               (usage nil "Evaluation of (pname:offset.x + pname:extent.width) mustnot: cause a signed integer addition overflow")
                               (usage nil "Evaluation of (pname:offset.y + pname:extent.height) mustnot: cause a signed integer addition overflow")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdSetLineWidth"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "float")
                            (name nil "lineWidth"))
                     (validity nil
                               (usage nil "If the <<features-features-wideLines,wide lines>> feature is not enabled, pname:lineWidth must: be `1.0`")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdSetDepthBias"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "float")
                            (name nil "depthBiasConstantFactor"))
                     (param nil
                            (type nil "float")
                            (name nil "depthBiasClamp"))
                     (param nil
                            (type nil "float")
                            (name nil "depthBiasSlopeFactor"))
                     (validity nil
                               (usage nil "If the <<features-features-depthBiasClamp,depth bias clamping>> feature is not enabled, pname:depthBiasClamp must: be code:0.0")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdSetBlendConstants"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil "const "
                            (type nil "float")
                            " "
                            (name nil "blendConstants")
                            "[4]"))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdSetDepthBounds"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "float")
                            (name nil "minDepthBounds"))
                     (param nil
                            (type nil "float")
                            (name nil "maxDepthBounds"))
                     (validity nil
                               (usage nil "pname:minDepthBounds must: be between `0.0` and `1.0`, inclusive")
                               (usage nil "pname:maxDepthBounds must: be between `0.0` and `1.0`, inclusive")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdSetStencilCompareMask"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkStencilFaceFlags")
                            (name nil "faceMask"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "compareMask")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdSetStencilWriteMask"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkStencilFaceFlags")
                            (name nil "faceMask"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "writeMask")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdSetStencilReference"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkStencilFaceFlags")
                            (name nil "faceMask"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "reference")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdBindDescriptorSets"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkPipelineBindPoint")
                            (name nil "pipelineBindPoint"))
                     (param nil
                            (type nil "VkPipelineLayout")
                            (name nil "layout"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstSet"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "descriptorSetCount"))
                     (param
                      ((len . "descriptorSetCount"))
                      "const "
                      (type nil "VkDescriptorSet")
                      "* "
                      (name nil "pDescriptorSets"))
                     (param
                      ((optional . "true"))
                      (type nil "uint32_t")
                      (name nil "dynamicOffsetCount"))
                     (param
                      ((len . "dynamicOffsetCount"))
                      "const "
                      (type nil "uint32_t")
                      "* "
                      (name nil "pDynamicOffsets"))
                     (validity nil
                               (usage nil "Any given element of pname:pDescriptorSets must: have been created with a sname:VkDescriptorSetLayout that matches (is the same as, or defined identically to) the sname:VkDescriptorSetLayout at set _n_ in pname:layout, where _n_ is the sum of pname:firstSet and the index into pname:pDescriptorSets")
                               (usage nil "pname:dynamicOffsetCount must: be equal to the total number of dynamic descriptors in pname:pDescriptorSets")
                               (usage nil "pname:pipelineBindPoint must: be supported by the pname:commandBuffer's parent sname:VkCommandPool's queue family")
                               (usage nil "Any given element of pname:pDynamicOffsets must: satisfy the required alignment for the corresponding descriptor binding's descriptor type")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdBindIndexBuffer"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "buffer"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "offset"))
                     (param nil
                            (type nil "VkIndexType")
                            (name nil "indexType"))
                     (validity nil
                               (usage nil "pname:offset must: be less than the size of pname:buffer")
                               (usage nil "The sum of pname:offset, and the address of the range of sname:VkDeviceMemory object that's backing pname:buffer, must: be a multiple of the type indicated by pname:indexType")
                               (usage nil "pname:buffer must: have been created with the ename:VK_BUFFER_USAGE_INDEX_BUFFER_BIT flag")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdBindVertexBuffers"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstBinding"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "bindingCount"))
                     (param
                      ((len . "bindingCount"))
                      "const "
                      (type nil "VkBuffer")
                      "* "
                      (name nil "pBuffers"))
                     (param
                      ((len . "bindingCount"))
                      "const "
                      (type nil "VkDeviceSize")
                      "* "
                      (name nil "pOffsets"))
                     (validity nil
                               (usage nil "pname:firstBinding must: be less than sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindings")
                               (usage nil "The sum of pname:firstBinding and pname:bindingCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindings")
                               (usage nil "All elements of pname:pOffsets must: be less than the size of the corresponding element in pname:pBuffers")
                               (usage nil "All elements of pname:pBuffers must: have been created with the ename:VK_BUFFER_USAGE_VERTEX_BUFFER_BIT flag")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "inside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdDraw"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "vertexCount"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "instanceCount"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstVertex"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstInstance"))
                     (validity nil
                               (usage nil "For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for push constants, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline")
                               (usage nil "All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must: have valid buffers bound")
                               (usage nil "For a given vertex buffer binding, any attribute data fetched must: be entirely contained within the corresponding vertex buffer binding, as described in <<fxvertex-input>>")
                               (usage nil "A valid graphics pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_GRAPHICS")
                               (usage nil "If the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must: have been set on the current command buffer")
                               (usage nil "Every input attachment used by the current subpass must: be bound to the pipeline via a descriptor set")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "Any sname:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "inside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdDrawIndexed"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "indexCount"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "instanceCount"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstIndex"))
                     (param nil
                            (type nil "int32_t")
                            (name nil "vertexOffset"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstInstance"))
                     (validity nil
                               (usage nil "For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for push constants, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline")
                               (usage nil "All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must: have valid buffers bound")
                               (usage nil "For a given vertex buffer binding, any attribute data fetched must: be entirely contained within the corresponding vertex buffer binding, as described in <<fxvertex-input>>")
                               (usage nil "A valid graphics pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_GRAPHICS")
                               (usage nil "If the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must: have been set on the current command buffer")
                               (usage nil "(pname:indexSize * (pname:firstIndex + pname:indexCount) + pname:offset) must: be less than or equal to the size of the currently bound index buffer, with indexSize being based on the type specified by pname:indexType, where the index buffer, pname:indexType, and pname:offset are specified via fname:vkCmdBindIndexBuffer")
                               (usage nil "Every input attachment used by the current subpass must: be bound to the pipeline via a descriptor set")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "Any sname:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "inside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdDrawIndirect"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "buffer"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "offset"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "drawCount"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "stride"))
                     (validity nil
                               (usage nil "pname:offset must: be a multiple of `4`")
                               (usage nil "If pname:drawCount is greater than `1`, pname:stride must: be a multiple of `4` and must: be greater than or equal to sizeof(sname:VkDrawIndirectCommand)")
                               (usage nil "If the <<features-features-multiDrawIndirect,multi-draw indirect>> feature is not enabled, pname:drawCount must: be `0` or `1`")
                               (usage nil "If the <<features-features-drawIndirectFirstInstance,drawIndirectFirstInstance>> feature is not enabled, all the pname:firstInstance members of the sname:VkDrawIndirectCommand structures accessed by this command must: be code:0")
                               (usage nil "For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for push constants, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline")
                               (usage nil "All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must: have valid buffers bound")
                               (usage nil "A valid graphics pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_GRAPHICS")
                               (usage nil "If the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must: have been set on the current command buffer")
                               (usage nil "If pname:drawCount is equal to `1`, (pname:offset + sizeof(sname:VkDrawIndirectCommand)) must: be less than or equal to the size of pname:buffer")
                               (usage nil "If pname:drawCount is greater than `1`, (pname:stride x (pname:drawCount - 1) + pname:offset + sizeof(sname:VkDrawIndirectCommand)) must: be less than or equal to the size of pname:buffer")
                               (usage nil "pname:drawCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxDrawIndirectCount")
                               (usage nil "Every input attachment used by the current subpass must: be bound to the pipeline via a descriptor set")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "Any sname:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "inside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdDrawIndexedIndirect"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "buffer"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "offset"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "drawCount"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "stride"))
                     (validity nil
                               (usage nil "pname:offset must: be a multiple of `4`")
                               (usage nil "If pname:drawCount is greater than `1`, pname:stride must: be a multiple of `4` and must: be greater than or equal to sizeof(sname:VkDrawIndexedIndirectCommand)")
                               (usage nil "If the <<features-features-multiDrawIndirect,multi-draw indirect>> feature is not enabled, pname:drawCount must: be `0` or `1`")
                               (usage nil "If the <<features-features-drawIndirectFirstInstance,drawIndirectFirstInstance>> feature is not enabled, all the pname:firstInstance members of the sname:VkDrawIndexedIndirectCommand structures accessed by this command must: be code:0")
                               (usage nil "For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for push constants, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline")
                               (usage nil "All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must: have valid buffers bound")
                               (usage nil "A valid graphics pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_GRAPHICS")
                               (usage nil "If the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must: have been set on the current command buffer")
                               (usage nil "If pname:drawCount is equal to `1`, (pname:offset + sizeof(sname:VkDrawIndexedIndirectCommand)) must: be less than or equal to the size of pname:buffer")
                               (usage nil "If pname:drawCount is greater than `1`, (pname:stride x (pname:drawCount - 1) + pname:offset + sizeof(sname:VkDrawIndexedIndirectCommand)) must: be less than or equal to the size of pname:buffer")
                               (usage nil "pname:drawCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxDrawIndirectCount")
                               (usage nil "Every input attachment used by the current subpass must: be bound to the pipeline via a descriptor set")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "Any sname:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")))
                    (command
                     ((queues . "compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdDispatch"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "x"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "y"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "z"))
                     (validity nil
                               (usage nil "pname:x must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[0]")
                               (usage nil "pname:y must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[1]")
                               (usage nil "pname:z must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[2]")
                               (usage nil "For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_COMPUTE, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline")
                               (usage nil "A valid compute pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_COMPUTE")
                               (usage nil "For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_COMPUTE, with a sname:VkPipelineLayout that is compatible for push constants with the one used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "Any sname:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")))
                    (command
                     ((queues . "compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdDispatchIndirect"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "buffer"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "offset"))
                     (validity nil
                               (usage nil "For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_COMPUTE, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline")
                               (usage nil "A valid compute pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_COMPUTE")
                               (usage nil "pname:buffer must: have been created with the ename:VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set")
                               (usage nil "pname:offset must: be a multiple of `4`")
                               (usage nil "The sum of pname:offset and the size of sname:VkDispatchIndirectCommand must: be less than or equal to the size of pname:buffer")
                               (usage nil "For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_COMPUTE, with a sname:VkPipelineLayout that is compatible for push constants with the one used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage")
                               (usage nil "If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set")
                               (usage nil "Any sname:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")))
                    (command
                     ((queues . "transfer,graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdCopyBuffer"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "srcBuffer"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "dstBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "regionCount"))
                     (param
                      ((len . "regionCount"))
                      "const "
                      (type nil "VkBufferCopy")
                      "* "
                      (name nil "pRegions"))
                     (validity nil
                               (usage nil "The pname:size member of a given element of pname:pRegions must: be greater than `0`")
                               (usage nil "The pname:srcOffset member of a given element of pname:pRegions must: be less than the size of pname:srcBuffer")
                               (usage nil "The pname:dstOffset member of a given element of pname:pRegions must: be less than the size of pname:dstBuffer")
                               (usage nil "The pname:size member of a given element of pname:pRegions must: be less than or equal to the size of pname:srcBuffer minus pname:srcOffset")
                               (usage nil "The pname:size member of a given element of pname:pRegions must: be less than or equal to the size of pname:dstBuffer minus pname:dstOffset")
                               (usage nil "The union of the source regions, and the union of the destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory")
                               (usage nil "pname:srcBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag")
                               (usage nil "pname:dstBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag")))
                    (command
                     ((queues . "transfer,graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdCopyImage"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkImage")
                            (name nil "srcImage"))
                     (param nil
                            (type nil "VkImageLayout")
                            (name nil "srcImageLayout"))
                     (param nil
                            (type nil "VkImage")
                            (name nil "dstImage"))
                     (param nil
                            (type nil "VkImageLayout")
                            (name nil "dstImageLayout"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "regionCount"))
                     (param
                      ((len . "regionCount"))
                      "const "
                      (type nil "VkImageCopy")
                      "* "
                      (name nil "pRegions"))
                     (validity nil
                               (usage nil "The source region specified by a given element of pname:pRegions must: be a region that is contained within pname:srcImage")
                               (usage nil "The destination region specified by a given element of pname:pRegions must: be a region that is contained within pname:dstImage")
                               (usage nil "The union of all source regions, and the union of all destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory")
                               (usage nil "pname:srcImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag")
                               (usage nil "pname:srcImageLayout must: specify the layout of the image subresources of pname:srcImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice")
                               (usage nil "pname:srcImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL")
                               (usage nil "pname:dstImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag")
                               (usage nil "pname:dstImageLayout must: specify the layout of the image subresources of pname:dstImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice")
                               (usage nil "pname:dstImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL")
                               (usage nil "The elink:VkFormat of each of pname:srcImage and pname:dstImage must: be compatible, as defined <<copies-images-format-compatibility, below>>")
                               (usage nil "The sample count of pname:srcImage and pname:dstImage must: match")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdBlitImage"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkImage")
                            (name nil "srcImage"))
                     (param nil
                            (type nil "VkImageLayout")
                            (name nil "srcImageLayout"))
                     (param nil
                            (type nil "VkImage")
                            (name nil "dstImage"))
                     (param nil
                            (type nil "VkImageLayout")
                            (name nil "dstImageLayout"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "regionCount"))
                     (param
                      ((len . "regionCount"))
                      "const "
                      (type nil "VkImageBlit")
                      "* "
                      (name nil "pRegions"))
                     (param nil
                            (type nil "VkFilter")
                            (name nil "filter"))
                     (validity nil
                               (usage nil "The source region specified by a given element of pname:pRegions must: be a region that is contained within pname:srcImage")
                               (usage nil "The destination region specified by a given element of pname:pRegions must: be a region that is contained within pname:dstImage")
                               (usage nil "The union of all source regions, and the union of all destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory")
                               (usage nil "pname:srcImage must: use a format that supports ename:VK_FORMAT_FEATURE_BLIT_SRC_BIT, which is indicated by sname:VkFormatProperties::pname:linearTilingFeatures (for linear tiled images) or sname:VkFormatProperties::pname:optimalTilingFeatures (for optimally tiled images) - as returned by fname:vkGetPhysicalDeviceFormatProperties")
                               (usage nil "pname:srcImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag")
                               (usage nil "pname:srcImageLayout must: specify the layout of the image subresources of pname:srcImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice")
                               (usage nil "pname:srcImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL")
                               (usage nil "pname:dstImage must: use a format that supports ename:VK_FORMAT_FEATURE_BLIT_DST_BIT, which is indicated by sname:VkFormatProperties::pname:linearTilingFeatures (for linear tiled images) or sname:VkFormatProperties::pname:optimalTilingFeatures (for optimally tiled images) - as returned by fname:vkGetPhysicalDeviceFormatProperties")
                               (usage nil "pname:dstImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag")
                               (usage nil "pname:dstImageLayout must: specify the layout of the image subresources of pname:dstImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice")
                               (usage nil "pname:dstImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL")
                               (usage nil "The sample count of pname:srcImage and pname:dstImage must: both be equal to ename:VK_SAMPLE_COUNT_1_BIT")
                               (usage nil "If either of pname:srcImage or pname:dstImage was created with a signed integer elink:VkFormat, the other must: also have been created with a signed integer elink:VkFormat")
                               (usage nil "If either of pname:srcImage or pname:dstImage was created with an unsigned integer elink:VkFormat, the other must: also have been created with an unsigned integer elink:VkFormat")
                               (usage nil "If either of pname:srcImage or pname:dstImage was created with a depth/stencil format, the other must: have exactly the same format")
                               (usage nil "If pname:srcImage was created with a depth/stencil format, pname:filter must: be ename:VK_FILTER_NEAREST")))
                    (command
                     ((queues . "transfer,graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdCopyBufferToImage"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "srcBuffer"))
                     (param nil
                            (type nil "VkImage")
                            (name nil "dstImage"))
                     (param nil
                            (type nil "VkImageLayout")
                            (name nil "dstImageLayout"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "regionCount"))
                     (param
                      ((len . "regionCount"))
                      "const "
                      (type nil "VkBufferImageCopy")
                      "* "
                      (name nil "pRegions"))
                     (validity nil
                               (usage nil "The buffer region specified by a given element of pname:pRegions must: be a region that is contained within pname:srcBuffer")
                               (usage nil "The image region specified by a given element of pname:pRegions must: be a region that is contained within pname:dstImage")
                               (usage nil "The union of all source regions, and the union of all destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory")
                               (usage nil "pname:srcBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag")
                               (usage nil "pname:dstImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag")
                               (usage nil "pname:dstImage must: have a sample count equal to ename:VK_SAMPLE_COUNT_1_BIT")
                               (usage nil "pname:dstImageLayout must: specify the layout of the image subresources of pname:dstImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice")
                               (usage nil "pname:dstImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL")))
                    (command
                     ((queues . "transfer,graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdCopyImageToBuffer"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkImage")
                            (name nil "srcImage"))
                     (param nil
                            (type nil "VkImageLayout")
                            (name nil "srcImageLayout"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "dstBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "regionCount"))
                     (param
                      ((len . "regionCount"))
                      "const "
                      (type nil "VkBufferImageCopy")
                      "* "
                      (name nil "pRegions"))
                     (validity nil
                               (usage nil "The image region specified by a given element of pname:pRegions must: be a region that is contained within pname:srcImage")
                               (usage nil "The buffer region specified by a given element of pname:pRegions must: be a region that is contained within pname:dstBuffer")
                               (usage nil "The union of all source regions, and the union of all destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory")
                               (usage nil "pname:srcImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag")
                               (usage nil "pname:srcImage must: have a sample count equal to ename:VK_SAMPLE_COUNT_1_BIT")
                               (usage nil "pname:srcImageLayout must: specify the layout of the image subresources of pname:srcImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice")
                               (usage nil "pname:srcImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL")
                               (usage nil "pname:dstBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag")))
                    (command
                     ((queues . "transfer,graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdUpdateBuffer"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "dstBuffer"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "dstOffset"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "dataSize"))
                     (param
                      ((len . "latexmath:[$dataSize \\over 4$]"))
                      "const "
                      (type nil "uint32_t")
                      "* "
                      (name nil "pData"))
                     (validity nil
                               (usage nil "pname:dataSize must: be greater than `0`")
                               (usage nil "pname:dstOffset must: be less than the size of pname:dstBuffer")
                               (usage nil "pname:dataSize must: be less than or equal to the size of pname:dstBuffer minus pname:dstOffset")
                               (usage nil "pname:dstBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag")
                               (usage nil "pname:dstOffset must: be a multiple of `4`")
                               (usage nil "pname:dataSize must: be less than or equal to `65536`")
                               (usage nil "pname:dataSize must: be a multiple of `4`")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdFillBuffer"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "dstBuffer"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "dstOffset"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "size"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "data"))
                     (validity nil
                               (usage nil "pname:dstOffset must: be less than the size of pname:dstBuffer")
                               (usage nil "pname:dstOffset must: be a multiple of `4`")
                               (usage nil "If pname:size is not equal to ename:VK_WHOLE_SIZE, pname:size must: be greater than `0`")
                               (usage nil "If pname:size is not equal to ename:VK_WHOLE_SIZE, pname:size must: be less than or equal to the size of pname:dstBuffer minus pname:dstOffset")
                               (usage nil "If pname:size is not equal to ename:VK_WHOLE_SIZE, pname:size must: be a multiple of `4`")
                               (usage nil "pname:dstBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdClearColorImage"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkImage")
                            (name nil "image"))
                     (param nil
                            (type nil "VkImageLayout")
                            (name nil "imageLayout"))
                     (param nil "const "
                            (type nil "VkClearColorValue")
                            "* "
                            (name nil "pColor"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "rangeCount"))
                     (param
                      ((len . "rangeCount"))
                      "const "
                      (type nil "VkImageSubresourceRange")
                      "* "
                      (name nil "pRanges"))
                     (validity nil
                               (usage nil "pname:image must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag")
                               (usage nil "pname:imageLayout must: specify the layout of the image subresource ranges of pname:image specified in pname:pRanges at the time this command is executed on a sname:VkDevice")
                               (usage nil "pname:imageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL")
                               (usage nil "The image range of any given element of pname:pRanges must: be a image subresource range that is contained within pname:image")
                               (usage nil "pname:image mustnot: have a compressed or depth/stencil format")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdClearDepthStencilImage"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkImage")
                            (name nil "image"))
                     (param nil
                            (type nil "VkImageLayout")
                            (name nil "imageLayout"))
                     (param nil "const "
                            (type nil "VkClearDepthStencilValue")
                            "* "
                            (name nil "pDepthStencil"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "rangeCount"))
                     (param
                      ((len . "rangeCount"))
                      "const "
                      (type nil "VkImageSubresourceRange")
                      "* "
                      (name nil "pRanges"))
                     (validity nil
                               (usage nil "pname:image must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag")
                               (usage nil "pname:imageLayout must: specify the layout of the image subresource ranges of pname:image specified in pname:pRanges at the time this command is executed on a sname:VkDevice")
                               (usage nil "pname:imageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL")
                               (usage nil "The image range of any given element of pname:pRanges must: be a image subresource range that is contained within pname:image")
                               (usage nil "pname:image must: have a depth/stencil format")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "inside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdClearAttachments"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "attachmentCount"))
                     (param
                      ((len . "attachmentCount"))
                      "const "
                      (type nil "VkClearAttachment")
                      "* "
                      (name nil "pAttachments"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "rectCount"))
                     (param
                      ((len . "rectCount"))
                      "const "
                      (type nil "VkClearRect")
                      "* "
                      (name nil "pRects"))
                     (validity nil
                               (usage nil "If the pname:aspectMask member of any given element of pname:pAttachments contains ename:VK_IMAGE_ASPECT_COLOR_BIT, the pname:colorAttachment member of those elements must: refer to a valid color attachment in the current subpass")
                               (usage nil "The rectangular region specified by a given element of pname:pRects must: be contained within the render area of the current render pass instance")
                               (usage nil "The layers specified by a given element of pname:pRects must: be contained within every attachment that pname:pAttachments refers to")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdResolveImage"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkImage")
                            (name nil "srcImage"))
                     (param nil
                            (type nil "VkImageLayout")
                            (name nil "srcImageLayout"))
                     (param nil
                            (type nil "VkImage")
                            (name nil "dstImage"))
                     (param nil
                            (type nil "VkImageLayout")
                            (name nil "dstImageLayout"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "regionCount"))
                     (param
                      ((len . "regionCount"))
                      "const "
                      (type nil "VkImageResolve")
                      "* "
                      (name nil "pRegions"))
                     (validity nil
                               (usage nil "The source region specified by a given element of pname:pRegions must: be a region that is contained within pname:srcImage")
                               (usage nil "The destination region specified by a given element of pname:pRegions must: be a region that is contained within pname:dstImage")
                               (usage nil "The union of all source regions, and the union of all destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory")
                               (usage nil "pname:srcImage must: have a sample count equal to any valid sample count value other than ename:VK_SAMPLE_COUNT_1_BIT")
                               (usage nil "pname:dstImage must: have a sample count equal to ename:VK_SAMPLE_COUNT_1_BIT")
                               (usage nil "pname:srcImageLayout must: specify the layout of the image subresources of pname:srcImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice")
                               (usage nil "pname:srcImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL")
                               (usage nil "pname:dstImageLayout must: specify the layout of the image subresources of pname:dstImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice")
                               (usage nil "pname:dstImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL")
                               (usage nil "If pname:dstImage was created with pname:tiling equal to ename:VK_IMAGE_TILING_LINEAR, pname:dstImage must: have been created with a pname:format that supports being a color attachment, as specified by the ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")
                               (usage nil "If pname:dstImage was created with pname:tiling equal to ename:VK_IMAGE_TILING_OPTIMAL, pname:dstImage must: have been created with a pname:format that supports being a color attachment, as specified by the ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdSetEvent"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkEvent")
                            (name nil "event"))
                     (param nil
                            (type nil "VkPipelineStageFlags")
                            (name nil "stageMask"))
                     (validity nil
                               (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:stageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT")
                               (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:stageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdResetEvent"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkEvent")
                            (name nil "event"))
                     (param nil
                            (type nil "VkPipelineStageFlags")
                            (name nil "stageMask"))
                     (validity nil
                               (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:stageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT")
                               (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:stageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdWaitEvents"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "eventCount"))
                     (param
                      ((len . "eventCount"))
                      "const "
                      (type nil "VkEvent")
                      "* "
                      (name nil "pEvents"))
                     (param nil
                            (type nil "VkPipelineStageFlags")
                            (name nil "srcStageMask"))
                     (param nil
                            (type nil "VkPipelineStageFlags")
                            (name nil "dstStageMask"))
                     (param
                      ((optional . "true"))
                      (type nil "uint32_t")
                      (name nil "memoryBarrierCount"))
                     (param
                      ((len . "memoryBarrierCount"))
                      "const "
                      (type nil "VkMemoryBarrier")
                      "* "
                      (name nil "pMemoryBarriers"))
                     (param
                      ((optional . "true"))
                      (type nil "uint32_t")
                      (name nil "bufferMemoryBarrierCount"))
                     (param
                      ((len . "bufferMemoryBarrierCount"))
                      "const "
                      (type nil "VkBufferMemoryBarrier")
                      "* "
                      (name nil "pBufferMemoryBarriers"))
                     (param
                      ((optional . "true"))
                      (type nil "uint32_t")
                      (name nil "imageMemoryBarrierCount"))
                     (param
                      ((len . "imageMemoryBarrierCount"))
                      "const "
                      (type nil "VkImageMemoryBarrier")
                      "* "
                      (name nil "pImageMemoryBarriers"))
                     (validity nil
                               (usage nil "pname:srcStageMask must: be the bitwise OR of the pname:stageMask parameter used in previous calls to fname:vkCmdSetEvent with any of the members of pname:pEvents and ename:VK_PIPELINE_STAGE_HOST_BIT if any of the members of pname:pEvents was set using fname:vkSetEvent")
                               (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT")
                               (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT")
                               (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT")
                               (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT")
                               (usage nil "If pname:pEvents includes one or more events that will be signaled by fname:vkSetEvent after pname:commandBuffer has been submitted to a queue, then fname:vkCmdWaitEvents mustnot: be called inside a render pass instance")))
                    (command
                     ((queues . "transfer,graphics,compute")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdPipelineBarrier"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkPipelineStageFlags")
                            (name nil "srcStageMask"))
                     (param nil
                            (type nil "VkPipelineStageFlags")
                            (name nil "dstStageMask"))
                     (param
                      ((optional . "true"))
                      (type nil "VkDependencyFlags")
                      (name nil "dependencyFlags"))
                     (param
                      ((optional . "true"))
                      (type nil "uint32_t")
                      (name nil "memoryBarrierCount"))
                     (param
                      ((len . "memoryBarrierCount"))
                      "const "
                      (type nil "VkMemoryBarrier")
                      "* "
                      (name nil "pMemoryBarriers"))
                     (param
                      ((optional . "true"))
                      (type nil "uint32_t")
                      (name nil "bufferMemoryBarrierCount"))
                     (param
                      ((len . "bufferMemoryBarrierCount"))
                      "const "
                      (type nil "VkBufferMemoryBarrier")
                      "* "
                      (name nil "pBufferMemoryBarriers"))
                     (param
                      ((optional . "true"))
                      (type nil "uint32_t")
                      (name nil "imageMemoryBarrierCount"))
                     (param
                      ((len . "imageMemoryBarrierCount"))
                      "const "
                      (type nil "VkImageMemoryBarrier")
                      "* "
                      (name nil "pImageMemoryBarriers"))
                     (validity nil
                               (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT")
                               (usage nil "If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT")
                               (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT")
                               (usage nil "If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT")
                               (usage nil "If fname:vkCmdPipelineBarrier is called within a render pass instance, the render pass must: declare at least one self-dependency from the current subpass to itself - see <<synchronization-pipeline-barriers-subpass-self-dependencies,Subpass Self-dependency>>")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdBeginQuery"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkQueryPool")
                            (name nil "queryPool"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "query"))
                     (param
                      ((optional . "true"))
                      (type nil "VkQueryControlFlags")
                      (name nil "flags"))
                     (validity nil
                               (usage nil "The query identified by pname:queryPool and pname:query must: currently not be <<queries-operation-active,active>>")
                               (usage nil "The query identified by pname:queryPool and pname:query must: be unavailable")
                               (usage nil "If the <<features-features-occlusionQueryPrecise,precise occlusion queries>> feature is not enabled, or the pname:queryType used to create pname:queryPool was not ename:VK_QUERY_TYPE_OCCLUSION, pname:flags mustnot: contain ename:VK_QUERY_CONTROL_PRECISE_BIT")
                               (usage nil "pname:queryPool must: have been created with a pname:queryType that differs from that of any other queries that have been made <<queries-operation-active,active>>, and are currently still active within pname:commandBuffer")
                               (usage nil "pname:query must: be less than the number of queries in pname:queryPool")
                               (usage nil "If the pname:queryType used to create pname:queryPool was ename:VK_QUERY_TYPE_OCCLUSION, the sname:VkCommandPool that pname:commandBuffer was created from must: support graphics operations")
                               (usage nil "If the pname:queryType used to create pname:queryPool was ename:VK_QUERY_TYPE_PIPELINE_STATISTICS and any of the pname:pipelineStatistics indicate graphics operations, the sname:VkCommandPool that pname:commandBuffer was created from must: support graphics operations")
                               (usage nil "If the pname:queryType used to create pname:queryPool was ename:VK_QUERY_TYPE_PIPELINE_STATISTICS and any of the pname:pipelineStatistics indicate compute operations, the sname:VkCommandPool that pname:commandBuffer was created from must: support compute operations")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdEndQuery"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkQueryPool")
                            (name nil "queryPool"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "query"))
                     (validity nil
                               (usage nil "The query identified by pname:queryPool and pname:query must: currently be <<queries-operation-active,active>>")
                               (usage nil "pname:query must: be less than the number of queries in pname:queryPool")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdResetQueryPool"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkQueryPool")
                            (name nil "queryPool"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstQuery"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "queryCount"))
                     (validity nil
                               (usage nil "pname:firstQuery must: be less than the number of queries in pname:queryPool")
                               (usage nil "The sum of pname:firstQuery and pname:queryCount must: be less than or equal to the number of queries in pname:queryPool")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdWriteTimestamp"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkPipelineStageFlagBits")
                            (name nil "pipelineStage"))
                     (param nil
                            (type nil "VkQueryPool")
                            (name nil "queryPool"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "query"))
                     (validity nil
                               (usage nil "The query identified by pname:queryPool and pname:query must: be _unavailable_")
                               (usage nil "The command pool's queue family must: support a non-zero pname:timestampValidBits")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdCopyQueryPoolResults"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkQueryPool")
                            (name nil "queryPool"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "firstQuery"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "queryCount"))
                     (param nil
                            (type nil "VkBuffer")
                            (name nil "dstBuffer"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "dstOffset"))
                     (param nil
                            (type nil "VkDeviceSize")
                            (name nil "stride"))
                     (param
                      ((optional . "true"))
                      (type nil "VkQueryResultFlags")
                      (name nil "flags"))
                     (validity nil
                               (usage nil "pname:dstOffset must: be less than the size of pname:dstBuffer")
                               (usage nil "pname:firstQuery must: be less than the number of queries in pname:queryPool")
                               (usage nil "The sum of pname:firstQuery and pname:queryCount must: be less than or equal to the number of queries in pname:queryPool")
                               (usage nil "If ename:VK_QUERY_RESULT_64_BIT is not set in pname:flags then pname:dstOffset and pname:stride must: be multiples of `4`")
                               (usage nil "If ename:VK_QUERY_RESULT_64_BIT is set in pname:flags then pname:dstOffset and pname:stride must: be multiples of `8`")
                               (usage nil "pname:dstBuffer must: have enough storage, from pname:dstOffset, to contain the result of each query, as described <<queries-operation-memorylayout,here>>")
                               (usage nil "pname:dstBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag")
                               (usage nil "If the pname:queryType used to create pname:queryPool was ename:VK_QUERY_TYPE_TIMESTAMP, pname:flags mustnot: contain ename:VK_QUERY_RESULT_PARTIAL_BIT")))
                    (command
                     ((queues . "graphics,compute")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary,secondary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdPushConstants"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkPipelineLayout")
                            (name nil "layout"))
                     (param nil
                            (type nil "VkShaderStageFlags")
                            (name nil "stageFlags"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "offset"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "size"))
                     (param
                      ((len . "size"))
                      "const "
                      (type nil "void")
                      "* "
                      (name nil "pValues"))
                     (validity nil
                               (usage nil "pname:stageFlags must: match exactly the shader stages used in pname:layout for the range specified by pname:offset and pname:size")
                               (usage nil "pname:offset must: be a multiple of `4`")
                               (usage nil "pname:size must: be a multiple of `4`")
                               (usage nil "pname:offset must: be less than sname:VkPhysicalDeviceLimits::pname:maxPushConstantsSize")
                               (usage nil "pname:size must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxPushConstantsSize minus pname:offset")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "outside")
                      (cmdbufferlevel . "primary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdBeginRenderPass"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil "const "
                            (type nil "VkRenderPassBeginInfo")
                            "* "
                            (name nil "pRenderPassBegin"))
                     (param nil
                            (type nil "VkSubpassContents")
                            (name nil "contents"))
                     (validity nil
                               (usage nil "If any of the pname:initialLayout or pname:finalLayout member of the sname:VkAttachmentDescription structures or the pname:layout member of the sname:VkAttachmentReference structures specified when creating the render pass specified in the pname:renderPass member of pname:pRenderPassBegin is ename:VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then the corresponding attachment image of the framebuffer specified in the pname:framebuffer member of pname:pRenderPassBegin must: have been created with ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set")
                               (usage nil "If any of the pname:initialLayout or pname:finalLayout member of the sname:VkAttachmentDescription structures or the pname:layout member of the sname:VkAttachmentReference structures specified when creating the render pass specified in the pname:renderPass member of pname:pRenderPassBegin is ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL or ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image of the framebuffer specified in the pname:framebuffer member of pname:pRenderPassBegin must: have been created with ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set")
                               (usage nil "If any of the pname:initialLayout or pname:finalLayout member of the sname:VkAttachmentDescription structures or the pname:layout member of the sname:VkAttachmentReference structures specified when creating the render pass specified in the pname:renderPass member of pname:pRenderPassBegin is ename:VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then the corresponding attachment image of the framebuffer specified in the pname:framebuffer member of pname:pRenderPassBegin must: have been created with ename:VK_IMAGE_USAGE_SAMPLED_BIT or ename:VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set")
                               (usage nil "If any of the pname:initialLayout or pname:finalLayout member of the sname:VkAttachmentDescription structures or the pname:layout member of the sname:VkAttachmentReference structures specified when creating the render pass specified in the pname:renderPass member of pname:pRenderPassBegin is ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_BIT then the corresponding attachment image of the framebuffer specified in the pname:framebuffer member of pname:pRenderPassBegin must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_SRC_BIT set")
                               (usage nil "If any of the pname:initialLayout or pname:finalLayout member of the sname:VkAttachmentDescription structures or the pname:layout member of the sname:VkAttachmentReference structures specified when creating the render pass specified in the pname:renderPass member of pname:pRenderPassBegin is ename:VK_IMAGE_LAYOUT_TRANSFER_DST_BIT then the corresponding attachment image of the framebuffer specified in the pname:framebuffer member of pname:pRenderPassBegin must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT set")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "inside")
                      (cmdbufferlevel . "primary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdNextSubpass"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "VkSubpassContents")
                            (name nil "contents"))
                     (validity nil
                               (usage nil "The current subpass index must: be less than the number of subpasses in the render pass minus one")))
                    (command
                     ((queues . "graphics")
                      (renderpass . "inside")
                      (cmdbufferlevel . "primary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdEndRenderPass"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (validity nil
                               (usage nil "The current subpass index must: be equal to the number of subpasses in the render pass minus one")))
                    (command
                     ((queues . "transfer,graphics,compute")
                      (renderpass . "both")
                      (cmdbufferlevel . "primary"))
                     (proto nil
                            (type nil "void")
                            (name nil "vkCmdExecuteCommands"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkCommandBuffer")
                      (name nil "commandBuffer"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "commandBufferCount"))
                     (param
                      ((len . "commandBufferCount"))
                      "const "
                      (type nil "VkCommandBuffer")
                      "* "
                      (name nil "pCommandBuffers"))
                     (validity nil
                               (usage nil "pname:commandBuffer must: have been created with a pname:level of ename:VK_COMMAND_BUFFER_LEVEL_PRIMARY")
                               (usage nil "Any given element of pname:pCommandBuffers must: have been created with a pname:level of ename:VK_COMMAND_BUFFER_LEVEL_SECONDARY")
                               (usage nil "Any given element of pname:pCommandBuffers mustnot: be already pending execution in pname:commandBuffer, or appear twice in pname:pCommandBuffers, unless it was created with the ename:VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag")
                               (usage nil "Any given element of pname:pCommandBuffers mustnot: be already pending execution in any other sname:VkCommandBuffer, unless it was created with the ename:VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag")
                               (usage nil "Any given element of pname:pCommandBuffers must: be in the executable state")
                               (usage nil "If fname:vkCmdExecuteCommands is being called within a render pass instance, that render pass instance must: have been begun with the pname:contents parameter of fname:vkCmdBeginRenderPass set to ename:VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS")
                               (usage nil "If fname:vkCmdExecuteCommands is being called within a render pass instance, any given element of pname:pCommandBuffers must: have been recorded with the ename:VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT")
                               (usage nil "If fname:vkCmdExecuteCommands is being called within a render pass instance, any given element of pname:pCommandBuffers must: have been recorded with the pname:subpass member of the pname:inheritanceInfo structure set to the index of the subpass which the given command buffer will be executed in")
                               (usage nil "If fname:vkCmdExecuteCommands is being called within a render pass instance, any given element of pname:pCommandBuffers must: have been recorded with a render pass that is compatible with the current render pass - see <<renderpass-compatibility>>")
                               (usage nil "If fname:vkCmdExecuteCommands is being called within a render pass instance, and any given element of pname:pCommandBuffers was recorded with the pname:framebuffer member of the sname:VkCommandBufferInheritanceInfo structure not equal to sname:VK_NULL_HANDLE, that sname:VkFramebuffer must: be compatible with the sname:VkFramebuffer used in the current render pass instance")
                               (usage nil "If the <<features-features-inheritedQueries,inherited queries>> feature is not enabled, pname:commandBuffer mustnot: have any queries <<queries-operation-active,active>>")
                               (usage nil "If pname:commandBuffer has a ename:VK_QUERY_TYPE_OCCLUSION query <<queries-operation-active,active>>, then each element of pname:pCommandBuffers must: have been recorded with sname:VkCommandBufferBeginInfo::pname:occlusionQueryEnable set to ename:VK_TRUE")
                               (usage nil "If pname:commandBuffer has a ename:VK_QUERY_TYPE_OCCLUSION query <<queries-operation-active,active>>, then each element of pname:pCommandBuffers must: have been recorded with sname:VkCommandBufferBeginInfo::pname:queryFlags having all bits set that are set for the query")
                               (usage nil "If pname:commandBuffer has a ename:VK_QUERY_TYPE_PIPELINE_STATISTICS query <<queries-operation-active,active>>, then each element of pname:pCommandBuffers must: have been recorded with sname:VkCommandBufferInheritanceInfo::pname:pipelineStatistics having all bits set that are set in the sname:VkQueryPool the query uses")
                               (usage nil "Any given element of pname:pCommandBuffers mustnot: begin any query types that are <<queries-operation-active,active>> in pname:commandBuffer")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateAndroidSurfaceKHR"))
                     (param nil
                            (type nil "VkInstance")
                            (name nil "instance"))
                     (param nil "const "
                            (type nil "VkAndroidSurfaceCreateInfoKHR")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            "* "
                            (name nil "pSurface")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetPhysicalDeviceDisplayPropertiesKHR"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pPropertyCount"))
                     (param
                      ((optional . "true")
                       (len . "pPropertyCount"))
                      (type nil "VkDisplayPropertiesKHR")
                      "* "
                      (name nil "pProperties")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pPropertyCount"))
                     (param
                      ((optional . "true")
                       (len . "pPropertyCount"))
                      (type nil "VkDisplayPlanePropertiesKHR")
                      "* "
                      (name nil "pProperties")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetDisplayPlaneSupportedDisplaysKHR"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "planeIndex"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pDisplayCount"))
                     (param
                      ((optional . "true")
                       (len . "pDisplayCount"))
                      (type nil "VkDisplayKHR")
                      "* "
                      (name nil "pDisplays"))
                     (validity nil
                               (usage nil "pname:planeIndex must: be less than the number of display planes supported by the device as determined by calling fname:vkGetPhysicalDeviceDisplayPlanePropertiesKHR")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetDisplayModePropertiesKHR"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param nil
                            (type nil "VkDisplayKHR")
                            (name nil "display"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pPropertyCount"))
                     (param
                      ((optional . "true")
                       (len . "pPropertyCount"))
                      (type nil "VkDisplayModePropertiesKHR")
                      "* "
                      (name nil "pProperties")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateDisplayModeKHR"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkDisplayKHR")
                      (name nil "display"))
                     (param nil "const "
                            (type nil "VkDisplayModeCreateInfoKHR")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkDisplayModeKHR")
                            "* "
                            (name nil "pMode")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetDisplayPlaneCapabilitiesKHR"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkDisplayModeKHR")
                      (name nil "mode"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "planeIndex"))
                     (param nil
                            (type nil "VkDisplayPlaneCapabilitiesKHR")
                            "* "
                            (name nil "pCapabilities")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateDisplayPlaneSurfaceKHR"))
                     (param nil
                            (type nil "VkInstance")
                            (name nil "instance"))
                     (param nil "const "
                            (type nil "VkDisplaySurfaceCreateInfoKHR")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            "* "
                            (name nil "pSurface")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateSharedSwapchainsKHR"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "swapchainCount"))
                     (param
                      ((len . "swapchainCount")
                       (externsync . "pCreateInfos[].surface,pCreateInfos[].oldSwapchain"))
                      "const "
                      (type nil "VkSwapchainCreateInfoKHR")
                      "* "
                      (name nil "pCreateInfos"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param
                      ((len . "swapchainCount"))
                      (type nil "VkSwapchainKHR")
                      "* "
                      (name nil "pSwapchains")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateMirSurfaceKHR"))
                     (param nil
                            (type nil "VkInstance")
                            (name nil "instance"))
                     (param nil "const "
                            (type nil "VkMirSurfaceCreateInfoKHR")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            "* "
                            (name nil "pSurface")))
                    (command nil
                             (proto nil
                                    (type nil "VkBool32")
                                    (name nil "vkGetPhysicalDeviceMirPresentationSupportKHR"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param nil
                                    (type nil "uint32_t")
                                    (name nil "queueFamilyIndex"))
                             (param nil
                                    (type nil "MirConnection")
                                    "* "
                                    (name nil "connection"))
                             (validity nil
                                       (usage nil "pname:queueFamilyIndex must: be less than pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroySurfaceKHR"))
                             (param nil
                                    (type nil "VkInstance")
                                    (name nil "instance"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkSurfaceKHR")
                              (name nil "surface"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All sname:VkSwapchainKHR objects created for pname:surface must: have been destroyed prior to destroying pname:surface")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:surface was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:surface was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetPhysicalDeviceSurfaceSupportKHR"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param nil
                            (type nil "uint32_t")
                            (name nil "queueFamilyIndex"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            (name nil "surface"))
                     (param nil
                            (type nil "VkBool32")
                            "* "
                            (name nil "pSupported"))
                     (validity nil
                               (usage nil "pname:queueFamilyIndex must: be less than pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            (name nil "surface"))
                     (param nil
                            (type nil "VkSurfaceCapabilitiesKHR")
                            "* "
                            (name nil "pSurfaceCapabilities")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetPhysicalDeviceSurfaceFormatsKHR"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            (name nil "surface"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pSurfaceFormatCount"))
                     (param
                      ((optional . "true")
                       (len . "pSurfaceFormatCount"))
                      (type nil "VkSurfaceFormatKHR")
                      "* "
                      (name nil "pSurfaceFormats")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetPhysicalDeviceSurfacePresentModesKHR"))
                     (param nil
                            (type nil "VkPhysicalDevice")
                            (name nil "physicalDevice"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            (name nil "surface"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pPresentModeCount"))
                     (param
                      ((optional . "true")
                       (len . "pPresentModeCount"))
                      (type nil "VkPresentModeKHR")
                      "* "
                      (name nil "pPresentModes")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateSwapchainKHR"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "pCreateInfo.surface,pCreateInfo.oldSwapchain"))
                      "const "
                      (type nil "VkSwapchainCreateInfoKHR")
                      "* "
                      (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkSwapchainKHR")
                            "* "
                            (name nil "pSwapchain")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroySwapchainKHR"))
                             (param nil
                                    (type nil "VkDevice")
                                    (name nil "device"))
                             (param
                              ((optional . "true")
                               (externsync . "true"))
                              (type nil "VkSwapchainKHR")
                              (name nil "swapchain"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "All uses of presentable images acquired from pname:swapchain must: have completed execution")
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:swapchain was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:swapchain was created, pname:pAllocator must: be `NULL`")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_INCOMPLETE")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkGetSwapchainImagesKHR"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param nil
                            (type nil "VkSwapchainKHR")
                            (name nil "swapchain"))
                     (param
                      ((optional . "false,true"))
                      (type nil "uint32_t")
                      "* "
                      (name nil "pSwapchainImageCount"))
                     (param
                      ((optional . "true")
                       (len . "pSwapchainImageCount"))
                      (type nil "VkImage")
                      "* "
                      (name nil "pSwapchainImages")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkAcquireNextImageKHR"))
                     (param nil
                            (type nil "VkDevice")
                            (name nil "device"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkSwapchainKHR")
                      (name nil "swapchain"))
                     (param nil
                            (type nil "uint64_t")
                            (name nil "timeout"))
                     (param
                      ((optional . "true")
                       (externsync . "true"))
                      (type nil "VkSemaphore")
                      (name nil "semaphore"))
                     (param
                      ((optional . "true")
                       (externsync . "true"))
                      (type nil "VkFence")
                      (name nil "fence"))
                     (param nil
                            (type nil "uint32_t")
                            "* "
                            (name nil "pImageIndex"))
                     (validity nil
                               (usage nil "If pname:semaphore is not sname:VK_NULL_HANDLE it must: be unsignalled")
                               (usage nil "If pname:fence is not sname:VK_NULL_HANDLE it must: be unsignalled and mustnot: be associated with any other queue command that has not yet completed execution on that queue")))
                    (command
                     ((successcodes . "VK_SUCCESS,VK_SUBOPTIMAL_KHR")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkQueuePresentKHR"))
                     (param
                      ((externsync . "true"))
                      (type nil "VkQueue")
                      (name nil "queue"))
                     (param
                      ((externsync . "pPresentInfo.pWaitSemaphores[],pPresentInfo.pSwapchains[]"))
                      "const "
                      (type nil "VkPresentInfoKHR")
                      "* "
                      (name nil "pPresentInfo"))
                     (validity nil
                               (usage nil "Any given element of pname:pSwapchains member of pname:pPresentInfo must: be a swapchain that is created for a surface for which presentation is supported from pname:queue as determined using a call to fname:vkGetPhysicalDeviceSurfaceSupportKHR")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateWaylandSurfaceKHR"))
                     (param nil
                            (type nil "VkInstance")
                            (name nil "instance"))
                     (param nil "const "
                            (type nil "VkWaylandSurfaceCreateInfoKHR")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            "* "
                            (name nil "pSurface")))
                    (command nil
                             (proto nil
                                    (type nil "VkBool32")
                                    (name nil "vkGetPhysicalDeviceWaylandPresentationSupportKHR"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param nil
                                    (type nil "uint32_t")
                                    (name nil "queueFamilyIndex"))
                             (param nil "struct "
                                    (type nil "wl_display")
                                    "* "
                                    (name nil "display"))
                             (validity nil
                                       (usage nil "pname:queueFamilyIndex must: be less than pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateWin32SurfaceKHR"))
                     (param nil
                            (type nil "VkInstance")
                            (name nil "instance"))
                     (param nil "const "
                            (type nil "VkWin32SurfaceCreateInfoKHR")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            "* "
                            (name nil "pSurface")))
                    (command nil
                             (proto nil
                                    (type nil "VkBool32")
                                    (name nil "vkGetPhysicalDeviceWin32PresentationSupportKHR"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param nil
                                    (type nil "uint32_t")
                                    (name nil "queueFamilyIndex"))
                             (validity nil
                                       (usage nil "pname:queueFamilyIndex must: be less than pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateXlibSurfaceKHR"))
                     (param nil
                            (type nil "VkInstance")
                            (name nil "instance"))
                     (param nil "const "
                            (type nil "VkXlibSurfaceCreateInfoKHR")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            "* "
                            (name nil "pSurface")))
                    (command nil
                             (proto nil
                                    (type nil "VkBool32")
                                    (name nil "vkGetPhysicalDeviceXlibPresentationSupportKHR"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param nil
                                    (type nil "uint32_t")
                                    (name nil "queueFamilyIndex"))
                             (param nil
                                    (type nil "Display")
                                    "* "
                                    (name nil "dpy"))
                             (param nil
                                    (type nil "VisualID")
                                    (name nil "visualID"))
                             (validity nil
                                       (usage nil "pname:queueFamilyIndex must: be less than pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice")))
                    (command
                     ((successcodes . "VK_SUCCESS")
                      (errorcodes . "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateXcbSurfaceKHR"))
                     (param nil
                            (type nil "VkInstance")
                            (name nil "instance"))
                     (param nil "const "
                            (type nil "VkXcbSurfaceCreateInfoKHR")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkSurfaceKHR")
                            "* "
                            (name nil "pSurface")))
                    (command nil
                             (proto nil
                                    (type nil "VkBool32")
                                    (name nil "vkGetPhysicalDeviceXcbPresentationSupportKHR"))
                             (param nil
                                    (type nil "VkPhysicalDevice")
                                    (name nil "physicalDevice"))
                             (param nil
                                    (type nil "uint32_t")
                                    (name nil "queueFamilyIndex"))
                             (param nil
                                    (type nil "xcb_connection_t")
                                    "* "
                                    (name nil "connection"))
                             (param nil
                                    (type nil "xcb_visualid_t")
                                    (name nil "visual_id"))
                             (validity nil
                                       (usage nil "pname:queueFamilyIndex must: be less than pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice")))
                    (command
                     ((successcodes . "VK_SUCCESS"))
                     (proto nil
                            (type nil "VkResult")
                            (name nil "vkCreateDebugReportCallbackEXT"))
                     (param nil
                            (type nil "VkInstance")
                            (name nil "instance"))
                     (param nil "const "
                            (type nil "VkDebugReportCallbackCreateInfoEXT")
                            "* "
                            (name nil "pCreateInfo"))
                     (param
                      ((optional . "true"))
                      "const "
                      (type nil "VkAllocationCallbacks")
                      "* "
                      (name nil "pAllocator"))
                     (param nil
                            (type nil "VkDebugReportCallbackEXT")
                            "* "
                            (name nil "pCallback")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDestroyDebugReportCallbackEXT"))
                             (param nil
                                    (type nil "VkInstance")
                                    (name nil "instance"))
                             (param
                              ((externsync . "true"))
                              (type nil "VkDebugReportCallbackEXT")
                              (name nil "callback"))
                             (param
                              ((optional . "true"))
                              "const "
                              (type nil "VkAllocationCallbacks")
                              "* "
                              (name nil "pAllocator"))
                             (validity nil
                                       (usage nil "If sname:VkAllocationCallbacks were provided when pname:instance was created, a compatible set of callbacks must: be provided here")
                                       (usage nil "If no sname:VkAllocationCallbacks were provided when pname:instance was created, pname:pAllocator must: be `NULL`")))
                    (command nil
                             (proto nil
                                    (type nil "void")
                                    (name nil "vkDebugReportMessageEXT"))
                             (param nil
                                    (type nil "VkInstance")
                                    (name nil "instance"))
                             (param nil
                                    (type nil "VkDebugReportFlagsEXT")
                                    (name nil "flags"))
                             (param nil
                                    (type nil "VkDebugReportObjectTypeEXT")
                                    (name nil "objectType"))
                             (param nil
                                    (type nil "uint64_t")
                                    (name nil "object"))
                             (param nil
                                    (type nil "size_t")
                                    (name nil "location"))
                             (param nil
                                    (type nil "int32_t")
                                    (name nil "messageCode"))
                             (param nil "const "
                                    (type nil "char")
                                    "* "
                                    (name nil "pLayerPrefix"))
                             (param nil "const "
                                    (type nil "char")
                                    "* "
                                    (name nil "pMessage"))
                             (validity nil
                                       (usage nil "pname:instance must: be a valid sname:VkInstance handle")
                                       (usage nil "pname:flags must: be a combination of one or more of sname:VkDebugReportFlagBitsEXT")
                                       (usage nil "pname:objType must: be one of sname:VkDebugReportObjectTypeEXT, ename:VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT if pname:object is `NULL`")
                                       (usage nil "pname:object may: be a {apiname} object")
                                       (usage nil "pname:pLayerPrefix must: be a `NULL` terminated string.")
                                       (usage nil "pname:pMsg must: be a `NULL` terminated string."))))
          (comment nil " SECTION: Vulkan API interface definitions ")
          (feature
           ((api . "vulkan")
            (name . "VK_VERSION_1_0")
            (number . "1.0"))
           (require
            ((comment . "Header boilerplate"))
            (type
             ((name . "vk_platform"))))
           (require
            ((comment . "API version"))
            (type
             ((name . "VK_API_VERSION")))
            (type
             ((name . "VK_API_VERSION_1_0")))
            (type
             ((name . "VK_VERSION_MAJOR")))
            (type
             ((name . "VK_VERSION_MINOR")))
            (type
             ((name . "VK_VERSION_PATCH")))
            (type
             ((name . "VK_HEADER_VERSION"))))
           (require
            ((comment . "API constants"))
            (enum
             ((name . "VK_LOD_CLAMP_NONE")))
            (enum
             ((name . "VK_REMAINING_MIP_LEVELS")))
            (enum
             ((name . "VK_REMAINING_ARRAY_LAYERS")))
            (enum
             ((name . "VK_WHOLE_SIZE")))
            (enum
             ((name . "VK_ATTACHMENT_UNUSED")))
            (enum
             ((name . "VK_TRUE")))
            (enum
             ((name . "VK_FALSE")))
            (type
             ((name . "VK_NULL_HANDLE")))
            (enum
             ((name . "VK_QUEUE_FAMILY_IGNORED")))
            (enum
             ((name . "VK_SUBPASS_EXTERNAL")))
            (type
             ((name . "VkPipelineCacheHeaderVersion"))))
           (require
            ((comment . "Device initialization"))
            (command
             ((name . "vkCreateInstance")))
            (command
             ((name . "vkDestroyInstance")))
            (command
             ((name . "vkEnumeratePhysicalDevices")))
            (command
             ((name . "vkGetPhysicalDeviceFeatures")))
            (command
             ((name . "vkGetPhysicalDeviceFormatProperties")))
            (command
             ((name . "vkGetPhysicalDeviceImageFormatProperties")))
            (command
             ((name . "vkGetPhysicalDeviceProperties")))
            (command
             ((name . "vkGetPhysicalDeviceQueueFamilyProperties")))
            (command
             ((name . "vkGetPhysicalDeviceMemoryProperties")))
            (command
             ((name . "vkGetInstanceProcAddr")))
            (command
             ((name . "vkGetDeviceProcAddr"))))
           (require
            ((comment . "Device commands"))
            (command
             ((name . "vkCreateDevice")))
            (command
             ((name . "vkDestroyDevice"))))
           (require
            ((comment . "Extension discovery commands"))
            (command
             ((name . "vkEnumerateInstanceExtensionProperties")))
            (command
             ((name . "vkEnumerateDeviceExtensionProperties"))))
           (require
            ((comment . "Layer discovery commands"))
            (command
             ((name . "vkEnumerateInstanceLayerProperties")))
            (command
             ((name . "vkEnumerateDeviceLayerProperties"))))
           (require
            ((comment . "queue commands"))
            (command
             ((name . "vkGetDeviceQueue")))
            (command
             ((name . "vkQueueSubmit")))
            (command
             ((name . "vkQueueWaitIdle")))
            (command
             ((name . "vkDeviceWaitIdle"))))
           (require
            ((comment . "Memory commands"))
            (command
             ((name . "vkAllocateMemory")))
            (command
             ((name . "vkFreeMemory")))
            (command
             ((name . "vkMapMemory")))
            (command
             ((name . "vkUnmapMemory")))
            (command
             ((name . "vkFlushMappedMemoryRanges")))
            (command
             ((name . "vkInvalidateMappedMemoryRanges")))
            (command
             ((name . "vkGetDeviceMemoryCommitment"))))
           (require
            ((comment . "Memory management API commands"))
            (command
             ((name . "vkBindBufferMemory")))
            (command
             ((name . "vkBindImageMemory")))
            (command
             ((name . "vkGetBufferMemoryRequirements")))
            (command
             ((name . "vkGetImageMemoryRequirements"))))
           (require
            ((comment . "Sparse resource memory management API commands"))
            (command
             ((name . "vkGetImageSparseMemoryRequirements")))
            (command
             ((name . "vkGetPhysicalDeviceSparseImageFormatProperties")))
            (command
             ((name . "vkQueueBindSparse"))))
           (require
            ((comment . "Fence commands"))
            (command
             ((name . "vkCreateFence")))
            (command
             ((name . "vkDestroyFence")))
            (command
             ((name . "vkResetFences")))
            (command
             ((name . "vkGetFenceStatus")))
            (command
             ((name . "vkWaitForFences"))))
           (require
            ((comment . "Queue semaphore commands"))
            (command
             ((name . "vkCreateSemaphore")))
            (command
             ((name . "vkDestroySemaphore"))))
           (require
            ((comment . "Event commands"))
            (command
             ((name . "vkCreateEvent")))
            (command
             ((name . "vkDestroyEvent")))
            (command
             ((name . "vkGetEventStatus")))
            (command
             ((name . "vkSetEvent")))
            (command
             ((name . "vkResetEvent"))))
           (require
            ((comment . "Query commands"))
            (command
             ((name . "vkCreateQueryPool")))
            (command
             ((name . "vkDestroyQueryPool")))
            (command
             ((name . "vkGetQueryPoolResults"))))
           (require
            ((comment . "Buffer commands"))
            (command
             ((name . "vkCreateBuffer")))
            (command
             ((name . "vkDestroyBuffer"))))
           (require
            ((comment . "Buffer view commands"))
            (command
             ((name . "vkCreateBufferView")))
            (command
             ((name . "vkDestroyBufferView"))))
           (require
            ((comment . "Image commands"))
            (command
             ((name . "vkCreateImage")))
            (command
             ((name . "vkDestroyImage")))
            (command
             ((name . "vkGetImageSubresourceLayout"))))
           (require
            ((comment . "Image view commands"))
            (command
             ((name . "vkCreateImageView")))
            (command
             ((name . "vkDestroyImageView"))))
           (require
            ((comment . "Shader commands"))
            (command
             ((name . "vkCreateShaderModule")))
            (command
             ((name . "vkDestroyShaderModule"))))
           (require
            ((comment . "Pipeline Cache commands"))
            (command
             ((name . "vkCreatePipelineCache")))
            (command
             ((name . "vkDestroyPipelineCache")))
            (command
             ((name . "vkGetPipelineCacheData")))
            (command
             ((name . "vkMergePipelineCaches"))))
           (require
            ((comment . "Pipeline commands"))
            (command
             ((name . "vkCreateGraphicsPipelines")))
            (command
             ((name . "vkCreateComputePipelines")))
            (command
             ((name . "vkDestroyPipeline"))))
           (require
            ((comment . "Pipeline layout commands"))
            (command
             ((name . "vkCreatePipelineLayout")))
            (command
             ((name . "vkDestroyPipelineLayout"))))
           (require
            ((comment . "Sampler commands"))
            (command
             ((name . "vkCreateSampler")))
            (command
             ((name . "vkDestroySampler"))))
           (require
            ((comment . "Descriptor set commands"))
            (command
             ((name . "vkCreateDescriptorSetLayout")))
            (command
             ((name . "vkDestroyDescriptorSetLayout")))
            (command
             ((name . "vkCreateDescriptorPool")))
            (command
             ((name . "vkDestroyDescriptorPool")))
            (command
             ((name . "vkResetDescriptorPool")))
            (command
             ((name . "vkAllocateDescriptorSets")))
            (command
             ((name . "vkFreeDescriptorSets")))
            (command
             ((name . "vkUpdateDescriptorSets"))))
           (require
            ((comment . "Pass commands"))
            (command
             ((name . "vkCreateFramebuffer")))
            (command
             ((name . "vkDestroyFramebuffer")))
            (command
             ((name . "vkCreateRenderPass")))
            (command
             ((name . "vkDestroyRenderPass")))
            (command
             ((name . "vkGetRenderAreaGranularity"))))
           (require
            ((comment . "Command pool commands"))
            (command
             ((name . "vkCreateCommandPool")))
            (command
             ((name . "vkDestroyCommandPool")))
            (command
             ((name . "vkResetCommandPool"))))
           (require
            ((comment . "Command buffer commands"))
            (command
             ((name . "vkAllocateCommandBuffers")))
            (command
             ((name . "vkFreeCommandBuffers")))
            (command
             ((name . "vkBeginCommandBuffer")))
            (command
             ((name . "vkEndCommandBuffer")))
            (command
             ((name . "vkResetCommandBuffer"))))
           (require
            ((comment . "Command buffer building commands"))
            (command
             ((name . "vkCmdBindPipeline")))
            (command
             ((name . "vkCmdSetViewport")))
            (command
             ((name . "vkCmdSetScissor")))
            (command
             ((name . "vkCmdSetLineWidth")))
            (command
             ((name . "vkCmdSetDepthBias")))
            (command
             ((name . "vkCmdSetBlendConstants")))
            (command
             ((name . "vkCmdSetDepthBounds")))
            (command
             ((name . "vkCmdSetStencilCompareMask")))
            (command
             ((name . "vkCmdSetStencilWriteMask")))
            (command
             ((name . "vkCmdSetStencilReference")))
            (command
             ((name . "vkCmdBindDescriptorSets")))
            (command
             ((name . "vkCmdBindIndexBuffer")))
            (command
             ((name . "vkCmdBindVertexBuffers")))
            (command
             ((name . "vkCmdDraw")))
            (command
             ((name . "vkCmdDrawIndexed")))
            (command
             ((name . "vkCmdDrawIndirect")))
            (command
             ((name . "vkCmdDrawIndexedIndirect")))
            (command
             ((name . "vkCmdDispatch")))
            (command
             ((name . "vkCmdDispatchIndirect")))
            (command
             ((name . "vkCmdCopyBuffer")))
            (command
             ((name . "vkCmdCopyImage")))
            (command
             ((name . "vkCmdBlitImage")))
            (command
             ((name . "vkCmdCopyBufferToImage")))
            (command
             ((name . "vkCmdCopyImageToBuffer")))
            (command
             ((name . "vkCmdUpdateBuffer")))
            (command
             ((name . "vkCmdFillBuffer")))
            (command
             ((name . "vkCmdClearColorImage")))
            (command
             ((name . "vkCmdClearDepthStencilImage")))
            (command
             ((name . "vkCmdClearAttachments")))
            (command
             ((name . "vkCmdResolveImage")))
            (command
             ((name . "vkCmdSetEvent")))
            (command
             ((name . "vkCmdResetEvent")))
            (command
             ((name . "vkCmdWaitEvents")))
            (command
             ((name . "vkCmdPipelineBarrier")))
            (command
             ((name . "vkCmdBeginQuery")))
            (command
             ((name . "vkCmdEndQuery")))
            (command
             ((name . "vkCmdResetQueryPool")))
            (command
             ((name . "vkCmdWriteTimestamp")))
            (command
             ((name . "vkCmdCopyQueryPoolResults")))
            (command
             ((name . "vkCmdPushConstants")))
            (command
             ((name . "vkCmdBeginRenderPass")))
            (command
             ((name . "vkCmdNextSubpass")))
            (command
             ((name . "vkCmdEndRenderPass")))
            (command
             ((name . "vkCmdExecuteCommands"))))
           (require
            ((comment . "Types not directly used by the API"))
            (comment nil " Include <type name=\"typename\"/> here for e.g. structs that\n                 are not parameter types of commands, but still need to be\n                 defined in the API.\n             ")
            (type
             ((name . "VkBufferMemoryBarrier")))
            (type
             ((name . "VkDispatchIndirectCommand")))
            (type
             ((name . "VkDrawIndexedIndirectCommand")))
            (type
             ((name . "VkDrawIndirectCommand")))
            (type
             ((name . "VkImageMemoryBarrier")))
            (type
             ((name . "VkMemoryBarrier")))))
          (comment nil " SECTION: Vulkan extension interface definitions (none yet) ")
          (extensions nil
                      (comment nil " WSI extensions ")
                      (extension
                       ((name . "VK_KHR_surface")
                        (number . "1")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "25")
                                  (name . "VK_KHR_SURFACE_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_surface\"")
                                  (name . "VK_KHR_SURFACE_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (dir . "-")
                                  (extends . "VkResult")
                                  (name . "VK_ERROR_SURFACE_LOST_KHR")))
                                (enum
                                 ((offset . "1")
                                  (dir . "-")
                                  (extends . "VkResult")
                                  (name . "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR")))
                                (command
                                 ((name . "vkDestroySurfaceKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceSurfaceSupportKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceSurfaceFormatsKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceSurfacePresentModesKHR")))))
                      (extension
                       ((name . "VK_KHR_swapchain")
                        (number . "2")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "68")
                                  (name . "VK_KHR_SWAPCHAIN_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_swapchain\"")
                                  (name . "VK_KHR_SWAPCHAIN_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR")))
                                (enum
                                 ((offset . "1")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR")))
                                (enum
                                 ((offset . "2")
                                  (extends . "VkImageLayout")
                                  (name . "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR")))
                                (enum
                                 ((offset . "3")
                                  (extends . "VkResult")
                                  (name . "VK_SUBOPTIMAL_KHR")))
                                (enum
                                 ((offset . "4")
                                  (dir . "-")
                                  (extends . "VkResult")
                                  (name . "VK_ERROR_OUT_OF_DATE_KHR")))
                                (command
                                 ((name . "vkCreateSwapchainKHR")))
                                (command
                                 ((name . "vkDestroySwapchainKHR")))
                                (command
                                 ((name . "vkGetSwapchainImagesKHR")))
                                (command
                                 ((name . "vkAcquireNextImageKHR")))
                                (command
                                 ((name . "vkQueuePresentKHR")))))
                      (extension
                       ((name . "VK_KHR_display")
                        (number . "3")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "21")
                                  (name . "VK_KHR_DISPLAY_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_display\"")
                                  (name . "VK_KHR_DISPLAY_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR")))
                                (enum
                                 ((offset . "1")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR")))
                                (type
                                 ((name . "VkDisplayPlaneAlphaFlagsKHR")))
                                (type
                                 ((name . "VkDisplayPlaneAlphaFlagBitsKHR")))
                                (type
                                 ((name . "VkDisplayPropertiesKHR")))
                                (type
                                 ((name . "VkDisplayModeParametersKHR")))
                                (type
                                 ((name . "VkDisplayModePropertiesKHR")))
                                (type
                                 ((name . "VkDisplayModeCreateInfoKHR")))
                                (type
                                 ((name . "VkDisplayPlaneCapabilitiesKHR")))
                                (type
                                 ((name . "VkDisplayPlanePropertiesKHR")))
                                (type
                                 ((name . "VkDisplaySurfaceCreateInfoKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceDisplayPropertiesKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")))
                                (command
                                 ((name . "vkGetDisplayPlaneSupportedDisplaysKHR")))
                                (command
                                 ((name . "vkGetDisplayModePropertiesKHR")))
                                (command
                                 ((name . "vkCreateDisplayModeKHR")))
                                (command
                                 ((name . "vkGetDisplayPlaneCapabilitiesKHR")))
                                (command
                                 ((name . "vkCreateDisplayPlaneSurfaceKHR")))))
                      (extension
                       ((name . "VK_KHR_display_swapchain")
                        (number . "4")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "9")
                                  (name . "VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_display_swapchain\"")
                                  (name . "VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR")))
                                (enum
                                 ((offset . "1")
                                  (dir . "-")
                                  (extends . "VkResult")
                                  (name . "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR")))
                                (type
                                 ((name . "VkDisplayPresentInfoKHR")))
                                (command
                                 ((name . "vkCreateSharedSwapchainsKHR")))))
                      (extension
                       ((name . "VK_KHR_xlib_surface")
                        (number . "5")
                        (protect . "VK_USE_PLATFORM_XLIB_KHR")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "6")
                                  (name . "VK_KHR_XLIB_SURFACE_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_xlib_surface\"")
                                  (name . "VK_KHR_XLIB_SURFACE_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR")))
                                (type
                                 ((name . "VkXlibSurfaceCreateFlagsKHR")))
                                (type
                                 ((name . "VkXlibSurfaceCreateInfoKHR")))
                                (command
                                 ((name . "vkCreateXlibSurfaceKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceXlibPresentationSupportKHR")))))
                      (extension
                       ((name . "VK_KHR_xcb_surface")
                        (number . "6")
                        (protect . "VK_USE_PLATFORM_XCB_KHR")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "6")
                                  (name . "VK_KHR_XCB_SURFACE_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_xcb_surface\"")
                                  (name . "VK_KHR_XCB_SURFACE_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR")))
                                (type
                                 ((name . "VkXcbSurfaceCreateFlagsKHR")))
                                (type
                                 ((name . "VkXcbSurfaceCreateInfoKHR")))
                                (command
                                 ((name . "vkCreateXcbSurfaceKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceXcbPresentationSupportKHR")))))
                      (extension
                       ((name . "VK_KHR_wayland_surface")
                        (number . "7")
                        (protect . "VK_USE_PLATFORM_WAYLAND_KHR")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "5")
                                  (name . "VK_KHR_WAYLAND_SURFACE_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_wayland_surface\"")
                                  (name . "VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR")))
                                (type
                                 ((name . "VkWaylandSurfaceCreateFlagsKHR")))
                                (type
                                 ((name . "VkWaylandSurfaceCreateInfoKHR")))
                                (command
                                 ((name . "vkCreateWaylandSurfaceKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceWaylandPresentationSupportKHR")))))
                      (extension
                       ((name . "VK_KHR_mir_surface")
                        (number . "8")
                        (protect . "VK_USE_PLATFORM_MIR_KHR")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "4")
                                  (name . "VK_KHR_MIR_SURFACE_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_mir_surface\"")
                                  (name . "VK_KHR_MIR_SURFACE_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR")))
                                (type
                                 ((name . "VkMirSurfaceCreateFlagsKHR")))
                                (type
                                 ((name . "VkMirSurfaceCreateInfoKHR")))
                                (command
                                 ((name . "vkCreateMirSurfaceKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceMirPresentationSupportKHR")))))
                      (extension
                       ((name . "VK_KHR_android_surface")
                        (number . "9")
                        (protect . "VK_USE_PLATFORM_ANDROID_KHR")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "6")
                                  (name . "VK_KHR_ANDROID_SURFACE_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_android_surface\"")
                                  (name . "VK_KHR_ANDROID_SURFACE_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR")))
                                (type
                                 ((name . "VkAndroidSurfaceCreateFlagsKHR")))
                                (type
                                 ((name . "VkAndroidSurfaceCreateInfoKHR")))
                                (command
                                 ((name . "vkCreateAndroidSurfaceKHR")))))
                      (extension
                       ((name . "VK_KHR_win32_surface")
                        (number . "10")
                        (protect . "VK_USE_PLATFORM_WIN32_KHR")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "5")
                                  (name . "VK_KHR_WIN32_SURFACE_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_win32_surface\"")
                                  (name . "VK_KHR_WIN32_SURFACE_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR")))
                                (type
                                 ((name . "VkWin32SurfaceCreateFlagsKHR")))
                                (type
                                 ((name . "VkWin32SurfaceCreateInfoKHR")))
                                (command
                                 ((name . "vkCreateWin32SurfaceKHR")))
                                (command
                                 ((name . "vkGetPhysicalDeviceWin32PresentationSupportKHR")))))
                      (extension
                       ((name . "VK_ANDROID_native_buffer")
                        (number . "11")
                        (supported . "disabled"))
                       (require nil
                                (enum
                                 ((value . "4")
                                  (name . "VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION")))
                                (enum
                                 ((value . "11")
                                  (name . "VK_ANDROID_NATIVE_BUFFER_NUMBER")))
                                (enum
                                 ((value . "\"VK_ANDROID_native_buffer\"")
                                  (name . "VK_ANDROID_NATIVE_BUFFER_NAME")))))
                      (extension
                       ((name . "VK_EXT_debug_report")
                        (number . "12")
                        (author . "Google, Inc.")
                        (contact . "Courtney Goeltzenleuchter @courtney")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "2")
                                  (name . "VK_EXT_DEBUG_REPORT_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_EXT_debug_report\"")
                                  (name . "VK_EXT_DEBUG_REPORT_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkStructureType")
                                  (name . "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT")))
                                (enum
                                 ((offset . "1")
                                  (dir . "-")
                                  (extends . "VkResult")
                                  (name . "VK_ERROR_VALIDATION_FAILED_EXT")))
                                (enum
                                 ((value . "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT")
                                  (name . "VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT")))
                                (type
                                 ((name . "VkDebugReportObjectTypeEXT")))
                                (type
                                 ((name . "VkDebugReportErrorEXT")))
                                (command
                                 ((name . "vkCreateDebugReportCallbackEXT")))
                                (command
                                 ((name . "vkDestroyDebugReportCallbackEXT")))
                                (command
                                 ((name . "vkDebugReportMessageEXT")))))
                      (extension
                       ((name . "VK_NV_glsl_shader")
                        (number . "13")
                        (author . "NVIDIA")
                        (contact . "Piers Daniell @pdaniell")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "1")
                                  (name . "VK_NV_GLSL_SHADER_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_NV_glsl_shader\"")
                                  (name . "VK_NV_GLSL_SHADER_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (dir . "-")
                                  (extends . "VkResult")
                                  (name . "VK_ERROR_INVALID_SHADER_NV")))))
                      (extension
                       ((name . "VK_NV_extension_1")
                        (number . "14")
                        (author . "NVIDIA")
                        (contact . "Piers Daniell @pdaniell")
                        (supported . "disabled"))
                       (require nil
                                (enum
                                 ((value . "0")
                                  (name . "VK_NV_EXTENSION_1_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_NV_extension_1\"")
                                  (name . "VK_NV_EXTENSION_1_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (dir . "-")
                                  (extends . "VkResult")
                                  (name . "VK_NV_EXTENSION_1_ERROR")))))
                      (extension
                       ((name . "VK_KHR_sampler_mirror_clamp_to_edge")
                        (number . "15")
                        (author . "KHR")
                        (contact . "Tobias Hector @tobias")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "1")
                                  (name . "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_KHR_sampler_mirror_clamp_to_edge\"")
                                  (name . "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME")))
                                (enum
                                 ((value . "4")
                                  (extends . "VkSamplerAddressMode")
                                  (name . "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE")
                                  (comment . "Note that this defines what was previously a core enum, and so uses the 'value' attribute rather than 'offset', and doesn't have a suffix. This is a special case, and should not be repeated")))))
                      (extension
                       ((name . "VK_IMG_filter_cubic")
                        (number . "16")
                        (author . "IMG")
                        (contact . "Tobias Hector @tobias")
                        (supported . "vulkan"))
                       (require nil
                                (enum
                                 ((value . "1")
                                  (name . "VK_IMG_FILTER_CUBIC_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_IMG_filter_cubic\"")
                                  (name . "VK_IMG_FILTER_CUBIC_EXTENSION_NAME")))
                                (enum
                                 ((offset . "0")
                                  (extends . "VkFilter")
                                  (name . "VK_FILTER_CUBIC_IMG")))
                                (enum
                                 ((bitpos . "13")
                                  (extends . "VkFormatFeatureFlagBits")
                                  (name . "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG")
                                  (comment . "Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled")))
                                (usage
                                 ((command . "vkCmdDraw"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command must: be of a format which supports cubic filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in sname:VkFormatProperties::pname:linearTilingFeatures (for a linear image) or sname:VkFormatProperties::pname:optimalTilingFeatures(for an optimally tiled image) returned by fname:vkGetPhysicalDeviceFormatProperties")
                                (usage
                                 ((command . "vkCmdDraw"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command mustnot: have an elink:VkImageViewType of ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY")
                                (usage
                                 ((command . "vkCmdDrawIndexed"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command must: be of a format which supports cubic filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in sname:VkFormatProperties::pname:linearTilingFeatures (for a linear image) or sname:VkFormatProperties::pname:optimalTilingFeatures(for an optimally tiled image) returned by fname:vkGetPhysicalDeviceFormatProperties")
                                (usage
                                 ((command . "vkCmdDrawIndexed"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command mustnot: have an elink:VkImageViewType of ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY")
                                (usage
                                 ((command . "vkCmdDrawIndirect"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command must: be of a format which supports cubic filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in sname:VkFormatProperties::pname:linearTilingFeatures (for a linear image) or sname:VkFormatProperties::pname:optimalTilingFeatures(for an optimally tiled image) returned by fname:vkGetPhysicalDeviceFormatProperties")
                                (usage
                                 ((command . "vkCmdDrawIndirect"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command mustnot: have an elink:VkImageViewType of ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY")
                                (usage
                                 ((command . "vkCmdDrawIndexedIndirect"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command must: be of a format which supports cubic filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in sname:VkFormatProperties::pname:linearTilingFeatures (for a linear image) or sname:VkFormatProperties::pname:optimalTilingFeatures(for an optimally tiled image) returned by fname:vkGetPhysicalDeviceFormatProperties")
                                (usage
                                 ((command . "vkCmdDrawIndexedIndirect"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command mustnot: have an elink:VkImageViewType of ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY")
                                (usage
                                 ((command . "vkCmdDispatch"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command must: be of a format which supports cubic filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in sname:VkFormatProperties::pname:linearTilingFeatures (for a linear image) or sname:VkFormatProperties::pname:optimalTilingFeatures(for an optimally tiled image) returned by fname:vkGetPhysicalDeviceFormatProperties")
                                (usage
                                 ((command . "vkCmdDispatch"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command mustnot: have an elink:VkImageViewType of ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY")
                                (usage
                                 ((command . "vkCmdDispatchIndirect"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command must: be of a format which supports cubic filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in sname:VkFormatProperties::pname:linearTilingFeatures (for a linear image) or sname:VkFormatProperties::pname:optimalTilingFeatures(for an optimally tiled image) returned by fname:vkGetPhysicalDeviceFormatProperties")
                                (usage
                                 ((command . "vkCmdDispatchIndirect"))
                                 "Any slink:VkImageView being sampled with ename:VK_FILTER_CUBIC_IMG as a result of this command mustnot: have an elink:VkImageViewType of ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY")
                                (usage
                                 ((command . "vkCmdBlitImage"))
                                 "If pname:filter is ename:VK_FILTER_CUBIC_IMG, pname:srcImage must: be of a format which supports cubic filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in sname:VkFormatProperties::pname:linearTilingFeatures (for a linear image) or sname:VkFormatProperties::pname:optimalTilingFeatures(for an optimally tiled image) returned by fname:vkGetPhysicalDeviceFormatProperties")
                                (usage
                                 ((struct . "VkSamplerCreateInfo"))
                                 "If either pname:magFilter or pname:minFilter is ename:VK_FILTER_CUBIC_IMG, pname:anisotropyEnable must: be ename:VK_FALSE")))
                      (extension
                       ((name . "VK_AMD_extension_1")
                        (number . "17")
                        (author . "AMD")
                        (contact . "Daniel Rakos @aqnuep")
                        (supported . "disabled"))
                       (require nil
                                (enum
                                 ((value . "0")
                                  (name . "VK_AMD_EXTENSION_1_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_AMD_extension_1\"")
                                  (name . "VK_AMD_EXTENSION_1_EXTENSION_NAME")))))
                      (extension
                       ((name . "VK_AMD_extension_2")
                        (number . "18")
                        (author . "AMD")
                        (contact . "Daniel Rakos @aqnuep")
                        (supported . "disabled"))
                       (require nil
                                (enum
                                 ((value . "0")
                                  (name . "VK_AMD_EXTENSION_2_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_AMD_extension_2\"")
                                  (name . "VK_AMD_EXTENSION_2_EXTENSION_NAME")))))
                      (extension
                       ((name . "VK_AMD_extension_3")
                        (number . "19")
                        (author . "AMD")
                        (contact . "Daniel Rakos @aqnuep")
                        (supported . "disabled"))
                       (require nil
                                (enum
                                 ((value . "0")
                                  (name . "VK_AMD_EXTENSION_3_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_AMD_extension_3\"")
                                  (name . "VK_AMD_EXTENSION_3_EXTENSION_NAME")))))
                      (extension
                       ((name . "VK_AMD_extension_4")
                        (number . "20")
                        (author . "AMD")
                        (contact . "Daniel Rakos @aqnuep")
                        (supported . "disabled"))
                       (require nil
                                (enum
                                 ((value . "0")
                                  (name . "VK_AMD_EXTENSION_4_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_AMD_extension_4\"")
                                  (name . "VK_AMD_EXTENSION_4_EXTENSION_NAME")))))
                      (extension
                       ((name . "VK_AMD_extension_5")
                        (number . "21")
                        (author . "AMD")
                        (contact . "Daniel Rakos @aqnuep")
                        (supported . "disabled"))
                       (require nil
                                (enum
                                 ((value . "0")
                                  (name . "VK_AMD_EXTENSION_5_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_AMD_extension_5\"")
                                  (name . "VK_AMD_EXTENSION_5_EXTENSION_NAME")))))
                      (extension
                       ((name . "VK_AMD_extension_6")
                        (number . "22")
                        (author . "AMD")
                        (contact . "Daniel Rakos @aqnuep")
                        (supported . "disabled"))
                       (require nil
                                (enum
                                 ((value . "0")
                                  (name . "VK_AMD_EXTENSION_6_SPEC_VERSION")))
                                (enum
                                 ((value . "\"VK_AMD_extension_6\"")
                                  (name . "VK_AMD_EXTENSION_6_EXTENSION_NAME")))))))
